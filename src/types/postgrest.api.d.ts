// src/types/postgrest.api.d.ts
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** OpenAPI description (this document) */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/user_sms_preferences": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.user_sms_preferences.id"];
          user_id?: components["parameters"]["rowFilter.user_sms_preferences.user_id"];
          phone_number?: components["parameters"]["rowFilter.user_sms_preferences.phone_number"];
          phone_verified?: components["parameters"]["rowFilter.user_sms_preferences.phone_verified"];
          phone_verified_at?: components["parameters"]["rowFilter.user_sms_preferences.phone_verified_at"];
          task_reminders?: components["parameters"]["rowFilter.user_sms_preferences.task_reminders"];
          daily_brief_sms?: components["parameters"]["rowFilter.user_sms_preferences.daily_brief_sms"];
          urgent_alerts?: components["parameters"]["rowFilter.user_sms_preferences.urgent_alerts"];
          quiet_hours_start?: components["parameters"]["rowFilter.user_sms_preferences.quiet_hours_start"];
          quiet_hours_end?: components["parameters"]["rowFilter.user_sms_preferences.quiet_hours_end"];
          timezone?: components["parameters"]["rowFilter.user_sms_preferences.timezone"];
          daily_sms_limit?: components["parameters"]["rowFilter.user_sms_preferences.daily_sms_limit"];
          daily_sms_count?: components["parameters"]["rowFilter.user_sms_preferences.daily_sms_count"];
          daily_count_reset_at?: components["parameters"]["rowFilter.user_sms_preferences.daily_count_reset_at"];
          opted_out?: components["parameters"]["rowFilter.user_sms_preferences.opted_out"];
          opted_out_at?: components["parameters"]["rowFilter.user_sms_preferences.opted_out_at"];
          opt_out_reason?: components["parameters"]["rowFilter.user_sms_preferences.opt_out_reason"];
          created_at?: components["parameters"]["rowFilter.user_sms_preferences.created_at"];
          updated_at?: components["parameters"]["rowFilter.user_sms_preferences.updated_at"];
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
          /** @description Ordering */
          order?: components["parameters"]["order"];
          /** @description Limiting and Pagination */
          offset?: components["parameters"]["offset"];
          /** @description Limiting and Pagination */
          limit?: components["parameters"]["limit"];
        };
        header?: {
          /** @description Limiting and Pagination */
          Range?: components["parameters"]["range"];
          /** @description Limiting and Pagination */
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          /** @description Preference */
          Prefer?: components["parameters"]["preferCount"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["user_sms_preferences"][];
            "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["user_sms_preferences"][];
            "application/vnd.pgrst.object+json": components["schemas"]["user_sms_preferences"][];
            "text/csv": components["schemas"]["user_sms_preferences"][];
          };
        };
        /** @description Partial Content */
        206: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: {
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferPost"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["user_sms_preferences"];
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.user_sms_preferences.id"];
          user_id?: components["parameters"]["rowFilter.user_sms_preferences.user_id"];
          phone_number?: components["parameters"]["rowFilter.user_sms_preferences.phone_number"];
          phone_verified?: components["parameters"]["rowFilter.user_sms_preferences.phone_verified"];
          phone_verified_at?: components["parameters"]["rowFilter.user_sms_preferences.phone_verified_at"];
          task_reminders?: components["parameters"]["rowFilter.user_sms_preferences.task_reminders"];
          daily_brief_sms?: components["parameters"]["rowFilter.user_sms_preferences.daily_brief_sms"];
          urgent_alerts?: components["parameters"]["rowFilter.user_sms_preferences.urgent_alerts"];
          quiet_hours_start?: components["parameters"]["rowFilter.user_sms_preferences.quiet_hours_start"];
          quiet_hours_end?: components["parameters"]["rowFilter.user_sms_preferences.quiet_hours_end"];
          timezone?: components["parameters"]["rowFilter.user_sms_preferences.timezone"];
          daily_sms_limit?: components["parameters"]["rowFilter.user_sms_preferences.daily_sms_limit"];
          daily_sms_count?: components["parameters"]["rowFilter.user_sms_preferences.daily_sms_count"];
          daily_count_reset_at?: components["parameters"]["rowFilter.user_sms_preferences.daily_count_reset_at"];
          opted_out?: components["parameters"]["rowFilter.user_sms_preferences.opted_out"];
          opted_out_at?: components["parameters"]["rowFilter.user_sms_preferences.opted_out_at"];
          opt_out_reason?: components["parameters"]["rowFilter.user_sms_preferences.opt_out_reason"];
          created_at?: components["parameters"]["rowFilter.user_sms_preferences.created_at"];
          updated_at?: components["parameters"]["rowFilter.user_sms_preferences.updated_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.user_sms_preferences.id"];
          user_id?: components["parameters"]["rowFilter.user_sms_preferences.user_id"];
          phone_number?: components["parameters"]["rowFilter.user_sms_preferences.phone_number"];
          phone_verified?: components["parameters"]["rowFilter.user_sms_preferences.phone_verified"];
          phone_verified_at?: components["parameters"]["rowFilter.user_sms_preferences.phone_verified_at"];
          task_reminders?: components["parameters"]["rowFilter.user_sms_preferences.task_reminders"];
          daily_brief_sms?: components["parameters"]["rowFilter.user_sms_preferences.daily_brief_sms"];
          urgent_alerts?: components["parameters"]["rowFilter.user_sms_preferences.urgent_alerts"];
          quiet_hours_start?: components["parameters"]["rowFilter.user_sms_preferences.quiet_hours_start"];
          quiet_hours_end?: components["parameters"]["rowFilter.user_sms_preferences.quiet_hours_end"];
          timezone?: components["parameters"]["rowFilter.user_sms_preferences.timezone"];
          daily_sms_limit?: components["parameters"]["rowFilter.user_sms_preferences.daily_sms_limit"];
          daily_sms_count?: components["parameters"]["rowFilter.user_sms_preferences.daily_sms_count"];
          daily_count_reset_at?: components["parameters"]["rowFilter.user_sms_preferences.daily_count_reset_at"];
          opted_out?: components["parameters"]["rowFilter.user_sms_preferences.opted_out"];
          opted_out_at?: components["parameters"]["rowFilter.user_sms_preferences.opted_out_at"];
          opt_out_reason?: components["parameters"]["rowFilter.user_sms_preferences.opt_out_reason"];
          created_at?: components["parameters"]["rowFilter.user_sms_preferences.created_at"];
          updated_at?: components["parameters"]["rowFilter.user_sms_preferences.updated_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["user_sms_preferences"];
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    trace?: never;
  };
  "/email_logs": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.email_logs.id"];
          user_id?: components["parameters"]["rowFilter.email_logs.user_id"];
          to_email?: components["parameters"]["rowFilter.email_logs.to_email"];
          subject?: components["parameters"]["rowFilter.email_logs.subject"];
          body?: components["parameters"]["rowFilter.email_logs.body"];
          cc?: components["parameters"]["rowFilter.email_logs.cc"];
          bcc?: components["parameters"]["rowFilter.email_logs.bcc"];
          reply_to?: components["parameters"]["rowFilter.email_logs.reply_to"];
          metadata?: components["parameters"]["rowFilter.email_logs.metadata"];
          status?: components["parameters"]["rowFilter.email_logs.status"];
          error_message?: components["parameters"]["rowFilter.email_logs.error_message"];
          sent_at?: components["parameters"]["rowFilter.email_logs.sent_at"];
          created_at?: components["parameters"]["rowFilter.email_logs.created_at"];
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
          /** @description Ordering */
          order?: components["parameters"]["order"];
          /** @description Limiting and Pagination */
          offset?: components["parameters"]["offset"];
          /** @description Limiting and Pagination */
          limit?: components["parameters"]["limit"];
        };
        header?: {
          /** @description Limiting and Pagination */
          Range?: components["parameters"]["range"];
          /** @description Limiting and Pagination */
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          /** @description Preference */
          Prefer?: components["parameters"]["preferCount"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["email_logs"][];
            "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["email_logs"][];
            "application/vnd.pgrst.object+json": components["schemas"]["email_logs"][];
            "text/csv": components["schemas"]["email_logs"][];
          };
        };
        /** @description Partial Content */
        206: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: {
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferPost"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["email_logs"];
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.email_logs.id"];
          user_id?: components["parameters"]["rowFilter.email_logs.user_id"];
          to_email?: components["parameters"]["rowFilter.email_logs.to_email"];
          subject?: components["parameters"]["rowFilter.email_logs.subject"];
          body?: components["parameters"]["rowFilter.email_logs.body"];
          cc?: components["parameters"]["rowFilter.email_logs.cc"];
          bcc?: components["parameters"]["rowFilter.email_logs.bcc"];
          reply_to?: components["parameters"]["rowFilter.email_logs.reply_to"];
          metadata?: components["parameters"]["rowFilter.email_logs.metadata"];
          status?: components["parameters"]["rowFilter.email_logs.status"];
          error_message?: components["parameters"]["rowFilter.email_logs.error_message"];
          sent_at?: components["parameters"]["rowFilter.email_logs.sent_at"];
          created_at?: components["parameters"]["rowFilter.email_logs.created_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.email_logs.id"];
          user_id?: components["parameters"]["rowFilter.email_logs.user_id"];
          to_email?: components["parameters"]["rowFilter.email_logs.to_email"];
          subject?: components["parameters"]["rowFilter.email_logs.subject"];
          body?: components["parameters"]["rowFilter.email_logs.body"];
          cc?: components["parameters"]["rowFilter.email_logs.cc"];
          bcc?: components["parameters"]["rowFilter.email_logs.bcc"];
          reply_to?: components["parameters"]["rowFilter.email_logs.reply_to"];
          metadata?: components["parameters"]["rowFilter.email_logs.metadata"];
          status?: components["parameters"]["rowFilter.email_logs.status"];
          error_message?: components["parameters"]["rowFilter.email_logs.error_message"];
          sent_at?: components["parameters"]["rowFilter.email_logs.sent_at"];
          created_at?: components["parameters"]["rowFilter.email_logs.created_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["email_logs"];
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    trace?: never;
  };
  "/daily_briefs": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.daily_briefs.id"];
          user_id?: components["parameters"]["rowFilter.daily_briefs.user_id"];
          brief_date?: components["parameters"]["rowFilter.daily_briefs.brief_date"];
          summary_content?: components["parameters"]["rowFilter.daily_briefs.summary_content"];
          project_brief_ids?: components["parameters"]["rowFilter.daily_briefs.project_brief_ids"];
          insights?: components["parameters"]["rowFilter.daily_briefs.insights"];
          priority_actions?: components["parameters"]["rowFilter.daily_briefs.priority_actions"];
          created_at?: components["parameters"]["rowFilter.daily_briefs.created_at"];
          updated_at?: components["parameters"]["rowFilter.daily_briefs.updated_at"];
          generation_status?: components["parameters"]["rowFilter.daily_briefs.generation_status"];
          generation_started_at?: components["parameters"]["rowFilter.daily_briefs.generation_started_at"];
          generation_completed_at?: components["parameters"]["rowFilter.daily_briefs.generation_completed_at"];
          generation_progress?: components["parameters"]["rowFilter.daily_briefs.generation_progress"];
          generation_error?: components["parameters"]["rowFilter.daily_briefs.generation_error"];
          metadata?: components["parameters"]["rowFilter.daily_briefs.metadata"];
          llm_analysis?: components["parameters"]["rowFilter.daily_briefs.llm_analysis"];
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
          /** @description Ordering */
          order?: components["parameters"]["order"];
          /** @description Limiting and Pagination */
          offset?: components["parameters"]["offset"];
          /** @description Limiting and Pagination */
          limit?: components["parameters"]["limit"];
        };
        header?: {
          /** @description Limiting and Pagination */
          Range?: components["parameters"]["range"];
          /** @description Limiting and Pagination */
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          /** @description Preference */
          Prefer?: components["parameters"]["preferCount"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["daily_briefs"][];
            "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["daily_briefs"][];
            "application/vnd.pgrst.object+json": components["schemas"]["daily_briefs"][];
            "text/csv": components["schemas"]["daily_briefs"][];
          };
        };
        /** @description Partial Content */
        206: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: {
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferPost"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["daily_briefs"];
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.daily_briefs.id"];
          user_id?: components["parameters"]["rowFilter.daily_briefs.user_id"];
          brief_date?: components["parameters"]["rowFilter.daily_briefs.brief_date"];
          summary_content?: components["parameters"]["rowFilter.daily_briefs.summary_content"];
          project_brief_ids?: components["parameters"]["rowFilter.daily_briefs.project_brief_ids"];
          insights?: components["parameters"]["rowFilter.daily_briefs.insights"];
          priority_actions?: components["parameters"]["rowFilter.daily_briefs.priority_actions"];
          created_at?: components["parameters"]["rowFilter.daily_briefs.created_at"];
          updated_at?: components["parameters"]["rowFilter.daily_briefs.updated_at"];
          generation_status?: components["parameters"]["rowFilter.daily_briefs.generation_status"];
          generation_started_at?: components["parameters"]["rowFilter.daily_briefs.generation_started_at"];
          generation_completed_at?: components["parameters"]["rowFilter.daily_briefs.generation_completed_at"];
          generation_progress?: components["parameters"]["rowFilter.daily_briefs.generation_progress"];
          generation_error?: components["parameters"]["rowFilter.daily_briefs.generation_error"];
          metadata?: components["parameters"]["rowFilter.daily_briefs.metadata"];
          llm_analysis?: components["parameters"]["rowFilter.daily_briefs.llm_analysis"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.daily_briefs.id"];
          user_id?: components["parameters"]["rowFilter.daily_briefs.user_id"];
          brief_date?: components["parameters"]["rowFilter.daily_briefs.brief_date"];
          summary_content?: components["parameters"]["rowFilter.daily_briefs.summary_content"];
          project_brief_ids?: components["parameters"]["rowFilter.daily_briefs.project_brief_ids"];
          insights?: components["parameters"]["rowFilter.daily_briefs.insights"];
          priority_actions?: components["parameters"]["rowFilter.daily_briefs.priority_actions"];
          created_at?: components["parameters"]["rowFilter.daily_briefs.created_at"];
          updated_at?: components["parameters"]["rowFilter.daily_briefs.updated_at"];
          generation_status?: components["parameters"]["rowFilter.daily_briefs.generation_status"];
          generation_started_at?: components["parameters"]["rowFilter.daily_briefs.generation_started_at"];
          generation_completed_at?: components["parameters"]["rowFilter.daily_briefs.generation_completed_at"];
          generation_progress?: components["parameters"]["rowFilter.daily_briefs.generation_progress"];
          generation_error?: components["parameters"]["rowFilter.daily_briefs.generation_error"];
          metadata?: components["parameters"]["rowFilter.daily_briefs.metadata"];
          llm_analysis?: components["parameters"]["rowFilter.daily_briefs.llm_analysis"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["daily_briefs"];
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    trace?: never;
  };
  "/recurring_task_migration_log": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.recurring_task_migration_log.id"];
          task_id?: components["parameters"]["rowFilter.recurring_task_migration_log.task_id"];
          user_id?: components["parameters"]["rowFilter.recurring_task_migration_log.user_id"];
          project_id?: components["parameters"]["rowFilter.recurring_task_migration_log.project_id"];
          migration_type?: components["parameters"]["rowFilter.recurring_task_migration_log.migration_type"];
          old_recurrence_ends?: components["parameters"]["rowFilter.recurring_task_migration_log.old_recurrence_ends"];
          new_recurrence_ends?: components["parameters"]["rowFilter.recurring_task_migration_log.new_recurrence_ends"];
          old_calendar_event_id?: components["parameters"]["rowFilter.recurring_task_migration_log.old_calendar_event_id"];
          new_calendar_event_id?: components["parameters"]["rowFilter.recurring_task_migration_log.new_calendar_event_id"];
          status?: components["parameters"]["rowFilter.recurring_task_migration_log.status"];
          error_message?: components["parameters"]["rowFilter.recurring_task_migration_log.error_message"];
          created_at?: components["parameters"]["rowFilter.recurring_task_migration_log.created_at"];
          updated_at?: components["parameters"]["rowFilter.recurring_task_migration_log.updated_at"];
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
          /** @description Ordering */
          order?: components["parameters"]["order"];
          /** @description Limiting and Pagination */
          offset?: components["parameters"]["offset"];
          /** @description Limiting and Pagination */
          limit?: components["parameters"]["limit"];
        };
        header?: {
          /** @description Limiting and Pagination */
          Range?: components["parameters"]["range"];
          /** @description Limiting and Pagination */
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          /** @description Preference */
          Prefer?: components["parameters"]["preferCount"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["recurring_task_migration_log"][];
            "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["recurring_task_migration_log"][];
            "application/vnd.pgrst.object+json": components["schemas"]["recurring_task_migration_log"][];
            "text/csv": components["schemas"]["recurring_task_migration_log"][];
          };
        };
        /** @description Partial Content */
        206: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: {
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferPost"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["recurring_task_migration_log"];
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.recurring_task_migration_log.id"];
          task_id?: components["parameters"]["rowFilter.recurring_task_migration_log.task_id"];
          user_id?: components["parameters"]["rowFilter.recurring_task_migration_log.user_id"];
          project_id?: components["parameters"]["rowFilter.recurring_task_migration_log.project_id"];
          migration_type?: components["parameters"]["rowFilter.recurring_task_migration_log.migration_type"];
          old_recurrence_ends?: components["parameters"]["rowFilter.recurring_task_migration_log.old_recurrence_ends"];
          new_recurrence_ends?: components["parameters"]["rowFilter.recurring_task_migration_log.new_recurrence_ends"];
          old_calendar_event_id?: components["parameters"]["rowFilter.recurring_task_migration_log.old_calendar_event_id"];
          new_calendar_event_id?: components["parameters"]["rowFilter.recurring_task_migration_log.new_calendar_event_id"];
          status?: components["parameters"]["rowFilter.recurring_task_migration_log.status"];
          error_message?: components["parameters"]["rowFilter.recurring_task_migration_log.error_message"];
          created_at?: components["parameters"]["rowFilter.recurring_task_migration_log.created_at"];
          updated_at?: components["parameters"]["rowFilter.recurring_task_migration_log.updated_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.recurring_task_migration_log.id"];
          task_id?: components["parameters"]["rowFilter.recurring_task_migration_log.task_id"];
          user_id?: components["parameters"]["rowFilter.recurring_task_migration_log.user_id"];
          project_id?: components["parameters"]["rowFilter.recurring_task_migration_log.project_id"];
          migration_type?: components["parameters"]["rowFilter.recurring_task_migration_log.migration_type"];
          old_recurrence_ends?: components["parameters"]["rowFilter.recurring_task_migration_log.old_recurrence_ends"];
          new_recurrence_ends?: components["parameters"]["rowFilter.recurring_task_migration_log.new_recurrence_ends"];
          old_calendar_event_id?: components["parameters"]["rowFilter.recurring_task_migration_log.old_calendar_event_id"];
          new_calendar_event_id?: components["parameters"]["rowFilter.recurring_task_migration_log.new_calendar_event_id"];
          status?: components["parameters"]["rowFilter.recurring_task_migration_log.status"];
          error_message?: components["parameters"]["rowFilter.recurring_task_migration_log.error_message"];
          created_at?: components["parameters"]["rowFilter.recurring_task_migration_log.created_at"];
          updated_at?: components["parameters"]["rowFilter.recurring_task_migration_log.updated_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["recurring_task_migration_log"];
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    trace?: never;
  };
  "/queue_jobs": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.queue_jobs.id"];
          user_id?: components["parameters"]["rowFilter.queue_jobs.user_id"];
          scheduled_for?: components["parameters"]["rowFilter.queue_jobs.scheduled_for"];
          queue_job_id?: components["parameters"]["rowFilter.queue_jobs.queue_job_id"];
          created_at?: components["parameters"]["rowFilter.queue_jobs.created_at"];
          processed_at?: components["parameters"]["rowFilter.queue_jobs.processed_at"];
          error_message?: components["parameters"]["rowFilter.queue_jobs.error_message"];
          metadata?: components["parameters"]["rowFilter.queue_jobs.metadata"];
          priority?: components["parameters"]["rowFilter.queue_jobs.priority"];
          attempts?: components["parameters"]["rowFilter.queue_jobs.attempts"];
          max_attempts?: components["parameters"]["rowFilter.queue_jobs.max_attempts"];
          started_at?: components["parameters"]["rowFilter.queue_jobs.started_at"];
          completed_at?: components["parameters"]["rowFilter.queue_jobs.completed_at"];
          result?: components["parameters"]["rowFilter.queue_jobs.result"];
          updated_at?: components["parameters"]["rowFilter.queue_jobs.updated_at"];
          status?: components["parameters"]["rowFilter.queue_jobs.status"];
          job_type?: components["parameters"]["rowFilter.queue_jobs.job_type"];
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
          /** @description Ordering */
          order?: components["parameters"]["order"];
          /** @description Limiting and Pagination */
          offset?: components["parameters"]["offset"];
          /** @description Limiting and Pagination */
          limit?: components["parameters"]["limit"];
        };
        header?: {
          /** @description Limiting and Pagination */
          Range?: components["parameters"]["range"];
          /** @description Limiting and Pagination */
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          /** @description Preference */
          Prefer?: components["parameters"]["preferCount"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["queue_jobs"][];
            "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["queue_jobs"][];
            "application/vnd.pgrst.object+json": components["schemas"]["queue_jobs"][];
            "text/csv": components["schemas"]["queue_jobs"][];
          };
        };
        /** @description Partial Content */
        206: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: {
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferPost"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["queue_jobs"];
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.queue_jobs.id"];
          user_id?: components["parameters"]["rowFilter.queue_jobs.user_id"];
          scheduled_for?: components["parameters"]["rowFilter.queue_jobs.scheduled_for"];
          queue_job_id?: components["parameters"]["rowFilter.queue_jobs.queue_job_id"];
          created_at?: components["parameters"]["rowFilter.queue_jobs.created_at"];
          processed_at?: components["parameters"]["rowFilter.queue_jobs.processed_at"];
          error_message?: components["parameters"]["rowFilter.queue_jobs.error_message"];
          metadata?: components["parameters"]["rowFilter.queue_jobs.metadata"];
          priority?: components["parameters"]["rowFilter.queue_jobs.priority"];
          attempts?: components["parameters"]["rowFilter.queue_jobs.attempts"];
          max_attempts?: components["parameters"]["rowFilter.queue_jobs.max_attempts"];
          started_at?: components["parameters"]["rowFilter.queue_jobs.started_at"];
          completed_at?: components["parameters"]["rowFilter.queue_jobs.completed_at"];
          result?: components["parameters"]["rowFilter.queue_jobs.result"];
          updated_at?: components["parameters"]["rowFilter.queue_jobs.updated_at"];
          status?: components["parameters"]["rowFilter.queue_jobs.status"];
          job_type?: components["parameters"]["rowFilter.queue_jobs.job_type"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.queue_jobs.id"];
          user_id?: components["parameters"]["rowFilter.queue_jobs.user_id"];
          scheduled_for?: components["parameters"]["rowFilter.queue_jobs.scheduled_for"];
          queue_job_id?: components["parameters"]["rowFilter.queue_jobs.queue_job_id"];
          created_at?: components["parameters"]["rowFilter.queue_jobs.created_at"];
          processed_at?: components["parameters"]["rowFilter.queue_jobs.processed_at"];
          error_message?: components["parameters"]["rowFilter.queue_jobs.error_message"];
          metadata?: components["parameters"]["rowFilter.queue_jobs.metadata"];
          priority?: components["parameters"]["rowFilter.queue_jobs.priority"];
          attempts?: components["parameters"]["rowFilter.queue_jobs.attempts"];
          max_attempts?: components["parameters"]["rowFilter.queue_jobs.max_attempts"];
          started_at?: components["parameters"]["rowFilter.queue_jobs.started_at"];
          completed_at?: components["parameters"]["rowFilter.queue_jobs.completed_at"];
          result?: components["parameters"]["rowFilter.queue_jobs.result"];
          updated_at?: components["parameters"]["rowFilter.queue_jobs.updated_at"];
          status?: components["parameters"]["rowFilter.queue_jobs.status"];
          job_type?: components["parameters"]["rowFilter.queue_jobs.job_type"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["queue_jobs"];
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    trace?: never;
  };
  "/question_metrics": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.question_metrics.id"];
          question_id?: components["parameters"]["rowFilter.question_metrics.question_id"];
          user_id?: components["parameters"]["rowFilter.question_metrics.user_id"];
          presented_at?: components["parameters"]["rowFilter.question_metrics.presented_at"];
          responded_at?: components["parameters"]["rowFilter.question_metrics.responded_at"];
          response_quality?: components["parameters"]["rowFilter.question_metrics.response_quality"];
          created_project?: components["parameters"]["rowFilter.question_metrics.created_project"];
          created_tasks_count?: components["parameters"]["rowFilter.question_metrics.created_tasks_count"];
          brain_dump_length?: components["parameters"]["rowFilter.question_metrics.brain_dump_length"];
          created_at?: components["parameters"]["rowFilter.question_metrics.created_at"];
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
          /** @description Ordering */
          order?: components["parameters"]["order"];
          /** @description Limiting and Pagination */
          offset?: components["parameters"]["offset"];
          /** @description Limiting and Pagination */
          limit?: components["parameters"]["limit"];
        };
        header?: {
          /** @description Limiting and Pagination */
          Range?: components["parameters"]["range"];
          /** @description Limiting and Pagination */
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          /** @description Preference */
          Prefer?: components["parameters"]["preferCount"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["question_metrics"][];
            "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["question_metrics"][];
            "application/vnd.pgrst.object+json": components["schemas"]["question_metrics"][];
            "text/csv": components["schemas"]["question_metrics"][];
          };
        };
        /** @description Partial Content */
        206: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: {
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferPost"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["question_metrics"];
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.question_metrics.id"];
          question_id?: components["parameters"]["rowFilter.question_metrics.question_id"];
          user_id?: components["parameters"]["rowFilter.question_metrics.user_id"];
          presented_at?: components["parameters"]["rowFilter.question_metrics.presented_at"];
          responded_at?: components["parameters"]["rowFilter.question_metrics.responded_at"];
          response_quality?: components["parameters"]["rowFilter.question_metrics.response_quality"];
          created_project?: components["parameters"]["rowFilter.question_metrics.created_project"];
          created_tasks_count?: components["parameters"]["rowFilter.question_metrics.created_tasks_count"];
          brain_dump_length?: components["parameters"]["rowFilter.question_metrics.brain_dump_length"];
          created_at?: components["parameters"]["rowFilter.question_metrics.created_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.question_metrics.id"];
          question_id?: components["parameters"]["rowFilter.question_metrics.question_id"];
          user_id?: components["parameters"]["rowFilter.question_metrics.user_id"];
          presented_at?: components["parameters"]["rowFilter.question_metrics.presented_at"];
          responded_at?: components["parameters"]["rowFilter.question_metrics.responded_at"];
          response_quality?: components["parameters"]["rowFilter.question_metrics.response_quality"];
          created_project?: components["parameters"]["rowFilter.question_metrics.created_project"];
          created_tasks_count?: components["parameters"]["rowFilter.question_metrics.created_tasks_count"];
          brain_dump_length?: components["parameters"]["rowFilter.question_metrics.brain_dump_length"];
          created_at?: components["parameters"]["rowFilter.question_metrics.created_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["question_metrics"];
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    trace?: never;
  };
  "/failed_payments": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.failed_payments.id"];
          user_id?: components["parameters"]["rowFilter.failed_payments.user_id"];
          subscription_id?: components["parameters"]["rowFilter.failed_payments.subscription_id"];
          invoice_id?: components["parameters"]["rowFilter.failed_payments.invoice_id"];
          amount_due?: components["parameters"]["rowFilter.failed_payments.amount_due"];
          failed_at?: components["parameters"]["rowFilter.failed_payments.failed_at"];
          retry_count?: components["parameters"]["rowFilter.failed_payments.retry_count"];
          last_retry_at?: components["parameters"]["rowFilter.failed_payments.last_retry_at"];
          dunning_stage?: components["parameters"]["rowFilter.failed_payments.dunning_stage"];
          last_dunning_at?: components["parameters"]["rowFilter.failed_payments.last_dunning_at"];
          resolved_at?: components["parameters"]["rowFilter.failed_payments.resolved_at"];
          resolution_type?: components["parameters"]["rowFilter.failed_payments.resolution_type"];
          created_at?: components["parameters"]["rowFilter.failed_payments.created_at"];
          updated_at?: components["parameters"]["rowFilter.failed_payments.updated_at"];
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
          /** @description Ordering */
          order?: components["parameters"]["order"];
          /** @description Limiting and Pagination */
          offset?: components["parameters"]["offset"];
          /** @description Limiting and Pagination */
          limit?: components["parameters"]["limit"];
        };
        header?: {
          /** @description Limiting and Pagination */
          Range?: components["parameters"]["range"];
          /** @description Limiting and Pagination */
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          /** @description Preference */
          Prefer?: components["parameters"]["preferCount"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["failed_payments"][];
            "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["failed_payments"][];
            "application/vnd.pgrst.object+json": components["schemas"]["failed_payments"][];
            "text/csv": components["schemas"]["failed_payments"][];
          };
        };
        /** @description Partial Content */
        206: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: {
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferPost"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["failed_payments"];
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.failed_payments.id"];
          user_id?: components["parameters"]["rowFilter.failed_payments.user_id"];
          subscription_id?: components["parameters"]["rowFilter.failed_payments.subscription_id"];
          invoice_id?: components["parameters"]["rowFilter.failed_payments.invoice_id"];
          amount_due?: components["parameters"]["rowFilter.failed_payments.amount_due"];
          failed_at?: components["parameters"]["rowFilter.failed_payments.failed_at"];
          retry_count?: components["parameters"]["rowFilter.failed_payments.retry_count"];
          last_retry_at?: components["parameters"]["rowFilter.failed_payments.last_retry_at"];
          dunning_stage?: components["parameters"]["rowFilter.failed_payments.dunning_stage"];
          last_dunning_at?: components["parameters"]["rowFilter.failed_payments.last_dunning_at"];
          resolved_at?: components["parameters"]["rowFilter.failed_payments.resolved_at"];
          resolution_type?: components["parameters"]["rowFilter.failed_payments.resolution_type"];
          created_at?: components["parameters"]["rowFilter.failed_payments.created_at"];
          updated_at?: components["parameters"]["rowFilter.failed_payments.updated_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.failed_payments.id"];
          user_id?: components["parameters"]["rowFilter.failed_payments.user_id"];
          subscription_id?: components["parameters"]["rowFilter.failed_payments.subscription_id"];
          invoice_id?: components["parameters"]["rowFilter.failed_payments.invoice_id"];
          amount_due?: components["parameters"]["rowFilter.failed_payments.amount_due"];
          failed_at?: components["parameters"]["rowFilter.failed_payments.failed_at"];
          retry_count?: components["parameters"]["rowFilter.failed_payments.retry_count"];
          last_retry_at?: components["parameters"]["rowFilter.failed_payments.last_retry_at"];
          dunning_stage?: components["parameters"]["rowFilter.failed_payments.dunning_stage"];
          last_dunning_at?: components["parameters"]["rowFilter.failed_payments.last_dunning_at"];
          resolved_at?: components["parameters"]["rowFilter.failed_payments.resolved_at"];
          resolution_type?: components["parameters"]["rowFilter.failed_payments.resolution_type"];
          created_at?: components["parameters"]["rowFilter.failed_payments.created_at"];
          updated_at?: components["parameters"]["rowFilter.failed_payments.updated_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["failed_payments"];
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    trace?: never;
  };
  "/beta_events": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.beta_events.id"];
          event_title?: components["parameters"]["rowFilter.beta_events.event_title"];
          event_description?: components["parameters"]["rowFilter.beta_events.event_description"];
          event_type?: components["parameters"]["rowFilter.beta_events.event_type"];
          scheduled_at?: components["parameters"]["rowFilter.beta_events.scheduled_at"];
          duration_minutes?: components["parameters"]["rowFilter.beta_events.duration_minutes"];
          event_timezone?: components["parameters"]["rowFilter.beta_events.event_timezone"];
          meeting_link?: components["parameters"]["rowFilter.beta_events.meeting_link"];
          agenda?: components["parameters"]["rowFilter.beta_events.agenda"];
          meeting_notes?: components["parameters"]["rowFilter.beta_events.meeting_notes"];
          recording_url?: components["parameters"]["rowFilter.beta_events.recording_url"];
          event_status?: components["parameters"]["rowFilter.beta_events.event_status"];
          max_attendees?: components["parameters"]["rowFilter.beta_events.max_attendees"];
          created_by?: components["parameters"]["rowFilter.beta_events.created_by"];
          created_at?: components["parameters"]["rowFilter.beta_events.created_at"];
          updated_at?: components["parameters"]["rowFilter.beta_events.updated_at"];
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
          /** @description Ordering */
          order?: components["parameters"]["order"];
          /** @description Limiting and Pagination */
          offset?: components["parameters"]["offset"];
          /** @description Limiting and Pagination */
          limit?: components["parameters"]["limit"];
        };
        header?: {
          /** @description Limiting and Pagination */
          Range?: components["parameters"]["range"];
          /** @description Limiting and Pagination */
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          /** @description Preference */
          Prefer?: components["parameters"]["preferCount"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["beta_events"][];
            "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["beta_events"][];
            "application/vnd.pgrst.object+json": components["schemas"]["beta_events"][];
            "text/csv": components["schemas"]["beta_events"][];
          };
        };
        /** @description Partial Content */
        206: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: {
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferPost"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["beta_events"];
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.beta_events.id"];
          event_title?: components["parameters"]["rowFilter.beta_events.event_title"];
          event_description?: components["parameters"]["rowFilter.beta_events.event_description"];
          event_type?: components["parameters"]["rowFilter.beta_events.event_type"];
          scheduled_at?: components["parameters"]["rowFilter.beta_events.scheduled_at"];
          duration_minutes?: components["parameters"]["rowFilter.beta_events.duration_minutes"];
          event_timezone?: components["parameters"]["rowFilter.beta_events.event_timezone"];
          meeting_link?: components["parameters"]["rowFilter.beta_events.meeting_link"];
          agenda?: components["parameters"]["rowFilter.beta_events.agenda"];
          meeting_notes?: components["parameters"]["rowFilter.beta_events.meeting_notes"];
          recording_url?: components["parameters"]["rowFilter.beta_events.recording_url"];
          event_status?: components["parameters"]["rowFilter.beta_events.event_status"];
          max_attendees?: components["parameters"]["rowFilter.beta_events.max_attendees"];
          created_by?: components["parameters"]["rowFilter.beta_events.created_by"];
          created_at?: components["parameters"]["rowFilter.beta_events.created_at"];
          updated_at?: components["parameters"]["rowFilter.beta_events.updated_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.beta_events.id"];
          event_title?: components["parameters"]["rowFilter.beta_events.event_title"];
          event_description?: components["parameters"]["rowFilter.beta_events.event_description"];
          event_type?: components["parameters"]["rowFilter.beta_events.event_type"];
          scheduled_at?: components["parameters"]["rowFilter.beta_events.scheduled_at"];
          duration_minutes?: components["parameters"]["rowFilter.beta_events.duration_minutes"];
          event_timezone?: components["parameters"]["rowFilter.beta_events.event_timezone"];
          meeting_link?: components["parameters"]["rowFilter.beta_events.meeting_link"];
          agenda?: components["parameters"]["rowFilter.beta_events.agenda"];
          meeting_notes?: components["parameters"]["rowFilter.beta_events.meeting_notes"];
          recording_url?: components["parameters"]["rowFilter.beta_events.recording_url"];
          event_status?: components["parameters"]["rowFilter.beta_events.event_status"];
          max_attendees?: components["parameters"]["rowFilter.beta_events.max_attendees"];
          created_by?: components["parameters"]["rowFilter.beta_events.created_by"];
          created_at?: components["parameters"]["rowFilter.beta_events.created_at"];
          updated_at?: components["parameters"]["rowFilter.beta_events.updated_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["beta_events"];
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    trace?: never;
  };
  "/beta_feedback": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.beta_feedback.id"];
          member_id?: components["parameters"]["rowFilter.beta_feedback.member_id"];
          user_id?: components["parameters"]["rowFilter.beta_feedback.user_id"];
          feedback_type?: components["parameters"]["rowFilter.beta_feedback.feedback_type"];
          feedback_title?: components["parameters"]["rowFilter.beta_feedback.feedback_title"];
          feedback_description?: components["parameters"]["rowFilter.beta_feedback.feedback_description"];
          feedback_priority?: components["parameters"]["rowFilter.beta_feedback.feedback_priority"];
          feature_area?: components["parameters"]["rowFilter.beta_feedback.feature_area"];
          feedback_tags?: components["parameters"]["rowFilter.beta_feedback.feedback_tags"];
          feedback_status?: components["parameters"]["rowFilter.beta_feedback.feedback_status"];
          implemented_at?: components["parameters"]["rowFilter.beta_feedback.implemented_at"];
          declined_reason?: components["parameters"]["rowFilter.beta_feedback.declined_reason"];
          upvotes?: components["parameters"]["rowFilter.beta_feedback.upvotes"];
          founder_response?: components["parameters"]["rowFilter.beta_feedback.founder_response"];
          founder_responded_at?: components["parameters"]["rowFilter.beta_feedback.founder_responded_at"];
          created_at?: components["parameters"]["rowFilter.beta_feedback.created_at"];
          updated_at?: components["parameters"]["rowFilter.beta_feedback.updated_at"];
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
          /** @description Ordering */
          order?: components["parameters"]["order"];
          /** @description Limiting and Pagination */
          offset?: components["parameters"]["offset"];
          /** @description Limiting and Pagination */
          limit?: components["parameters"]["limit"];
        };
        header?: {
          /** @description Limiting and Pagination */
          Range?: components["parameters"]["range"];
          /** @description Limiting and Pagination */
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          /** @description Preference */
          Prefer?: components["parameters"]["preferCount"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["beta_feedback"][];
            "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["beta_feedback"][];
            "application/vnd.pgrst.object+json": components["schemas"]["beta_feedback"][];
            "text/csv": components["schemas"]["beta_feedback"][];
          };
        };
        /** @description Partial Content */
        206: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: {
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferPost"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["beta_feedback"];
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.beta_feedback.id"];
          member_id?: components["parameters"]["rowFilter.beta_feedback.member_id"];
          user_id?: components["parameters"]["rowFilter.beta_feedback.user_id"];
          feedback_type?: components["parameters"]["rowFilter.beta_feedback.feedback_type"];
          feedback_title?: components["parameters"]["rowFilter.beta_feedback.feedback_title"];
          feedback_description?: components["parameters"]["rowFilter.beta_feedback.feedback_description"];
          feedback_priority?: components["parameters"]["rowFilter.beta_feedback.feedback_priority"];
          feature_area?: components["parameters"]["rowFilter.beta_feedback.feature_area"];
          feedback_tags?: components["parameters"]["rowFilter.beta_feedback.feedback_tags"];
          feedback_status?: components["parameters"]["rowFilter.beta_feedback.feedback_status"];
          implemented_at?: components["parameters"]["rowFilter.beta_feedback.implemented_at"];
          declined_reason?: components["parameters"]["rowFilter.beta_feedback.declined_reason"];
          upvotes?: components["parameters"]["rowFilter.beta_feedback.upvotes"];
          founder_response?: components["parameters"]["rowFilter.beta_feedback.founder_response"];
          founder_responded_at?: components["parameters"]["rowFilter.beta_feedback.founder_responded_at"];
          created_at?: components["parameters"]["rowFilter.beta_feedback.created_at"];
          updated_at?: components["parameters"]["rowFilter.beta_feedback.updated_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.beta_feedback.id"];
          member_id?: components["parameters"]["rowFilter.beta_feedback.member_id"];
          user_id?: components["parameters"]["rowFilter.beta_feedback.user_id"];
          feedback_type?: components["parameters"]["rowFilter.beta_feedback.feedback_type"];
          feedback_title?: components["parameters"]["rowFilter.beta_feedback.feedback_title"];
          feedback_description?: components["parameters"]["rowFilter.beta_feedback.feedback_description"];
          feedback_priority?: components["parameters"]["rowFilter.beta_feedback.feedback_priority"];
          feature_area?: components["parameters"]["rowFilter.beta_feedback.feature_area"];
          feedback_tags?: components["parameters"]["rowFilter.beta_feedback.feedback_tags"];
          feedback_status?: components["parameters"]["rowFilter.beta_feedback.feedback_status"];
          implemented_at?: components["parameters"]["rowFilter.beta_feedback.implemented_at"];
          declined_reason?: components["parameters"]["rowFilter.beta_feedback.declined_reason"];
          upvotes?: components["parameters"]["rowFilter.beta_feedback.upvotes"];
          founder_response?: components["parameters"]["rowFilter.beta_feedback.founder_response"];
          founder_responded_at?: components["parameters"]["rowFilter.beta_feedback.founder_responded_at"];
          created_at?: components["parameters"]["rowFilter.beta_feedback.created_at"];
          updated_at?: components["parameters"]["rowFilter.beta_feedback.updated_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["beta_feedback"];
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    trace?: never;
  };
  "/discount_codes": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.discount_codes.id"];
          code?: components["parameters"]["rowFilter.discount_codes.code"];
          stripe_coupon_id?: components["parameters"]["rowFilter.discount_codes.stripe_coupon_id"];
          description?: components["parameters"]["rowFilter.discount_codes.description"];
          discount_type?: components["parameters"]["rowFilter.discount_codes.discount_type"];
          discount_value?: components["parameters"]["rowFilter.discount_codes.discount_value"];
          duration?: components["parameters"]["rowFilter.discount_codes.duration"];
          duration_in_months?: components["parameters"]["rowFilter.discount_codes.duration_in_months"];
          max_redemptions?: components["parameters"]["rowFilter.discount_codes.max_redemptions"];
          times_redeemed?: components["parameters"]["rowFilter.discount_codes.times_redeemed"];
          valid_from?: components["parameters"]["rowFilter.discount_codes.valid_from"];
          valid_until?: components["parameters"]["rowFilter.discount_codes.valid_until"];
          metadata?: components["parameters"]["rowFilter.discount_codes.metadata"];
          is_active?: components["parameters"]["rowFilter.discount_codes.is_active"];
          created_at?: components["parameters"]["rowFilter.discount_codes.created_at"];
          updated_at?: components["parameters"]["rowFilter.discount_codes.updated_at"];
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
          /** @description Ordering */
          order?: components["parameters"]["order"];
          /** @description Limiting and Pagination */
          offset?: components["parameters"]["offset"];
          /** @description Limiting and Pagination */
          limit?: components["parameters"]["limit"];
        };
        header?: {
          /** @description Limiting and Pagination */
          Range?: components["parameters"]["range"];
          /** @description Limiting and Pagination */
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          /** @description Preference */
          Prefer?: components["parameters"]["preferCount"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["discount_codes"][];
            "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["discount_codes"][];
            "application/vnd.pgrst.object+json": components["schemas"]["discount_codes"][];
            "text/csv": components["schemas"]["discount_codes"][];
          };
        };
        /** @description Partial Content */
        206: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: {
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferPost"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["discount_codes"];
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.discount_codes.id"];
          code?: components["parameters"]["rowFilter.discount_codes.code"];
          stripe_coupon_id?: components["parameters"]["rowFilter.discount_codes.stripe_coupon_id"];
          description?: components["parameters"]["rowFilter.discount_codes.description"];
          discount_type?: components["parameters"]["rowFilter.discount_codes.discount_type"];
          discount_value?: components["parameters"]["rowFilter.discount_codes.discount_value"];
          duration?: components["parameters"]["rowFilter.discount_codes.duration"];
          duration_in_months?: components["parameters"]["rowFilter.discount_codes.duration_in_months"];
          max_redemptions?: components["parameters"]["rowFilter.discount_codes.max_redemptions"];
          times_redeemed?: components["parameters"]["rowFilter.discount_codes.times_redeemed"];
          valid_from?: components["parameters"]["rowFilter.discount_codes.valid_from"];
          valid_until?: components["parameters"]["rowFilter.discount_codes.valid_until"];
          metadata?: components["parameters"]["rowFilter.discount_codes.metadata"];
          is_active?: components["parameters"]["rowFilter.discount_codes.is_active"];
          created_at?: components["parameters"]["rowFilter.discount_codes.created_at"];
          updated_at?: components["parameters"]["rowFilter.discount_codes.updated_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.discount_codes.id"];
          code?: components["parameters"]["rowFilter.discount_codes.code"];
          stripe_coupon_id?: components["parameters"]["rowFilter.discount_codes.stripe_coupon_id"];
          description?: components["parameters"]["rowFilter.discount_codes.description"];
          discount_type?: components["parameters"]["rowFilter.discount_codes.discount_type"];
          discount_value?: components["parameters"]["rowFilter.discount_codes.discount_value"];
          duration?: components["parameters"]["rowFilter.discount_codes.duration"];
          duration_in_months?: components["parameters"]["rowFilter.discount_codes.duration_in_months"];
          max_redemptions?: components["parameters"]["rowFilter.discount_codes.max_redemptions"];
          times_redeemed?: components["parameters"]["rowFilter.discount_codes.times_redeemed"];
          valid_from?: components["parameters"]["rowFilter.discount_codes.valid_from"];
          valid_until?: components["parameters"]["rowFilter.discount_codes.valid_until"];
          metadata?: components["parameters"]["rowFilter.discount_codes.metadata"];
          is_active?: components["parameters"]["rowFilter.discount_codes.is_active"];
          created_at?: components["parameters"]["rowFilter.discount_codes.created_at"];
          updated_at?: components["parameters"]["rowFilter.discount_codes.updated_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["discount_codes"];
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    trace?: never;
  };
  "/recurring_task_instances": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Tracks individual instances of recurring tasks */
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.recurring_task_instances.id"];
          task_id?: components["parameters"]["rowFilter.recurring_task_instances.task_id"];
          instance_date?: components["parameters"]["rowFilter.recurring_task_instances.instance_date"];
          status?: components["parameters"]["rowFilter.recurring_task_instances.status"];
          completed_at?: components["parameters"]["rowFilter.recurring_task_instances.completed_at"];
          skipped?: components["parameters"]["rowFilter.recurring_task_instances.skipped"];
          notes?: components["parameters"]["rowFilter.recurring_task_instances.notes"];
          calendar_event_id?: components["parameters"]["rowFilter.recurring_task_instances.calendar_event_id"];
          created_at?: components["parameters"]["rowFilter.recurring_task_instances.created_at"];
          updated_at?: components["parameters"]["rowFilter.recurring_task_instances.updated_at"];
          user_id?: components["parameters"]["rowFilter.recurring_task_instances.user_id"];
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
          /** @description Ordering */
          order?: components["parameters"]["order"];
          /** @description Limiting and Pagination */
          offset?: components["parameters"]["offset"];
          /** @description Limiting and Pagination */
          limit?: components["parameters"]["limit"];
        };
        header?: {
          /** @description Limiting and Pagination */
          Range?: components["parameters"]["range"];
          /** @description Limiting and Pagination */
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          /** @description Preference */
          Prefer?: components["parameters"]["preferCount"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["recurring_task_instances"][];
            "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["recurring_task_instances"][];
            "application/vnd.pgrst.object+json": components["schemas"]["recurring_task_instances"][];
            "text/csv": components["schemas"]["recurring_task_instances"][];
          };
        };
        /** @description Partial Content */
        206: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    /** Tracks individual instances of recurring tasks */
    post: {
      parameters: {
        query?: {
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferPost"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["recurring_task_instances"];
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    /** Tracks individual instances of recurring tasks */
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.recurring_task_instances.id"];
          task_id?: components["parameters"]["rowFilter.recurring_task_instances.task_id"];
          instance_date?: components["parameters"]["rowFilter.recurring_task_instances.instance_date"];
          status?: components["parameters"]["rowFilter.recurring_task_instances.status"];
          completed_at?: components["parameters"]["rowFilter.recurring_task_instances.completed_at"];
          skipped?: components["parameters"]["rowFilter.recurring_task_instances.skipped"];
          notes?: components["parameters"]["rowFilter.recurring_task_instances.notes"];
          calendar_event_id?: components["parameters"]["rowFilter.recurring_task_instances.calendar_event_id"];
          created_at?: components["parameters"]["rowFilter.recurring_task_instances.created_at"];
          updated_at?: components["parameters"]["rowFilter.recurring_task_instances.updated_at"];
          user_id?: components["parameters"]["rowFilter.recurring_task_instances.user_id"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    /** Tracks individual instances of recurring tasks */
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.recurring_task_instances.id"];
          task_id?: components["parameters"]["rowFilter.recurring_task_instances.task_id"];
          instance_date?: components["parameters"]["rowFilter.recurring_task_instances.instance_date"];
          status?: components["parameters"]["rowFilter.recurring_task_instances.status"];
          completed_at?: components["parameters"]["rowFilter.recurring_task_instances.completed_at"];
          skipped?: components["parameters"]["rowFilter.recurring_task_instances.skipped"];
          notes?: components["parameters"]["rowFilter.recurring_task_instances.notes"];
          calendar_event_id?: components["parameters"]["rowFilter.recurring_task_instances.calendar_event_id"];
          created_at?: components["parameters"]["rowFilter.recurring_task_instances.created_at"];
          updated_at?: components["parameters"]["rowFilter.recurring_task_instances.updated_at"];
          user_id?: components["parameters"]["rowFilter.recurring_task_instances.user_id"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["recurring_task_instances"];
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    trace?: never;
  };
  "/sms_messages": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.sms_messages.id"];
          user_id?: components["parameters"]["rowFilter.sms_messages.user_id"];
          phone_number?: components["parameters"]["rowFilter.sms_messages.phone_number"];
          message_content?: components["parameters"]["rowFilter.sms_messages.message_content"];
          template_id?: components["parameters"]["rowFilter.sms_messages.template_id"];
          template_vars?: components["parameters"]["rowFilter.sms_messages.template_vars"];
          status?: components["parameters"]["rowFilter.sms_messages.status"];
          priority?: components["parameters"]["rowFilter.sms_messages.priority"];
          scheduled_for?: components["parameters"]["rowFilter.sms_messages.scheduled_for"];
          sent_at?: components["parameters"]["rowFilter.sms_messages.sent_at"];
          delivered_at?: components["parameters"]["rowFilter.sms_messages.delivered_at"];
          twilio_sid?: components["parameters"]["rowFilter.sms_messages.twilio_sid"];
          twilio_status?: components["parameters"]["rowFilter.sms_messages.twilio_status"];
          twilio_error_code?: components["parameters"]["rowFilter.sms_messages.twilio_error_code"];
          twilio_error_message?: components["parameters"]["rowFilter.sms_messages.twilio_error_message"];
          attempt_count?: components["parameters"]["rowFilter.sms_messages.attempt_count"];
          max_attempts?: components["parameters"]["rowFilter.sms_messages.max_attempts"];
          next_retry_at?: components["parameters"]["rowFilter.sms_messages.next_retry_at"];
          queue_job_id?: components["parameters"]["rowFilter.sms_messages.queue_job_id"];
          project_id?: components["parameters"]["rowFilter.sms_messages.project_id"];
          task_id?: components["parameters"]["rowFilter.sms_messages.task_id"];
          metadata?: components["parameters"]["rowFilter.sms_messages.metadata"];
          created_at?: components["parameters"]["rowFilter.sms_messages.created_at"];
          updated_at?: components["parameters"]["rowFilter.sms_messages.updated_at"];
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
          /** @description Ordering */
          order?: components["parameters"]["order"];
          /** @description Limiting and Pagination */
          offset?: components["parameters"]["offset"];
          /** @description Limiting and Pagination */
          limit?: components["parameters"]["limit"];
        };
        header?: {
          /** @description Limiting and Pagination */
          Range?: components["parameters"]["range"];
          /** @description Limiting and Pagination */
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          /** @description Preference */
          Prefer?: components["parameters"]["preferCount"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["sms_messages"][];
            "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["sms_messages"][];
            "application/vnd.pgrst.object+json": components["schemas"]["sms_messages"][];
            "text/csv": components["schemas"]["sms_messages"][];
          };
        };
        /** @description Partial Content */
        206: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: {
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferPost"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["sms_messages"];
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.sms_messages.id"];
          user_id?: components["parameters"]["rowFilter.sms_messages.user_id"];
          phone_number?: components["parameters"]["rowFilter.sms_messages.phone_number"];
          message_content?: components["parameters"]["rowFilter.sms_messages.message_content"];
          template_id?: components["parameters"]["rowFilter.sms_messages.template_id"];
          template_vars?: components["parameters"]["rowFilter.sms_messages.template_vars"];
          status?: components["parameters"]["rowFilter.sms_messages.status"];
          priority?: components["parameters"]["rowFilter.sms_messages.priority"];
          scheduled_for?: components["parameters"]["rowFilter.sms_messages.scheduled_for"];
          sent_at?: components["parameters"]["rowFilter.sms_messages.sent_at"];
          delivered_at?: components["parameters"]["rowFilter.sms_messages.delivered_at"];
          twilio_sid?: components["parameters"]["rowFilter.sms_messages.twilio_sid"];
          twilio_status?: components["parameters"]["rowFilter.sms_messages.twilio_status"];
          twilio_error_code?: components["parameters"]["rowFilter.sms_messages.twilio_error_code"];
          twilio_error_message?: components["parameters"]["rowFilter.sms_messages.twilio_error_message"];
          attempt_count?: components["parameters"]["rowFilter.sms_messages.attempt_count"];
          max_attempts?: components["parameters"]["rowFilter.sms_messages.max_attempts"];
          next_retry_at?: components["parameters"]["rowFilter.sms_messages.next_retry_at"];
          queue_job_id?: components["parameters"]["rowFilter.sms_messages.queue_job_id"];
          project_id?: components["parameters"]["rowFilter.sms_messages.project_id"];
          task_id?: components["parameters"]["rowFilter.sms_messages.task_id"];
          metadata?: components["parameters"]["rowFilter.sms_messages.metadata"];
          created_at?: components["parameters"]["rowFilter.sms_messages.created_at"];
          updated_at?: components["parameters"]["rowFilter.sms_messages.updated_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.sms_messages.id"];
          user_id?: components["parameters"]["rowFilter.sms_messages.user_id"];
          phone_number?: components["parameters"]["rowFilter.sms_messages.phone_number"];
          message_content?: components["parameters"]["rowFilter.sms_messages.message_content"];
          template_id?: components["parameters"]["rowFilter.sms_messages.template_id"];
          template_vars?: components["parameters"]["rowFilter.sms_messages.template_vars"];
          status?: components["parameters"]["rowFilter.sms_messages.status"];
          priority?: components["parameters"]["rowFilter.sms_messages.priority"];
          scheduled_for?: components["parameters"]["rowFilter.sms_messages.scheduled_for"];
          sent_at?: components["parameters"]["rowFilter.sms_messages.sent_at"];
          delivered_at?: components["parameters"]["rowFilter.sms_messages.delivered_at"];
          twilio_sid?: components["parameters"]["rowFilter.sms_messages.twilio_sid"];
          twilio_status?: components["parameters"]["rowFilter.sms_messages.twilio_status"];
          twilio_error_code?: components["parameters"]["rowFilter.sms_messages.twilio_error_code"];
          twilio_error_message?: components["parameters"]["rowFilter.sms_messages.twilio_error_message"];
          attempt_count?: components["parameters"]["rowFilter.sms_messages.attempt_count"];
          max_attempts?: components["parameters"]["rowFilter.sms_messages.max_attempts"];
          next_retry_at?: components["parameters"]["rowFilter.sms_messages.next_retry_at"];
          queue_job_id?: components["parameters"]["rowFilter.sms_messages.queue_job_id"];
          project_id?: components["parameters"]["rowFilter.sms_messages.project_id"];
          task_id?: components["parameters"]["rowFilter.sms_messages.task_id"];
          metadata?: components["parameters"]["rowFilter.sms_messages.metadata"];
          created_at?: components["parameters"]["rowFilter.sms_messages.created_at"];
          updated_at?: components["parameters"]["rowFilter.sms_messages.updated_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["sms_messages"];
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    trace?: never;
  };
  "/user_discounts": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.user_discounts.id"];
          user_id?: components["parameters"]["rowFilter.user_discounts.user_id"];
          discount_code_id?: components["parameters"]["rowFilter.user_discounts.discount_code_id"];
          stripe_subscription_id?: components["parameters"]["rowFilter.user_discounts.stripe_subscription_id"];
          applied_at?: components["parameters"]["rowFilter.user_discounts.applied_at"];
          expires_at?: components["parameters"]["rowFilter.user_discounts.expires_at"];
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
          /** @description Ordering */
          order?: components["parameters"]["order"];
          /** @description Limiting and Pagination */
          offset?: components["parameters"]["offset"];
          /** @description Limiting and Pagination */
          limit?: components["parameters"]["limit"];
        };
        header?: {
          /** @description Limiting and Pagination */
          Range?: components["parameters"]["range"];
          /** @description Limiting and Pagination */
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          /** @description Preference */
          Prefer?: components["parameters"]["preferCount"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["user_discounts"][];
            "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["user_discounts"][];
            "application/vnd.pgrst.object+json": components["schemas"]["user_discounts"][];
            "text/csv": components["schemas"]["user_discounts"][];
          };
        };
        /** @description Partial Content */
        206: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: {
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferPost"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["user_discounts"];
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.user_discounts.id"];
          user_id?: components["parameters"]["rowFilter.user_discounts.user_id"];
          discount_code_id?: components["parameters"]["rowFilter.user_discounts.discount_code_id"];
          stripe_subscription_id?: components["parameters"]["rowFilter.user_discounts.stripe_subscription_id"];
          applied_at?: components["parameters"]["rowFilter.user_discounts.applied_at"];
          expires_at?: components["parameters"]["rowFilter.user_discounts.expires_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.user_discounts.id"];
          user_id?: components["parameters"]["rowFilter.user_discounts.user_id"];
          discount_code_id?: components["parameters"]["rowFilter.user_discounts.discount_code_id"];
          stripe_subscription_id?: components["parameters"]["rowFilter.user_discounts.stripe_subscription_id"];
          applied_at?: components["parameters"]["rowFilter.user_discounts.applied_at"];
          expires_at?: components["parameters"]["rowFilter.user_discounts.expires_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["user_discounts"];
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    trace?: never;
  };
  "/project_brief_templates": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Stores custom AI-generated and user-created templates for project daily briefs */
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.project_brief_templates.id"];
          name?: components["parameters"]["rowFilter.project_brief_templates.name"];
          description?: components["parameters"]["rowFilter.project_brief_templates.description"];
          template_content?: components["parameters"]["rowFilter.project_brief_templates.template_content"];
          is_default?: components["parameters"]["rowFilter.project_brief_templates.is_default"];
          variables?: components["parameters"]["rowFilter.project_brief_templates.variables"];
          created_at?: components["parameters"]["rowFilter.project_brief_templates.created_at"];
          updated_at?: components["parameters"]["rowFilter.project_brief_templates.updated_at"];
          user_id?: components["parameters"]["rowFilter.project_brief_templates.user_id"];
          in_use?: components["parameters"]["rowFilter.project_brief_templates.in_use"];
          project_id?: components["parameters"]["rowFilter.project_brief_templates.project_id"];
          /** @description Additional metadata including generation parameters and usage statistics */
          metadata?: components["parameters"]["rowFilter.project_brief_templates.metadata"];
          /** @description Indicates how the template was created: manual, ai, or system */
          generated_by?: components["parameters"]["rowFilter.project_brief_templates.generated_by"];
          generation_model?: components["parameters"]["rowFilter.project_brief_templates.generation_model"];
          /** @description Snapshot of project context at the time of template generation */
          context_snapshot?: components["parameters"]["rowFilter.project_brief_templates.context_snapshot"];
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
          /** @description Ordering */
          order?: components["parameters"]["order"];
          /** @description Limiting and Pagination */
          offset?: components["parameters"]["offset"];
          /** @description Limiting and Pagination */
          limit?: components["parameters"]["limit"];
        };
        header?: {
          /** @description Limiting and Pagination */
          Range?: components["parameters"]["range"];
          /** @description Limiting and Pagination */
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          /** @description Preference */
          Prefer?: components["parameters"]["preferCount"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["project_brief_templates"][];
            "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["project_brief_templates"][];
            "application/vnd.pgrst.object+json": components["schemas"]["project_brief_templates"][];
            "text/csv": components["schemas"]["project_brief_templates"][];
          };
        };
        /** @description Partial Content */
        206: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    /** Stores custom AI-generated and user-created templates for project daily briefs */
    post: {
      parameters: {
        query?: {
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferPost"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["project_brief_templates"];
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    /** Stores custom AI-generated and user-created templates for project daily briefs */
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.project_brief_templates.id"];
          name?: components["parameters"]["rowFilter.project_brief_templates.name"];
          description?: components["parameters"]["rowFilter.project_brief_templates.description"];
          template_content?: components["parameters"]["rowFilter.project_brief_templates.template_content"];
          is_default?: components["parameters"]["rowFilter.project_brief_templates.is_default"];
          variables?: components["parameters"]["rowFilter.project_brief_templates.variables"];
          created_at?: components["parameters"]["rowFilter.project_brief_templates.created_at"];
          updated_at?: components["parameters"]["rowFilter.project_brief_templates.updated_at"];
          user_id?: components["parameters"]["rowFilter.project_brief_templates.user_id"];
          in_use?: components["parameters"]["rowFilter.project_brief_templates.in_use"];
          project_id?: components["parameters"]["rowFilter.project_brief_templates.project_id"];
          /** @description Additional metadata including generation parameters and usage statistics */
          metadata?: components["parameters"]["rowFilter.project_brief_templates.metadata"];
          /** @description Indicates how the template was created: manual, ai, or system */
          generated_by?: components["parameters"]["rowFilter.project_brief_templates.generated_by"];
          generation_model?: components["parameters"]["rowFilter.project_brief_templates.generation_model"];
          /** @description Snapshot of project context at the time of template generation */
          context_snapshot?: components["parameters"]["rowFilter.project_brief_templates.context_snapshot"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    /** Stores custom AI-generated and user-created templates for project daily briefs */
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.project_brief_templates.id"];
          name?: components["parameters"]["rowFilter.project_brief_templates.name"];
          description?: components["parameters"]["rowFilter.project_brief_templates.description"];
          template_content?: components["parameters"]["rowFilter.project_brief_templates.template_content"];
          is_default?: components["parameters"]["rowFilter.project_brief_templates.is_default"];
          variables?: components["parameters"]["rowFilter.project_brief_templates.variables"];
          created_at?: components["parameters"]["rowFilter.project_brief_templates.created_at"];
          updated_at?: components["parameters"]["rowFilter.project_brief_templates.updated_at"];
          user_id?: components["parameters"]["rowFilter.project_brief_templates.user_id"];
          in_use?: components["parameters"]["rowFilter.project_brief_templates.in_use"];
          project_id?: components["parameters"]["rowFilter.project_brief_templates.project_id"];
          /** @description Additional metadata including generation parameters and usage statistics */
          metadata?: components["parameters"]["rowFilter.project_brief_templates.metadata"];
          /** @description Indicates how the template was created: manual, ai, or system */
          generated_by?: components["parameters"]["rowFilter.project_brief_templates.generated_by"];
          generation_model?: components["parameters"]["rowFilter.project_brief_templates.generation_model"];
          /** @description Snapshot of project context at the time of template generation */
          context_snapshot?: components["parameters"]["rowFilter.project_brief_templates.context_snapshot"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["project_brief_templates"];
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    trace?: never;
  };
  "/email_recipients": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.email_recipients.id"];
          email_id?: components["parameters"]["rowFilter.email_recipients.email_id"];
          recipient_email?: components["parameters"]["rowFilter.email_recipients.recipient_email"];
          recipient_name?: components["parameters"]["rowFilter.email_recipients.recipient_name"];
          recipient_type?: components["parameters"]["rowFilter.email_recipients.recipient_type"];
          recipient_id?: components["parameters"]["rowFilter.email_recipients.recipient_id"];
          status?: components["parameters"]["rowFilter.email_recipients.status"];
          sent_at?: components["parameters"]["rowFilter.email_recipients.sent_at"];
          delivered_at?: components["parameters"]["rowFilter.email_recipients.delivered_at"];
          opened_at?: components["parameters"]["rowFilter.email_recipients.opened_at"];
          open_count?: components["parameters"]["rowFilter.email_recipients.open_count"];
          last_opened_at?: components["parameters"]["rowFilter.email_recipients.last_opened_at"];
          error_message?: components["parameters"]["rowFilter.email_recipients.error_message"];
          created_at?: components["parameters"]["rowFilter.email_recipients.created_at"];
          updated_at?: components["parameters"]["rowFilter.email_recipients.updated_at"];
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
          /** @description Ordering */
          order?: components["parameters"]["order"];
          /** @description Limiting and Pagination */
          offset?: components["parameters"]["offset"];
          /** @description Limiting and Pagination */
          limit?: components["parameters"]["limit"];
        };
        header?: {
          /** @description Limiting and Pagination */
          Range?: components["parameters"]["range"];
          /** @description Limiting and Pagination */
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          /** @description Preference */
          Prefer?: components["parameters"]["preferCount"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["email_recipients"][];
            "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["email_recipients"][];
            "application/vnd.pgrst.object+json": components["schemas"]["email_recipients"][];
            "text/csv": components["schemas"]["email_recipients"][];
          };
        };
        /** @description Partial Content */
        206: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: {
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferPost"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["email_recipients"];
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.email_recipients.id"];
          email_id?: components["parameters"]["rowFilter.email_recipients.email_id"];
          recipient_email?: components["parameters"]["rowFilter.email_recipients.recipient_email"];
          recipient_name?: components["parameters"]["rowFilter.email_recipients.recipient_name"];
          recipient_type?: components["parameters"]["rowFilter.email_recipients.recipient_type"];
          recipient_id?: components["parameters"]["rowFilter.email_recipients.recipient_id"];
          status?: components["parameters"]["rowFilter.email_recipients.status"];
          sent_at?: components["parameters"]["rowFilter.email_recipients.sent_at"];
          delivered_at?: components["parameters"]["rowFilter.email_recipients.delivered_at"];
          opened_at?: components["parameters"]["rowFilter.email_recipients.opened_at"];
          open_count?: components["parameters"]["rowFilter.email_recipients.open_count"];
          last_opened_at?: components["parameters"]["rowFilter.email_recipients.last_opened_at"];
          error_message?: components["parameters"]["rowFilter.email_recipients.error_message"];
          created_at?: components["parameters"]["rowFilter.email_recipients.created_at"];
          updated_at?: components["parameters"]["rowFilter.email_recipients.updated_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.email_recipients.id"];
          email_id?: components["parameters"]["rowFilter.email_recipients.email_id"];
          recipient_email?: components["parameters"]["rowFilter.email_recipients.recipient_email"];
          recipient_name?: components["parameters"]["rowFilter.email_recipients.recipient_name"];
          recipient_type?: components["parameters"]["rowFilter.email_recipients.recipient_type"];
          recipient_id?: components["parameters"]["rowFilter.email_recipients.recipient_id"];
          status?: components["parameters"]["rowFilter.email_recipients.status"];
          sent_at?: components["parameters"]["rowFilter.email_recipients.sent_at"];
          delivered_at?: components["parameters"]["rowFilter.email_recipients.delivered_at"];
          opened_at?: components["parameters"]["rowFilter.email_recipients.opened_at"];
          open_count?: components["parameters"]["rowFilter.email_recipients.open_count"];
          last_opened_at?: components["parameters"]["rowFilter.email_recipients.last_opened_at"];
          error_message?: components["parameters"]["rowFilter.email_recipients.error_message"];
          created_at?: components["parameters"]["rowFilter.email_recipients.created_at"];
          updated_at?: components["parameters"]["rowFilter.email_recipients.updated_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["email_recipients"];
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    trace?: never;
  };
  "/generated_phase_tasks": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Stores AI suggestions for which tasks belong to which phases */
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.generated_phase_tasks.id"];
          generated_phase_id?: components["parameters"]["rowFilter.generated_phase_tasks.generated_phase_id"];
          task_id?: components["parameters"]["rowFilter.generated_phase_tasks.task_id"];
          /** @description AI confidence score for the task-to-phase assignment suggestion (0-1) */
          confidence_score?: components["parameters"]["rowFilter.generated_phase_tasks.confidence_score"];
          reasoning?: components["parameters"]["rowFilter.generated_phase_tasks.reasoning"];
          suggested_start_date?: components["parameters"]["rowFilter.generated_phase_tasks.suggested_start_date"];
          suggested_due_date?: components["parameters"]["rowFilter.generated_phase_tasks.suggested_due_date"];
          is_approved?: components["parameters"]["rowFilter.generated_phase_tasks.is_approved"];
          created_at?: components["parameters"]["rowFilter.generated_phase_tasks.created_at"];
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
          /** @description Ordering */
          order?: components["parameters"]["order"];
          /** @description Limiting and Pagination */
          offset?: components["parameters"]["offset"];
          /** @description Limiting and Pagination */
          limit?: components["parameters"]["limit"];
        };
        header?: {
          /** @description Limiting and Pagination */
          Range?: components["parameters"]["range"];
          /** @description Limiting and Pagination */
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          /** @description Preference */
          Prefer?: components["parameters"]["preferCount"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["generated_phase_tasks"][];
            "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["generated_phase_tasks"][];
            "application/vnd.pgrst.object+json": components["schemas"]["generated_phase_tasks"][];
            "text/csv": components["schemas"]["generated_phase_tasks"][];
          };
        };
        /** @description Partial Content */
        206: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    /** Stores AI suggestions for which tasks belong to which phases */
    post: {
      parameters: {
        query?: {
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferPost"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["generated_phase_tasks"];
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    /** Stores AI suggestions for which tasks belong to which phases */
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.generated_phase_tasks.id"];
          generated_phase_id?: components["parameters"]["rowFilter.generated_phase_tasks.generated_phase_id"];
          task_id?: components["parameters"]["rowFilter.generated_phase_tasks.task_id"];
          /** @description AI confidence score for the task-to-phase assignment suggestion (0-1) */
          confidence_score?: components["parameters"]["rowFilter.generated_phase_tasks.confidence_score"];
          reasoning?: components["parameters"]["rowFilter.generated_phase_tasks.reasoning"];
          suggested_start_date?: components["parameters"]["rowFilter.generated_phase_tasks.suggested_start_date"];
          suggested_due_date?: components["parameters"]["rowFilter.generated_phase_tasks.suggested_due_date"];
          is_approved?: components["parameters"]["rowFilter.generated_phase_tasks.is_approved"];
          created_at?: components["parameters"]["rowFilter.generated_phase_tasks.created_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    /** Stores AI suggestions for which tasks belong to which phases */
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.generated_phase_tasks.id"];
          generated_phase_id?: components["parameters"]["rowFilter.generated_phase_tasks.generated_phase_id"];
          task_id?: components["parameters"]["rowFilter.generated_phase_tasks.task_id"];
          /** @description AI confidence score for the task-to-phase assignment suggestion (0-1) */
          confidence_score?: components["parameters"]["rowFilter.generated_phase_tasks.confidence_score"];
          reasoning?: components["parameters"]["rowFilter.generated_phase_tasks.reasoning"];
          suggested_start_date?: components["parameters"]["rowFilter.generated_phase_tasks.suggested_start_date"];
          suggested_due_date?: components["parameters"]["rowFilter.generated_phase_tasks.suggested_due_date"];
          is_approved?: components["parameters"]["rowFilter.generated_phase_tasks.is_approved"];
          created_at?: components["parameters"]["rowFilter.generated_phase_tasks.created_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["generated_phase_tasks"];
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    trace?: never;
  };
  "/project_brief_template_usage": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.project_brief_template_usage.id"];
          template_id?: components["parameters"]["rowFilter.project_brief_template_usage.template_id"];
          user_id?: components["parameters"]["rowFilter.project_brief_template_usage.user_id"];
          project_id?: components["parameters"]["rowFilter.project_brief_template_usage.project_id"];
          used_at?: components["parameters"]["rowFilter.project_brief_template_usage.used_at"];
          brief_date?: components["parameters"]["rowFilter.project_brief_template_usage.brief_date"];
          metadata?: components["parameters"]["rowFilter.project_brief_template_usage.metadata"];
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
          /** @description Ordering */
          order?: components["parameters"]["order"];
          /** @description Limiting and Pagination */
          offset?: components["parameters"]["offset"];
          /** @description Limiting and Pagination */
          limit?: components["parameters"]["limit"];
        };
        header?: {
          /** @description Limiting and Pagination */
          Range?: components["parameters"]["range"];
          /** @description Limiting and Pagination */
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          /** @description Preference */
          Prefer?: components["parameters"]["preferCount"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["project_brief_template_usage"][];
            "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["project_brief_template_usage"][];
            "application/vnd.pgrst.object+json": components["schemas"]["project_brief_template_usage"][];
            "text/csv": components["schemas"]["project_brief_template_usage"][];
          };
        };
        /** @description Partial Content */
        206: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: {
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferPost"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["project_brief_template_usage"];
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.project_brief_template_usage.id"];
          template_id?: components["parameters"]["rowFilter.project_brief_template_usage.template_id"];
          user_id?: components["parameters"]["rowFilter.project_brief_template_usage.user_id"];
          project_id?: components["parameters"]["rowFilter.project_brief_template_usage.project_id"];
          used_at?: components["parameters"]["rowFilter.project_brief_template_usage.used_at"];
          brief_date?: components["parameters"]["rowFilter.project_brief_template_usage.brief_date"];
          metadata?: components["parameters"]["rowFilter.project_brief_template_usage.metadata"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.project_brief_template_usage.id"];
          template_id?: components["parameters"]["rowFilter.project_brief_template_usage.template_id"];
          user_id?: components["parameters"]["rowFilter.project_brief_template_usage.user_id"];
          project_id?: components["parameters"]["rowFilter.project_brief_template_usage.project_id"];
          used_at?: components["parameters"]["rowFilter.project_brief_template_usage.used_at"];
          brief_date?: components["parameters"]["rowFilter.project_brief_template_usage.brief_date"];
          metadata?: components["parameters"]["rowFilter.project_brief_template_usage.metadata"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["project_brief_template_usage"];
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    trace?: never;
  };
  "/project_calendars": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Maps projects to dedicated Google Calendars for better organization and visual separation */
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.project_calendars.id"];
          project_id?: components["parameters"]["rowFilter.project_calendars.project_id"];
          user_id?: components["parameters"]["rowFilter.project_calendars.user_id"];
          /** @description The Google Calendar ID returned when creating a calendar via Google Calendar API */
          calendar_id?: components["parameters"]["rowFilter.project_calendars.calendar_id"];
          calendar_name?: components["parameters"]["rowFilter.project_calendars.calendar_name"];
          /** @description Google Calendar color IDs: 1=Lavender (#7986cb), 2=Sage (#33b679), 3=Grape (#8e24aa), 4=Flamingo (#e67c73), 5=Banana (#f6bf26), 6=Tangerine (#f4511e), 7=Peacock (#039be5), 8=Graphite (#616161), 9=Blueberry (#3f51b5), 10=Basil (#0b8043), 11=Tomato (#d50000) */
          color_id?: components["parameters"]["rowFilter.project_calendars.color_id"];
          /** @description Cached hex color value for UI display without needing to map from Google color ID */
          hex_color?: components["parameters"]["rowFilter.project_calendars.hex_color"];
          is_primary?: components["parameters"]["rowFilter.project_calendars.is_primary"];
          sync_enabled?: components["parameters"]["rowFilter.project_calendars.sync_enabled"];
          visibility?: components["parameters"]["rowFilter.project_calendars.visibility"];
          created_at?: components["parameters"]["rowFilter.project_calendars.created_at"];
          updated_at?: components["parameters"]["rowFilter.project_calendars.updated_at"];
          last_synced_at?: components["parameters"]["rowFilter.project_calendars.last_synced_at"];
          sync_status?: components["parameters"]["rowFilter.project_calendars.sync_status"];
          sync_error?: components["parameters"]["rowFilter.project_calendars.sync_error"];
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
          /** @description Ordering */
          order?: components["parameters"]["order"];
          /** @description Limiting and Pagination */
          offset?: components["parameters"]["offset"];
          /** @description Limiting and Pagination */
          limit?: components["parameters"]["limit"];
        };
        header?: {
          /** @description Limiting and Pagination */
          Range?: components["parameters"]["range"];
          /** @description Limiting and Pagination */
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          /** @description Preference */
          Prefer?: components["parameters"]["preferCount"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["project_calendars"][];
            "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["project_calendars"][];
            "application/vnd.pgrst.object+json": components["schemas"]["project_calendars"][];
            "text/csv": components["schemas"]["project_calendars"][];
          };
        };
        /** @description Partial Content */
        206: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    /** Maps projects to dedicated Google Calendars for better organization and visual separation */
    post: {
      parameters: {
        query?: {
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferPost"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["project_calendars"];
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    /** Maps projects to dedicated Google Calendars for better organization and visual separation */
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.project_calendars.id"];
          project_id?: components["parameters"]["rowFilter.project_calendars.project_id"];
          user_id?: components["parameters"]["rowFilter.project_calendars.user_id"];
          /** @description The Google Calendar ID returned when creating a calendar via Google Calendar API */
          calendar_id?: components["parameters"]["rowFilter.project_calendars.calendar_id"];
          calendar_name?: components["parameters"]["rowFilter.project_calendars.calendar_name"];
          /** @description Google Calendar color IDs: 1=Lavender (#7986cb), 2=Sage (#33b679), 3=Grape (#8e24aa), 4=Flamingo (#e67c73), 5=Banana (#f6bf26), 6=Tangerine (#f4511e), 7=Peacock (#039be5), 8=Graphite (#616161), 9=Blueberry (#3f51b5), 10=Basil (#0b8043), 11=Tomato (#d50000) */
          color_id?: components["parameters"]["rowFilter.project_calendars.color_id"];
          /** @description Cached hex color value for UI display without needing to map from Google color ID */
          hex_color?: components["parameters"]["rowFilter.project_calendars.hex_color"];
          is_primary?: components["parameters"]["rowFilter.project_calendars.is_primary"];
          sync_enabled?: components["parameters"]["rowFilter.project_calendars.sync_enabled"];
          visibility?: components["parameters"]["rowFilter.project_calendars.visibility"];
          created_at?: components["parameters"]["rowFilter.project_calendars.created_at"];
          updated_at?: components["parameters"]["rowFilter.project_calendars.updated_at"];
          last_synced_at?: components["parameters"]["rowFilter.project_calendars.last_synced_at"];
          sync_status?: components["parameters"]["rowFilter.project_calendars.sync_status"];
          sync_error?: components["parameters"]["rowFilter.project_calendars.sync_error"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    /** Maps projects to dedicated Google Calendars for better organization and visual separation */
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.project_calendars.id"];
          project_id?: components["parameters"]["rowFilter.project_calendars.project_id"];
          user_id?: components["parameters"]["rowFilter.project_calendars.user_id"];
          /** @description The Google Calendar ID returned when creating a calendar via Google Calendar API */
          calendar_id?: components["parameters"]["rowFilter.project_calendars.calendar_id"];
          calendar_name?: components["parameters"]["rowFilter.project_calendars.calendar_name"];
          /** @description Google Calendar color IDs: 1=Lavender (#7986cb), 2=Sage (#33b679), 3=Grape (#8e24aa), 4=Flamingo (#e67c73), 5=Banana (#f6bf26), 6=Tangerine (#f4511e), 7=Peacock (#039be5), 8=Graphite (#616161), 9=Blueberry (#3f51b5), 10=Basil (#0b8043), 11=Tomato (#d50000) */
          color_id?: components["parameters"]["rowFilter.project_calendars.color_id"];
          /** @description Cached hex color value for UI display without needing to map from Google color ID */
          hex_color?: components["parameters"]["rowFilter.project_calendars.hex_color"];
          is_primary?: components["parameters"]["rowFilter.project_calendars.is_primary"];
          sync_enabled?: components["parameters"]["rowFilter.project_calendars.sync_enabled"];
          visibility?: components["parameters"]["rowFilter.project_calendars.visibility"];
          created_at?: components["parameters"]["rowFilter.project_calendars.created_at"];
          updated_at?: components["parameters"]["rowFilter.project_calendars.updated_at"];
          last_synced_at?: components["parameters"]["rowFilter.project_calendars.last_synced_at"];
          sync_status?: components["parameters"]["rowFilter.project_calendars.sync_status"];
          sync_error?: components["parameters"]["rowFilter.project_calendars.sync_error"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["project_calendars"];
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    trace?: never;
  };
  "/llm_prompts": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.llm_prompts.id"];
          title?: components["parameters"]["rowFilter.llm_prompts.title"];
          prompt_text?: components["parameters"]["rowFilter.llm_prompts.prompt_text"];
          purpose?: components["parameters"]["rowFilter.llm_prompts.purpose"];
          last_used?: components["parameters"]["rowFilter.llm_prompts.last_used"];
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
          /** @description Ordering */
          order?: components["parameters"]["order"];
          /** @description Limiting and Pagination */
          offset?: components["parameters"]["offset"];
          /** @description Limiting and Pagination */
          limit?: components["parameters"]["limit"];
        };
        header?: {
          /** @description Limiting and Pagination */
          Range?: components["parameters"]["range"];
          /** @description Limiting and Pagination */
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          /** @description Preference */
          Prefer?: components["parameters"]["preferCount"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["llm_prompts"][];
            "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["llm_prompts"][];
            "application/vnd.pgrst.object+json": components["schemas"]["llm_prompts"][];
            "text/csv": components["schemas"]["llm_prompts"][];
          };
        };
        /** @description Partial Content */
        206: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: {
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferPost"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["llm_prompts"];
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.llm_prompts.id"];
          title?: components["parameters"]["rowFilter.llm_prompts.title"];
          prompt_text?: components["parameters"]["rowFilter.llm_prompts.prompt_text"];
          purpose?: components["parameters"]["rowFilter.llm_prompts.purpose"];
          last_used?: components["parameters"]["rowFilter.llm_prompts.last_used"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.llm_prompts.id"];
          title?: components["parameters"]["rowFilter.llm_prompts.title"];
          prompt_text?: components["parameters"]["rowFilter.llm_prompts.prompt_text"];
          purpose?: components["parameters"]["rowFilter.llm_prompts.purpose"];
          last_used?: components["parameters"]["rowFilter.llm_prompts.last_used"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["llm_prompts"];
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    trace?: never;
  };
  "/calendar_webhook_channels": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.calendar_webhook_channels.id"];
          user_id?: components["parameters"]["rowFilter.calendar_webhook_channels.user_id"];
          channel_id?: components["parameters"]["rowFilter.calendar_webhook_channels.channel_id"];
          resource_id?: components["parameters"]["rowFilter.calendar_webhook_channels.resource_id"];
          calendar_id?: components["parameters"]["rowFilter.calendar_webhook_channels.calendar_id"];
          expiration?: components["parameters"]["rowFilter.calendar_webhook_channels.expiration"];
          sync_token?: components["parameters"]["rowFilter.calendar_webhook_channels.sync_token"];
          webhook_token?: components["parameters"]["rowFilter.calendar_webhook_channels.webhook_token"];
          created_at?: components["parameters"]["rowFilter.calendar_webhook_channels.created_at"];
          updated_at?: components["parameters"]["rowFilter.calendar_webhook_channels.updated_at"];
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
          /** @description Ordering */
          order?: components["parameters"]["order"];
          /** @description Limiting and Pagination */
          offset?: components["parameters"]["offset"];
          /** @description Limiting and Pagination */
          limit?: components["parameters"]["limit"];
        };
        header?: {
          /** @description Limiting and Pagination */
          Range?: components["parameters"]["range"];
          /** @description Limiting and Pagination */
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          /** @description Preference */
          Prefer?: components["parameters"]["preferCount"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["calendar_webhook_channels"][];
            "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["calendar_webhook_channels"][];
            "application/vnd.pgrst.object+json": components["schemas"]["calendar_webhook_channels"][];
            "text/csv": components["schemas"]["calendar_webhook_channels"][];
          };
        };
        /** @description Partial Content */
        206: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: {
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferPost"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["calendar_webhook_channels"];
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.calendar_webhook_channels.id"];
          user_id?: components["parameters"]["rowFilter.calendar_webhook_channels.user_id"];
          channel_id?: components["parameters"]["rowFilter.calendar_webhook_channels.channel_id"];
          resource_id?: components["parameters"]["rowFilter.calendar_webhook_channels.resource_id"];
          calendar_id?: components["parameters"]["rowFilter.calendar_webhook_channels.calendar_id"];
          expiration?: components["parameters"]["rowFilter.calendar_webhook_channels.expiration"];
          sync_token?: components["parameters"]["rowFilter.calendar_webhook_channels.sync_token"];
          webhook_token?: components["parameters"]["rowFilter.calendar_webhook_channels.webhook_token"];
          created_at?: components["parameters"]["rowFilter.calendar_webhook_channels.created_at"];
          updated_at?: components["parameters"]["rowFilter.calendar_webhook_channels.updated_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.calendar_webhook_channels.id"];
          user_id?: components["parameters"]["rowFilter.calendar_webhook_channels.user_id"];
          channel_id?: components["parameters"]["rowFilter.calendar_webhook_channels.channel_id"];
          resource_id?: components["parameters"]["rowFilter.calendar_webhook_channels.resource_id"];
          calendar_id?: components["parameters"]["rowFilter.calendar_webhook_channels.calendar_id"];
          expiration?: components["parameters"]["rowFilter.calendar_webhook_channels.expiration"];
          sync_token?: components["parameters"]["rowFilter.calendar_webhook_channels.sync_token"];
          webhook_token?: components["parameters"]["rowFilter.calendar_webhook_channels.webhook_token"];
          created_at?: components["parameters"]["rowFilter.calendar_webhook_channels.created_at"];
          updated_at?: components["parameters"]["rowFilter.calendar_webhook_channels.updated_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["calendar_webhook_channels"];
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    trace?: never;
  };
  "/payment_methods": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.payment_methods.id"];
          user_id?: components["parameters"]["rowFilter.payment_methods.user_id"];
          stripe_payment_method_id?: components["parameters"]["rowFilter.payment_methods.stripe_payment_method_id"];
          type?: components["parameters"]["rowFilter.payment_methods.type"];
          card_brand?: components["parameters"]["rowFilter.payment_methods.card_brand"];
          card_last4?: components["parameters"]["rowFilter.payment_methods.card_last4"];
          is_default?: components["parameters"]["rowFilter.payment_methods.is_default"];
          created_at?: components["parameters"]["rowFilter.payment_methods.created_at"];
          updated_at?: components["parameters"]["rowFilter.payment_methods.updated_at"];
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
          /** @description Ordering */
          order?: components["parameters"]["order"];
          /** @description Limiting and Pagination */
          offset?: components["parameters"]["offset"];
          /** @description Limiting and Pagination */
          limit?: components["parameters"]["limit"];
        };
        header?: {
          /** @description Limiting and Pagination */
          Range?: components["parameters"]["range"];
          /** @description Limiting and Pagination */
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          /** @description Preference */
          Prefer?: components["parameters"]["preferCount"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["payment_methods"][];
            "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["payment_methods"][];
            "application/vnd.pgrst.object+json": components["schemas"]["payment_methods"][];
            "text/csv": components["schemas"]["payment_methods"][];
          };
        };
        /** @description Partial Content */
        206: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: {
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferPost"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["payment_methods"];
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.payment_methods.id"];
          user_id?: components["parameters"]["rowFilter.payment_methods.user_id"];
          stripe_payment_method_id?: components["parameters"]["rowFilter.payment_methods.stripe_payment_method_id"];
          type?: components["parameters"]["rowFilter.payment_methods.type"];
          card_brand?: components["parameters"]["rowFilter.payment_methods.card_brand"];
          card_last4?: components["parameters"]["rowFilter.payment_methods.card_last4"];
          is_default?: components["parameters"]["rowFilter.payment_methods.is_default"];
          created_at?: components["parameters"]["rowFilter.payment_methods.created_at"];
          updated_at?: components["parameters"]["rowFilter.payment_methods.updated_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.payment_methods.id"];
          user_id?: components["parameters"]["rowFilter.payment_methods.user_id"];
          stripe_payment_method_id?: components["parameters"]["rowFilter.payment_methods.stripe_payment_method_id"];
          type?: components["parameters"]["rowFilter.payment_methods.type"];
          card_brand?: components["parameters"]["rowFilter.payment_methods.card_brand"];
          card_last4?: components["parameters"]["rowFilter.payment_methods.card_last4"];
          is_default?: components["parameters"]["rowFilter.payment_methods.is_default"];
          created_at?: components["parameters"]["rowFilter.payment_methods.created_at"];
          updated_at?: components["parameters"]["rowFilter.payment_methods.updated_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["payment_methods"];
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    trace?: never;
  };
  "/admin_analytics": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Daily aggregated analytics for admin dashboard */
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.admin_analytics.id"];
          date?: components["parameters"]["rowFilter.admin_analytics.date"];
          metric_name?: components["parameters"]["rowFilter.admin_analytics.metric_name"];
          metric_value?: components["parameters"]["rowFilter.admin_analytics.metric_value"];
          metadata?: components["parameters"]["rowFilter.admin_analytics.metadata"];
          created_at?: components["parameters"]["rowFilter.admin_analytics.created_at"];
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
          /** @description Ordering */
          order?: components["parameters"]["order"];
          /** @description Limiting and Pagination */
          offset?: components["parameters"]["offset"];
          /** @description Limiting and Pagination */
          limit?: components["parameters"]["limit"];
        };
        header?: {
          /** @description Limiting and Pagination */
          Range?: components["parameters"]["range"];
          /** @description Limiting and Pagination */
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          /** @description Preference */
          Prefer?: components["parameters"]["preferCount"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["admin_analytics"][];
            "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["admin_analytics"][];
            "application/vnd.pgrst.object+json": components["schemas"]["admin_analytics"][];
            "text/csv": components["schemas"]["admin_analytics"][];
          };
        };
        /** @description Partial Content */
        206: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    /** Daily aggregated analytics for admin dashboard */
    post: {
      parameters: {
        query?: {
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferPost"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["admin_analytics"];
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    /** Daily aggregated analytics for admin dashboard */
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.admin_analytics.id"];
          date?: components["parameters"]["rowFilter.admin_analytics.date"];
          metric_name?: components["parameters"]["rowFilter.admin_analytics.metric_name"];
          metric_value?: components["parameters"]["rowFilter.admin_analytics.metric_value"];
          metadata?: components["parameters"]["rowFilter.admin_analytics.metadata"];
          created_at?: components["parameters"]["rowFilter.admin_analytics.created_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    /** Daily aggregated analytics for admin dashboard */
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.admin_analytics.id"];
          date?: components["parameters"]["rowFilter.admin_analytics.date"];
          metric_name?: components["parameters"]["rowFilter.admin_analytics.metric_name"];
          metric_value?: components["parameters"]["rowFilter.admin_analytics.metric_value"];
          metadata?: components["parameters"]["rowFilter.admin_analytics.metadata"];
          created_at?: components["parameters"]["rowFilter.admin_analytics.created_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["admin_analytics"];
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    trace?: never;
  };
  "/tasks": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.tasks.id"];
          project_id?: components["parameters"]["rowFilter.tasks.project_id"];
          title?: components["parameters"]["rowFilter.tasks.title"];
          description?: components["parameters"]["rowFilter.tasks.description"];
          created_at?: components["parameters"]["rowFilter.tasks.created_at"];
          updated_at?: components["parameters"]["rowFilter.tasks.updated_at"];
          dependencies?: components["parameters"]["rowFilter.tasks.dependencies"];
          details?: components["parameters"]["rowFilter.tasks.details"];
          recurrence_ends?: components["parameters"]["rowFilter.tasks.recurrence_ends"];
          parent_task_id?: components["parameters"]["rowFilter.tasks.parent_task_id"];
          completed_at?: components["parameters"]["rowFilter.tasks.completed_at"];
          user_id?: components["parameters"]["rowFilter.tasks.user_id"];
          /** @description Marks tasks as outdated/obsolete - excluded from synthesis and active task lists */
          outdated?: components["parameters"]["rowFilter.tasks.outdated"];
          duration_minutes?: components["parameters"]["rowFilter.tasks.duration_minutes"];
          start_date?: components["parameters"]["rowFilter.tasks.start_date"];
          /** @description Markdown-formatted breakdown of task into actionable steps and prerequisites */
          task_steps?: components["parameters"]["rowFilter.tasks.task_steps"];
          status?: components["parameters"]["rowFilter.tasks.status"];
          priority?: components["parameters"]["rowFilter.tasks.priority"];
          task_type?: components["parameters"]["rowFilter.tasks.task_type"];
          recurrence_pattern?: components["parameters"]["rowFilter.tasks.recurrence_pattern"];
          /** @description Soft delete timestamp. When null, task is active. When set, task is
           *       deleted. */
          deleted_at?: components["parameters"]["rowFilter.tasks.deleted_at"];
          recurrence_end_source?: components["parameters"]["rowFilter.tasks.recurrence_end_source"];
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
          /** @description Ordering */
          order?: components["parameters"]["order"];
          /** @description Limiting and Pagination */
          offset?: components["parameters"]["offset"];
          /** @description Limiting and Pagination */
          limit?: components["parameters"]["limit"];
        };
        header?: {
          /** @description Limiting and Pagination */
          Range?: components["parameters"]["range"];
          /** @description Limiting and Pagination */
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          /** @description Preference */
          Prefer?: components["parameters"]["preferCount"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["tasks"][];
            "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["tasks"][];
            "application/vnd.pgrst.object+json": components["schemas"]["tasks"][];
            "text/csv": components["schemas"]["tasks"][];
          };
        };
        /** @description Partial Content */
        206: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: {
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferPost"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["tasks"];
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.tasks.id"];
          project_id?: components["parameters"]["rowFilter.tasks.project_id"];
          title?: components["parameters"]["rowFilter.tasks.title"];
          description?: components["parameters"]["rowFilter.tasks.description"];
          created_at?: components["parameters"]["rowFilter.tasks.created_at"];
          updated_at?: components["parameters"]["rowFilter.tasks.updated_at"];
          dependencies?: components["parameters"]["rowFilter.tasks.dependencies"];
          details?: components["parameters"]["rowFilter.tasks.details"];
          recurrence_ends?: components["parameters"]["rowFilter.tasks.recurrence_ends"];
          parent_task_id?: components["parameters"]["rowFilter.tasks.parent_task_id"];
          completed_at?: components["parameters"]["rowFilter.tasks.completed_at"];
          user_id?: components["parameters"]["rowFilter.tasks.user_id"];
          /** @description Marks tasks as outdated/obsolete - excluded from synthesis and active task lists */
          outdated?: components["parameters"]["rowFilter.tasks.outdated"];
          duration_minutes?: components["parameters"]["rowFilter.tasks.duration_minutes"];
          start_date?: components["parameters"]["rowFilter.tasks.start_date"];
          /** @description Markdown-formatted breakdown of task into actionable steps and prerequisites */
          task_steps?: components["parameters"]["rowFilter.tasks.task_steps"];
          status?: components["parameters"]["rowFilter.tasks.status"];
          priority?: components["parameters"]["rowFilter.tasks.priority"];
          task_type?: components["parameters"]["rowFilter.tasks.task_type"];
          recurrence_pattern?: components["parameters"]["rowFilter.tasks.recurrence_pattern"];
          /** @description Soft delete timestamp. When null, task is active. When set, task is
           *       deleted. */
          deleted_at?: components["parameters"]["rowFilter.tasks.deleted_at"];
          recurrence_end_source?: components["parameters"]["rowFilter.tasks.recurrence_end_source"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.tasks.id"];
          project_id?: components["parameters"]["rowFilter.tasks.project_id"];
          title?: components["parameters"]["rowFilter.tasks.title"];
          description?: components["parameters"]["rowFilter.tasks.description"];
          created_at?: components["parameters"]["rowFilter.tasks.created_at"];
          updated_at?: components["parameters"]["rowFilter.tasks.updated_at"];
          dependencies?: components["parameters"]["rowFilter.tasks.dependencies"];
          details?: components["parameters"]["rowFilter.tasks.details"];
          recurrence_ends?: components["parameters"]["rowFilter.tasks.recurrence_ends"];
          parent_task_id?: components["parameters"]["rowFilter.tasks.parent_task_id"];
          completed_at?: components["parameters"]["rowFilter.tasks.completed_at"];
          user_id?: components["parameters"]["rowFilter.tasks.user_id"];
          /** @description Marks tasks as outdated/obsolete - excluded from synthesis and active task lists */
          outdated?: components["parameters"]["rowFilter.tasks.outdated"];
          duration_minutes?: components["parameters"]["rowFilter.tasks.duration_minutes"];
          start_date?: components["parameters"]["rowFilter.tasks.start_date"];
          /** @description Markdown-formatted breakdown of task into actionable steps and prerequisites */
          task_steps?: components["parameters"]["rowFilter.tasks.task_steps"];
          status?: components["parameters"]["rowFilter.tasks.status"];
          priority?: components["parameters"]["rowFilter.tasks.priority"];
          task_type?: components["parameters"]["rowFilter.tasks.task_type"];
          recurrence_pattern?: components["parameters"]["rowFilter.tasks.recurrence_pattern"];
          /** @description Soft delete timestamp. When null, task is active. When set, task is
           *       deleted. */
          deleted_at?: components["parameters"]["rowFilter.tasks.deleted_at"];
          recurrence_end_source?: components["parameters"]["rowFilter.tasks.recurrence_end_source"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["tasks"];
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    trace?: never;
  };
  "/user_brief_preferences": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.user_brief_preferences.id"];
          user_id?: components["parameters"]["rowFilter.user_brief_preferences.user_id"];
          frequency?: components["parameters"]["rowFilter.user_brief_preferences.frequency"];
          day_of_week?: components["parameters"]["rowFilter.user_brief_preferences.day_of_week"];
          time_of_day?: components["parameters"]["rowFilter.user_brief_preferences.time_of_day"];
          timezone?: components["parameters"]["rowFilter.user_brief_preferences.timezone"];
          is_active?: components["parameters"]["rowFilter.user_brief_preferences.is_active"];
          created_at?: components["parameters"]["rowFilter.user_brief_preferences.created_at"];
          updated_at?: components["parameters"]["rowFilter.user_brief_preferences.updated_at"];
          /** @description Whether the user has opted in to receive daily briefs via email */
          email_daily_brief?: components["parameters"]["rowFilter.user_brief_preferences.email_daily_brief"];
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
          /** @description Ordering */
          order?: components["parameters"]["order"];
          /** @description Limiting and Pagination */
          offset?: components["parameters"]["offset"];
          /** @description Limiting and Pagination */
          limit?: components["parameters"]["limit"];
        };
        header?: {
          /** @description Limiting and Pagination */
          Range?: components["parameters"]["range"];
          /** @description Limiting and Pagination */
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          /** @description Preference */
          Prefer?: components["parameters"]["preferCount"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["user_brief_preferences"][];
            "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["user_brief_preferences"][];
            "application/vnd.pgrst.object+json": components["schemas"]["user_brief_preferences"][];
            "text/csv": components["schemas"]["user_brief_preferences"][];
          };
        };
        /** @description Partial Content */
        206: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: {
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferPost"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["user_brief_preferences"];
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.user_brief_preferences.id"];
          user_id?: components["parameters"]["rowFilter.user_brief_preferences.user_id"];
          frequency?: components["parameters"]["rowFilter.user_brief_preferences.frequency"];
          day_of_week?: components["parameters"]["rowFilter.user_brief_preferences.day_of_week"];
          time_of_day?: components["parameters"]["rowFilter.user_brief_preferences.time_of_day"];
          timezone?: components["parameters"]["rowFilter.user_brief_preferences.timezone"];
          is_active?: components["parameters"]["rowFilter.user_brief_preferences.is_active"];
          created_at?: components["parameters"]["rowFilter.user_brief_preferences.created_at"];
          updated_at?: components["parameters"]["rowFilter.user_brief_preferences.updated_at"];
          /** @description Whether the user has opted in to receive daily briefs via email */
          email_daily_brief?: components["parameters"]["rowFilter.user_brief_preferences.email_daily_brief"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.user_brief_preferences.id"];
          user_id?: components["parameters"]["rowFilter.user_brief_preferences.user_id"];
          frequency?: components["parameters"]["rowFilter.user_brief_preferences.frequency"];
          day_of_week?: components["parameters"]["rowFilter.user_brief_preferences.day_of_week"];
          time_of_day?: components["parameters"]["rowFilter.user_brief_preferences.time_of_day"];
          timezone?: components["parameters"]["rowFilter.user_brief_preferences.timezone"];
          is_active?: components["parameters"]["rowFilter.user_brief_preferences.is_active"];
          created_at?: components["parameters"]["rowFilter.user_brief_preferences.created_at"];
          updated_at?: components["parameters"]["rowFilter.user_brief_preferences.updated_at"];
          /** @description Whether the user has opted in to receive daily briefs via email */
          email_daily_brief?: components["parameters"]["rowFilter.user_brief_preferences.email_daily_brief"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["user_brief_preferences"];
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    trace?: never;
  };
  "/project_questions": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.project_questions.id"];
          user_id?: components["parameters"]["rowFilter.project_questions.user_id"];
          project_id?: components["parameters"]["rowFilter.project_questions.project_id"];
          question?: components["parameters"]["rowFilter.project_questions.question"];
          context?: components["parameters"]["rowFilter.project_questions.context"];
          expected_outcome?: components["parameters"]["rowFilter.project_questions.expected_outcome"];
          category?: components["parameters"]["rowFilter.project_questions.category"];
          priority?: components["parameters"]["rowFilter.project_questions.priority"];
          status?: components["parameters"]["rowFilter.project_questions.status"];
          answered_at?: components["parameters"]["rowFilter.project_questions.answered_at"];
          answer_brain_dump_id?: components["parameters"]["rowFilter.project_questions.answer_brain_dump_id"];
          source?: components["parameters"]["rowFilter.project_questions.source"];
          source_field?: components["parameters"]["rowFilter.project_questions.source_field"];
          triggers?: components["parameters"]["rowFilter.project_questions.triggers"];
          ask_after?: components["parameters"]["rowFilter.project_questions.ask_after"];
          created_at?: components["parameters"]["rowFilter.project_questions.created_at"];
          updated_at?: components["parameters"]["rowFilter.project_questions.updated_at"];
          shown_to_user_count?: components["parameters"]["rowFilter.project_questions.shown_to_user_count"];
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
          /** @description Ordering */
          order?: components["parameters"]["order"];
          /** @description Limiting and Pagination */
          offset?: components["parameters"]["offset"];
          /** @description Limiting and Pagination */
          limit?: components["parameters"]["limit"];
        };
        header?: {
          /** @description Limiting and Pagination */
          Range?: components["parameters"]["range"];
          /** @description Limiting and Pagination */
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          /** @description Preference */
          Prefer?: components["parameters"]["preferCount"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["project_questions"][];
            "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["project_questions"][];
            "application/vnd.pgrst.object+json": components["schemas"]["project_questions"][];
            "text/csv": components["schemas"]["project_questions"][];
          };
        };
        /** @description Partial Content */
        206: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: {
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferPost"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["project_questions"];
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.project_questions.id"];
          user_id?: components["parameters"]["rowFilter.project_questions.user_id"];
          project_id?: components["parameters"]["rowFilter.project_questions.project_id"];
          question?: components["parameters"]["rowFilter.project_questions.question"];
          context?: components["parameters"]["rowFilter.project_questions.context"];
          expected_outcome?: components["parameters"]["rowFilter.project_questions.expected_outcome"];
          category?: components["parameters"]["rowFilter.project_questions.category"];
          priority?: components["parameters"]["rowFilter.project_questions.priority"];
          status?: components["parameters"]["rowFilter.project_questions.status"];
          answered_at?: components["parameters"]["rowFilter.project_questions.answered_at"];
          answer_brain_dump_id?: components["parameters"]["rowFilter.project_questions.answer_brain_dump_id"];
          source?: components["parameters"]["rowFilter.project_questions.source"];
          source_field?: components["parameters"]["rowFilter.project_questions.source_field"];
          triggers?: components["parameters"]["rowFilter.project_questions.triggers"];
          ask_after?: components["parameters"]["rowFilter.project_questions.ask_after"];
          created_at?: components["parameters"]["rowFilter.project_questions.created_at"];
          updated_at?: components["parameters"]["rowFilter.project_questions.updated_at"];
          shown_to_user_count?: components["parameters"]["rowFilter.project_questions.shown_to_user_count"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.project_questions.id"];
          user_id?: components["parameters"]["rowFilter.project_questions.user_id"];
          project_id?: components["parameters"]["rowFilter.project_questions.project_id"];
          question?: components["parameters"]["rowFilter.project_questions.question"];
          context?: components["parameters"]["rowFilter.project_questions.context"];
          expected_outcome?: components["parameters"]["rowFilter.project_questions.expected_outcome"];
          category?: components["parameters"]["rowFilter.project_questions.category"];
          priority?: components["parameters"]["rowFilter.project_questions.priority"];
          status?: components["parameters"]["rowFilter.project_questions.status"];
          answered_at?: components["parameters"]["rowFilter.project_questions.answered_at"];
          answer_brain_dump_id?: components["parameters"]["rowFilter.project_questions.answer_brain_dump_id"];
          source?: components["parameters"]["rowFilter.project_questions.source"];
          source_field?: components["parameters"]["rowFilter.project_questions.source_field"];
          triggers?: components["parameters"]["rowFilter.project_questions.triggers"];
          ask_after?: components["parameters"]["rowFilter.project_questions.ask_after"];
          created_at?: components["parameters"]["rowFilter.project_questions.created_at"];
          updated_at?: components["parameters"]["rowFilter.project_questions.updated_at"];
          shown_to_user_count?: components["parameters"]["rowFilter.project_questions.shown_to_user_count"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["project_questions"];
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    trace?: never;
  };
  "/webhook_events": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.webhook_events.id"];
          event_id?: components["parameters"]["rowFilter.webhook_events.event_id"];
          event_type?: components["parameters"]["rowFilter.webhook_events.event_type"];
          status?: components["parameters"]["rowFilter.webhook_events.status"];
          payload?: components["parameters"]["rowFilter.webhook_events.payload"];
          error_message?: components["parameters"]["rowFilter.webhook_events.error_message"];
          attempts?: components["parameters"]["rowFilter.webhook_events.attempts"];
          processed_at?: components["parameters"]["rowFilter.webhook_events.processed_at"];
          created_at?: components["parameters"]["rowFilter.webhook_events.created_at"];
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
          /** @description Ordering */
          order?: components["parameters"]["order"];
          /** @description Limiting and Pagination */
          offset?: components["parameters"]["offset"];
          /** @description Limiting and Pagination */
          limit?: components["parameters"]["limit"];
        };
        header?: {
          /** @description Limiting and Pagination */
          Range?: components["parameters"]["range"];
          /** @description Limiting and Pagination */
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          /** @description Preference */
          Prefer?: components["parameters"]["preferCount"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["webhook_events"][];
            "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["webhook_events"][];
            "application/vnd.pgrst.object+json": components["schemas"]["webhook_events"][];
            "text/csv": components["schemas"]["webhook_events"][];
          };
        };
        /** @description Partial Content */
        206: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: {
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferPost"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["webhook_events"];
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.webhook_events.id"];
          event_id?: components["parameters"]["rowFilter.webhook_events.event_id"];
          event_type?: components["parameters"]["rowFilter.webhook_events.event_type"];
          status?: components["parameters"]["rowFilter.webhook_events.status"];
          payload?: components["parameters"]["rowFilter.webhook_events.payload"];
          error_message?: components["parameters"]["rowFilter.webhook_events.error_message"];
          attempts?: components["parameters"]["rowFilter.webhook_events.attempts"];
          processed_at?: components["parameters"]["rowFilter.webhook_events.processed_at"];
          created_at?: components["parameters"]["rowFilter.webhook_events.created_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.webhook_events.id"];
          event_id?: components["parameters"]["rowFilter.webhook_events.event_id"];
          event_type?: components["parameters"]["rowFilter.webhook_events.event_type"];
          status?: components["parameters"]["rowFilter.webhook_events.status"];
          payload?: components["parameters"]["rowFilter.webhook_events.payload"];
          error_message?: components["parameters"]["rowFilter.webhook_events.error_message"];
          attempts?: components["parameters"]["rowFilter.webhook_events.attempts"];
          processed_at?: components["parameters"]["rowFilter.webhook_events.processed_at"];
          created_at?: components["parameters"]["rowFilter.webhook_events.created_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["webhook_events"];
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    trace?: never;
  };
  "/beta_signups": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.beta_signups.id"];
          email?: components["parameters"]["rowFilter.beta_signups.email"];
          full_name?: components["parameters"]["rowFilter.beta_signups.full_name"];
          job_title?: components["parameters"]["rowFilter.beta_signups.job_title"];
          company_name?: components["parameters"]["rowFilter.beta_signups.company_name"];
          why_interested?: components["parameters"]["rowFilter.beta_signups.why_interested"];
          productivity_tools?: components["parameters"]["rowFilter.beta_signups.productivity_tools"];
          biggest_challenge?: components["parameters"]["rowFilter.beta_signups.biggest_challenge"];
          referral_source?: components["parameters"]["rowFilter.beta_signups.referral_source"];
          signup_status?: components["parameters"]["rowFilter.beta_signups.signup_status"];
          approved_at?: components["parameters"]["rowFilter.beta_signups.approved_at"];
          invited_by?: components["parameters"]["rowFilter.beta_signups.invited_by"];
          wants_weekly_calls?: components["parameters"]["rowFilter.beta_signups.wants_weekly_calls"];
          wants_community_access?: components["parameters"]["rowFilter.beta_signups.wants_community_access"];
          user_timezone?: components["parameters"]["rowFilter.beta_signups.user_timezone"];
          ip_address?: components["parameters"]["rowFilter.beta_signups.ip_address"];
          user_agent?: components["parameters"]["rowFilter.beta_signups.user_agent"];
          created_at?: components["parameters"]["rowFilter.beta_signups.created_at"];
          updated_at?: components["parameters"]["rowFilter.beta_signups.updated_at"];
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
          /** @description Ordering */
          order?: components["parameters"]["order"];
          /** @description Limiting and Pagination */
          offset?: components["parameters"]["offset"];
          /** @description Limiting and Pagination */
          limit?: components["parameters"]["limit"];
        };
        header?: {
          /** @description Limiting and Pagination */
          Range?: components["parameters"]["range"];
          /** @description Limiting and Pagination */
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          /** @description Preference */
          Prefer?: components["parameters"]["preferCount"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["beta_signups"][];
            "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["beta_signups"][];
            "application/vnd.pgrst.object+json": components["schemas"]["beta_signups"][];
            "text/csv": components["schemas"]["beta_signups"][];
          };
        };
        /** @description Partial Content */
        206: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: {
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferPost"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["beta_signups"];
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.beta_signups.id"];
          email?: components["parameters"]["rowFilter.beta_signups.email"];
          full_name?: components["parameters"]["rowFilter.beta_signups.full_name"];
          job_title?: components["parameters"]["rowFilter.beta_signups.job_title"];
          company_name?: components["parameters"]["rowFilter.beta_signups.company_name"];
          why_interested?: components["parameters"]["rowFilter.beta_signups.why_interested"];
          productivity_tools?: components["parameters"]["rowFilter.beta_signups.productivity_tools"];
          biggest_challenge?: components["parameters"]["rowFilter.beta_signups.biggest_challenge"];
          referral_source?: components["parameters"]["rowFilter.beta_signups.referral_source"];
          signup_status?: components["parameters"]["rowFilter.beta_signups.signup_status"];
          approved_at?: components["parameters"]["rowFilter.beta_signups.approved_at"];
          invited_by?: components["parameters"]["rowFilter.beta_signups.invited_by"];
          wants_weekly_calls?: components["parameters"]["rowFilter.beta_signups.wants_weekly_calls"];
          wants_community_access?: components["parameters"]["rowFilter.beta_signups.wants_community_access"];
          user_timezone?: components["parameters"]["rowFilter.beta_signups.user_timezone"];
          ip_address?: components["parameters"]["rowFilter.beta_signups.ip_address"];
          user_agent?: components["parameters"]["rowFilter.beta_signups.user_agent"];
          created_at?: components["parameters"]["rowFilter.beta_signups.created_at"];
          updated_at?: components["parameters"]["rowFilter.beta_signups.updated_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.beta_signups.id"];
          email?: components["parameters"]["rowFilter.beta_signups.email"];
          full_name?: components["parameters"]["rowFilter.beta_signups.full_name"];
          job_title?: components["parameters"]["rowFilter.beta_signups.job_title"];
          company_name?: components["parameters"]["rowFilter.beta_signups.company_name"];
          why_interested?: components["parameters"]["rowFilter.beta_signups.why_interested"];
          productivity_tools?: components["parameters"]["rowFilter.beta_signups.productivity_tools"];
          biggest_challenge?: components["parameters"]["rowFilter.beta_signups.biggest_challenge"];
          referral_source?: components["parameters"]["rowFilter.beta_signups.referral_source"];
          signup_status?: components["parameters"]["rowFilter.beta_signups.signup_status"];
          approved_at?: components["parameters"]["rowFilter.beta_signups.approved_at"];
          invited_by?: components["parameters"]["rowFilter.beta_signups.invited_by"];
          wants_weekly_calls?: components["parameters"]["rowFilter.beta_signups.wants_weekly_calls"];
          wants_community_access?: components["parameters"]["rowFilter.beta_signups.wants_community_access"];
          user_timezone?: components["parameters"]["rowFilter.beta_signups.user_timezone"];
          ip_address?: components["parameters"]["rowFilter.beta_signups.ip_address"];
          user_agent?: components["parameters"]["rowFilter.beta_signups.user_agent"];
          created_at?: components["parameters"]["rowFilter.beta_signups.created_at"];
          updated_at?: components["parameters"]["rowFilter.beta_signups.updated_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["beta_signups"];
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    trace?: never;
  };
  "/task_calendar_events": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Enhanced with recurrence support for better Google Calendar integration */
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.task_calendar_events.id"];
          user_id?: components["parameters"]["rowFilter.task_calendar_events.user_id"];
          task_id?: components["parameters"]["rowFilter.task_calendar_events.task_id"];
          calendar_event_id?: components["parameters"]["rowFilter.task_calendar_events.calendar_event_id"];
          calendar_id?: components["parameters"]["rowFilter.task_calendar_events.calendar_id"];
          event_link?: components["parameters"]["rowFilter.task_calendar_events.event_link"];
          last_synced_at?: components["parameters"]["rowFilter.task_calendar_events.last_synced_at"];
          sync_error?: components["parameters"]["rowFilter.task_calendar_events.sync_error"];
          event_start?: components["parameters"]["rowFilter.task_calendar_events.event_start"];
          event_end?: components["parameters"]["rowFilter.task_calendar_events.event_end"];
          event_title?: components["parameters"]["rowFilter.task_calendar_events.event_title"];
          created_at?: components["parameters"]["rowFilter.task_calendar_events.created_at"];
          updated_at?: components["parameters"]["rowFilter.task_calendar_events.updated_at"];
          recurrence_master_id?: components["parameters"]["rowFilter.task_calendar_events.recurrence_master_id"];
          recurrence_instance_date?: components["parameters"]["rowFilter.task_calendar_events.recurrence_instance_date"];
          is_master_event?: components["parameters"]["rowFilter.task_calendar_events.is_master_event"];
          sync_source?: components["parameters"]["rowFilter.task_calendar_events.sync_source"];
          sync_version?: components["parameters"]["rowFilter.task_calendar_events.sync_version"];
          recurrence_rule?: components["parameters"]["rowFilter.task_calendar_events.recurrence_rule"];
          original_start_time?: components["parameters"]["rowFilter.task_calendar_events.original_start_time"];
          is_exception?: components["parameters"]["rowFilter.task_calendar_events.is_exception"];
          exception_type?: components["parameters"]["rowFilter.task_calendar_events.exception_type"];
          series_update_scope?: components["parameters"]["rowFilter.task_calendar_events.series_update_scope"];
          sync_status?: components["parameters"]["rowFilter.task_calendar_events.sync_status"];
          project_calendar_id?: components["parameters"]["rowFilter.task_calendar_events.project_calendar_id"];
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
          /** @description Ordering */
          order?: components["parameters"]["order"];
          /** @description Limiting and Pagination */
          offset?: components["parameters"]["offset"];
          /** @description Limiting and Pagination */
          limit?: components["parameters"]["limit"];
        };
        header?: {
          /** @description Limiting and Pagination */
          Range?: components["parameters"]["range"];
          /** @description Limiting and Pagination */
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          /** @description Preference */
          Prefer?: components["parameters"]["preferCount"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["task_calendar_events"][];
            "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["task_calendar_events"][];
            "application/vnd.pgrst.object+json": components["schemas"]["task_calendar_events"][];
            "text/csv": components["schemas"]["task_calendar_events"][];
          };
        };
        /** @description Partial Content */
        206: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    /** Enhanced with recurrence support for better Google Calendar integration */
    post: {
      parameters: {
        query?: {
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferPost"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["task_calendar_events"];
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    /** Enhanced with recurrence support for better Google Calendar integration */
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.task_calendar_events.id"];
          user_id?: components["parameters"]["rowFilter.task_calendar_events.user_id"];
          task_id?: components["parameters"]["rowFilter.task_calendar_events.task_id"];
          calendar_event_id?: components["parameters"]["rowFilter.task_calendar_events.calendar_event_id"];
          calendar_id?: components["parameters"]["rowFilter.task_calendar_events.calendar_id"];
          event_link?: components["parameters"]["rowFilter.task_calendar_events.event_link"];
          last_synced_at?: components["parameters"]["rowFilter.task_calendar_events.last_synced_at"];
          sync_error?: components["parameters"]["rowFilter.task_calendar_events.sync_error"];
          event_start?: components["parameters"]["rowFilter.task_calendar_events.event_start"];
          event_end?: components["parameters"]["rowFilter.task_calendar_events.event_end"];
          event_title?: components["parameters"]["rowFilter.task_calendar_events.event_title"];
          created_at?: components["parameters"]["rowFilter.task_calendar_events.created_at"];
          updated_at?: components["parameters"]["rowFilter.task_calendar_events.updated_at"];
          recurrence_master_id?: components["parameters"]["rowFilter.task_calendar_events.recurrence_master_id"];
          recurrence_instance_date?: components["parameters"]["rowFilter.task_calendar_events.recurrence_instance_date"];
          is_master_event?: components["parameters"]["rowFilter.task_calendar_events.is_master_event"];
          sync_source?: components["parameters"]["rowFilter.task_calendar_events.sync_source"];
          sync_version?: components["parameters"]["rowFilter.task_calendar_events.sync_version"];
          recurrence_rule?: components["parameters"]["rowFilter.task_calendar_events.recurrence_rule"];
          original_start_time?: components["parameters"]["rowFilter.task_calendar_events.original_start_time"];
          is_exception?: components["parameters"]["rowFilter.task_calendar_events.is_exception"];
          exception_type?: components["parameters"]["rowFilter.task_calendar_events.exception_type"];
          series_update_scope?: components["parameters"]["rowFilter.task_calendar_events.series_update_scope"];
          sync_status?: components["parameters"]["rowFilter.task_calendar_events.sync_status"];
          project_calendar_id?: components["parameters"]["rowFilter.task_calendar_events.project_calendar_id"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    /** Enhanced with recurrence support for better Google Calendar integration */
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.task_calendar_events.id"];
          user_id?: components["parameters"]["rowFilter.task_calendar_events.user_id"];
          task_id?: components["parameters"]["rowFilter.task_calendar_events.task_id"];
          calendar_event_id?: components["parameters"]["rowFilter.task_calendar_events.calendar_event_id"];
          calendar_id?: components["parameters"]["rowFilter.task_calendar_events.calendar_id"];
          event_link?: components["parameters"]["rowFilter.task_calendar_events.event_link"];
          last_synced_at?: components["parameters"]["rowFilter.task_calendar_events.last_synced_at"];
          sync_error?: components["parameters"]["rowFilter.task_calendar_events.sync_error"];
          event_start?: components["parameters"]["rowFilter.task_calendar_events.event_start"];
          event_end?: components["parameters"]["rowFilter.task_calendar_events.event_end"];
          event_title?: components["parameters"]["rowFilter.task_calendar_events.event_title"];
          created_at?: components["parameters"]["rowFilter.task_calendar_events.created_at"];
          updated_at?: components["parameters"]["rowFilter.task_calendar_events.updated_at"];
          recurrence_master_id?: components["parameters"]["rowFilter.task_calendar_events.recurrence_master_id"];
          recurrence_instance_date?: components["parameters"]["rowFilter.task_calendar_events.recurrence_instance_date"];
          is_master_event?: components["parameters"]["rowFilter.task_calendar_events.is_master_event"];
          sync_source?: components["parameters"]["rowFilter.task_calendar_events.sync_source"];
          sync_version?: components["parameters"]["rowFilter.task_calendar_events.sync_version"];
          recurrence_rule?: components["parameters"]["rowFilter.task_calendar_events.recurrence_rule"];
          original_start_time?: components["parameters"]["rowFilter.task_calendar_events.original_start_time"];
          is_exception?: components["parameters"]["rowFilter.task_calendar_events.is_exception"];
          exception_type?: components["parameters"]["rowFilter.task_calendar_events.exception_type"];
          series_update_scope?: components["parameters"]["rowFilter.task_calendar_events.series_update_scope"];
          sync_status?: components["parameters"]["rowFilter.task_calendar_events.sync_status"];
          project_calendar_id?: components["parameters"]["rowFilter.task_calendar_events.project_calendar_id"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["task_calendar_events"];
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    trace?: never;
  };
  "/beta_event_attendance": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.beta_event_attendance.id"];
          event_id?: components["parameters"]["rowFilter.beta_event_attendance.event_id"];
          member_id?: components["parameters"]["rowFilter.beta_event_attendance.member_id"];
          user_id?: components["parameters"]["rowFilter.beta_event_attendance.user_id"];
          rsvp_status?: components["parameters"]["rowFilter.beta_event_attendance.rsvp_status"];
          rsvp_at?: components["parameters"]["rowFilter.beta_event_attendance.rsvp_at"];
          attended?: components["parameters"]["rowFilter.beta_event_attendance.attended"];
          joined_at?: components["parameters"]["rowFilter.beta_event_attendance.joined_at"];
          left_at?: components["parameters"]["rowFilter.beta_event_attendance.left_at"];
          event_rating?: components["parameters"]["rowFilter.beta_event_attendance.event_rating"];
          event_feedback?: components["parameters"]["rowFilter.beta_event_attendance.event_feedback"];
          created_at?: components["parameters"]["rowFilter.beta_event_attendance.created_at"];
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
          /** @description Ordering */
          order?: components["parameters"]["order"];
          /** @description Limiting and Pagination */
          offset?: components["parameters"]["offset"];
          /** @description Limiting and Pagination */
          limit?: components["parameters"]["limit"];
        };
        header?: {
          /** @description Limiting and Pagination */
          Range?: components["parameters"]["range"];
          /** @description Limiting and Pagination */
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          /** @description Preference */
          Prefer?: components["parameters"]["preferCount"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["beta_event_attendance"][];
            "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["beta_event_attendance"][];
            "application/vnd.pgrst.object+json": components["schemas"]["beta_event_attendance"][];
            "text/csv": components["schemas"]["beta_event_attendance"][];
          };
        };
        /** @description Partial Content */
        206: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: {
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferPost"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["beta_event_attendance"];
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.beta_event_attendance.id"];
          event_id?: components["parameters"]["rowFilter.beta_event_attendance.event_id"];
          member_id?: components["parameters"]["rowFilter.beta_event_attendance.member_id"];
          user_id?: components["parameters"]["rowFilter.beta_event_attendance.user_id"];
          rsvp_status?: components["parameters"]["rowFilter.beta_event_attendance.rsvp_status"];
          rsvp_at?: components["parameters"]["rowFilter.beta_event_attendance.rsvp_at"];
          attended?: components["parameters"]["rowFilter.beta_event_attendance.attended"];
          joined_at?: components["parameters"]["rowFilter.beta_event_attendance.joined_at"];
          left_at?: components["parameters"]["rowFilter.beta_event_attendance.left_at"];
          event_rating?: components["parameters"]["rowFilter.beta_event_attendance.event_rating"];
          event_feedback?: components["parameters"]["rowFilter.beta_event_attendance.event_feedback"];
          created_at?: components["parameters"]["rowFilter.beta_event_attendance.created_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.beta_event_attendance.id"];
          event_id?: components["parameters"]["rowFilter.beta_event_attendance.event_id"];
          member_id?: components["parameters"]["rowFilter.beta_event_attendance.member_id"];
          user_id?: components["parameters"]["rowFilter.beta_event_attendance.user_id"];
          rsvp_status?: components["parameters"]["rowFilter.beta_event_attendance.rsvp_status"];
          rsvp_at?: components["parameters"]["rowFilter.beta_event_attendance.rsvp_at"];
          attended?: components["parameters"]["rowFilter.beta_event_attendance.attended"];
          joined_at?: components["parameters"]["rowFilter.beta_event_attendance.joined_at"];
          left_at?: components["parameters"]["rowFilter.beta_event_attendance.left_at"];
          event_rating?: components["parameters"]["rowFilter.beta_event_attendance.event_rating"];
          event_feedback?: components["parameters"]["rowFilter.beta_event_attendance.event_feedback"];
          created_at?: components["parameters"]["rowFilter.beta_event_attendance.created_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["beta_event_attendance"];
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    trace?: never;
  };
  "/user_context": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.user_context.id"];
          user_id?: components["parameters"]["rowFilter.user_context.user_id"];
          background?: components["parameters"]["rowFilter.user_context.background"];
          active_projects?: components["parameters"]["rowFilter.user_context.active_projects"];
          goals_overview?: components["parameters"]["rowFilter.user_context.goals_overview"];
          habits?: components["parameters"]["rowFilter.user_context.habits"];
          workflows?: components["parameters"]["rowFilter.user_context.workflows"];
          tools?: components["parameters"]["rowFilter.user_context.tools"];
          schedule_preferences?: components["parameters"]["rowFilter.user_context.schedule_preferences"];
          work_style?: components["parameters"]["rowFilter.user_context.work_style"];
          blockers?: components["parameters"]["rowFilter.user_context.blockers"];
          collaboration_needs?: components["parameters"]["rowFilter.user_context.collaboration_needs"];
          skill_gaps?: components["parameters"]["rowFilter.user_context.skill_gaps"];
          priorities?: components["parameters"]["rowFilter.user_context.priorities"];
          onboarding_completed_at?: components["parameters"]["rowFilter.user_context.onboarding_completed_at"];
          created_at?: components["parameters"]["rowFilter.user_context.created_at"];
          updated_at?: components["parameters"]["rowFilter.user_context.updated_at"];
          input_projects?: components["parameters"]["rowFilter.user_context.input_projects"];
          input_work_style?: components["parameters"]["rowFilter.user_context.input_work_style"];
          input_challenges?: components["parameters"]["rowFilter.user_context.input_challenges"];
          input_help_focus?: components["parameters"]["rowFilter.user_context.input_help_focus"];
          help_priorities?: components["parameters"]["rowFilter.user_context.help_priorities"];
          focus_areas?: components["parameters"]["rowFilter.user_context.focus_areas"];
          productivity_challenges?: components["parameters"]["rowFilter.user_context.productivity_challenges"];
          preferred_work_hours?: components["parameters"]["rowFilter.user_context.preferred_work_hours"];
          communication_style?: components["parameters"]["rowFilter.user_context.communication_style"];
          organization_method?: components["parameters"]["rowFilter.user_context.organization_method"];
          /** @description Stores the last input that was parsed by LLM for projects category */
          last_parsed_input_projects?: components["parameters"]["rowFilter.user_context.last_parsed_input_projects"];
          /** @description Stores the last input that was parsed by LLM for work_style category */
          last_parsed_input_work_style?: components["parameters"]["rowFilter.user_context.last_parsed_input_work_style"];
          /** @description Stores the last input that was parsed by LLM for challenges category */
          last_parsed_input_challenges?: components["parameters"]["rowFilter.user_context.last_parsed_input_challenges"];
          /** @description Stores the last input that was parsed by LLM for help_focus category */
          last_parsed_input_help_focus?: components["parameters"]["rowFilter.user_context.last_parsed_input_help_focus"];
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
          /** @description Ordering */
          order?: components["parameters"]["order"];
          /** @description Limiting and Pagination */
          offset?: components["parameters"]["offset"];
          /** @description Limiting and Pagination */
          limit?: components["parameters"]["limit"];
        };
        header?: {
          /** @description Limiting and Pagination */
          Range?: components["parameters"]["range"];
          /** @description Limiting and Pagination */
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          /** @description Preference */
          Prefer?: components["parameters"]["preferCount"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["user_context"][];
            "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["user_context"][];
            "application/vnd.pgrst.object+json": components["schemas"]["user_context"][];
            "text/csv": components["schemas"]["user_context"][];
          };
        };
        /** @description Partial Content */
        206: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: {
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferPost"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["user_context"];
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.user_context.id"];
          user_id?: components["parameters"]["rowFilter.user_context.user_id"];
          background?: components["parameters"]["rowFilter.user_context.background"];
          active_projects?: components["parameters"]["rowFilter.user_context.active_projects"];
          goals_overview?: components["parameters"]["rowFilter.user_context.goals_overview"];
          habits?: components["parameters"]["rowFilter.user_context.habits"];
          workflows?: components["parameters"]["rowFilter.user_context.workflows"];
          tools?: components["parameters"]["rowFilter.user_context.tools"];
          schedule_preferences?: components["parameters"]["rowFilter.user_context.schedule_preferences"];
          work_style?: components["parameters"]["rowFilter.user_context.work_style"];
          blockers?: components["parameters"]["rowFilter.user_context.blockers"];
          collaboration_needs?: components["parameters"]["rowFilter.user_context.collaboration_needs"];
          skill_gaps?: components["parameters"]["rowFilter.user_context.skill_gaps"];
          priorities?: components["parameters"]["rowFilter.user_context.priorities"];
          onboarding_completed_at?: components["parameters"]["rowFilter.user_context.onboarding_completed_at"];
          created_at?: components["parameters"]["rowFilter.user_context.created_at"];
          updated_at?: components["parameters"]["rowFilter.user_context.updated_at"];
          input_projects?: components["parameters"]["rowFilter.user_context.input_projects"];
          input_work_style?: components["parameters"]["rowFilter.user_context.input_work_style"];
          input_challenges?: components["parameters"]["rowFilter.user_context.input_challenges"];
          input_help_focus?: components["parameters"]["rowFilter.user_context.input_help_focus"];
          help_priorities?: components["parameters"]["rowFilter.user_context.help_priorities"];
          focus_areas?: components["parameters"]["rowFilter.user_context.focus_areas"];
          productivity_challenges?: components["parameters"]["rowFilter.user_context.productivity_challenges"];
          preferred_work_hours?: components["parameters"]["rowFilter.user_context.preferred_work_hours"];
          communication_style?: components["parameters"]["rowFilter.user_context.communication_style"];
          organization_method?: components["parameters"]["rowFilter.user_context.organization_method"];
          /** @description Stores the last input that was parsed by LLM for projects category */
          last_parsed_input_projects?: components["parameters"]["rowFilter.user_context.last_parsed_input_projects"];
          /** @description Stores the last input that was parsed by LLM for work_style category */
          last_parsed_input_work_style?: components["parameters"]["rowFilter.user_context.last_parsed_input_work_style"];
          /** @description Stores the last input that was parsed by LLM for challenges category */
          last_parsed_input_challenges?: components["parameters"]["rowFilter.user_context.last_parsed_input_challenges"];
          /** @description Stores the last input that was parsed by LLM for help_focus category */
          last_parsed_input_help_focus?: components["parameters"]["rowFilter.user_context.last_parsed_input_help_focus"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.user_context.id"];
          user_id?: components["parameters"]["rowFilter.user_context.user_id"];
          background?: components["parameters"]["rowFilter.user_context.background"];
          active_projects?: components["parameters"]["rowFilter.user_context.active_projects"];
          goals_overview?: components["parameters"]["rowFilter.user_context.goals_overview"];
          habits?: components["parameters"]["rowFilter.user_context.habits"];
          workflows?: components["parameters"]["rowFilter.user_context.workflows"];
          tools?: components["parameters"]["rowFilter.user_context.tools"];
          schedule_preferences?: components["parameters"]["rowFilter.user_context.schedule_preferences"];
          work_style?: components["parameters"]["rowFilter.user_context.work_style"];
          blockers?: components["parameters"]["rowFilter.user_context.blockers"];
          collaboration_needs?: components["parameters"]["rowFilter.user_context.collaboration_needs"];
          skill_gaps?: components["parameters"]["rowFilter.user_context.skill_gaps"];
          priorities?: components["parameters"]["rowFilter.user_context.priorities"];
          onboarding_completed_at?: components["parameters"]["rowFilter.user_context.onboarding_completed_at"];
          created_at?: components["parameters"]["rowFilter.user_context.created_at"];
          updated_at?: components["parameters"]["rowFilter.user_context.updated_at"];
          input_projects?: components["parameters"]["rowFilter.user_context.input_projects"];
          input_work_style?: components["parameters"]["rowFilter.user_context.input_work_style"];
          input_challenges?: components["parameters"]["rowFilter.user_context.input_challenges"];
          input_help_focus?: components["parameters"]["rowFilter.user_context.input_help_focus"];
          help_priorities?: components["parameters"]["rowFilter.user_context.help_priorities"];
          focus_areas?: components["parameters"]["rowFilter.user_context.focus_areas"];
          productivity_challenges?: components["parameters"]["rowFilter.user_context.productivity_challenges"];
          preferred_work_hours?: components["parameters"]["rowFilter.user_context.preferred_work_hours"];
          communication_style?: components["parameters"]["rowFilter.user_context.communication_style"];
          organization_method?: components["parameters"]["rowFilter.user_context.organization_method"];
          /** @description Stores the last input that was parsed by LLM for projects category */
          last_parsed_input_projects?: components["parameters"]["rowFilter.user_context.last_parsed_input_projects"];
          /** @description Stores the last input that was parsed by LLM for work_style category */
          last_parsed_input_work_style?: components["parameters"]["rowFilter.user_context.last_parsed_input_work_style"];
          /** @description Stores the last input that was parsed by LLM for challenges category */
          last_parsed_input_challenges?: components["parameters"]["rowFilter.user_context.last_parsed_input_challenges"];
          /** @description Stores the last input that was parsed by LLM for help_focus category */
          last_parsed_input_help_focus?: components["parameters"]["rowFilter.user_context.last_parsed_input_help_focus"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["user_context"];
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    trace?: never;
  };
  "/admin_users": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          user_id?: components["parameters"]["rowFilter.admin_users.user_id"];
          granted_by?: components["parameters"]["rowFilter.admin_users.granted_by"];
          granted_at?: components["parameters"]["rowFilter.admin_users.granted_at"];
          created_at?: components["parameters"]["rowFilter.admin_users.created_at"];
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
          /** @description Ordering */
          order?: components["parameters"]["order"];
          /** @description Limiting and Pagination */
          offset?: components["parameters"]["offset"];
          /** @description Limiting and Pagination */
          limit?: components["parameters"]["limit"];
        };
        header?: {
          /** @description Limiting and Pagination */
          Range?: components["parameters"]["range"];
          /** @description Limiting and Pagination */
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          /** @description Preference */
          Prefer?: components["parameters"]["preferCount"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["admin_users"][];
            "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["admin_users"][];
            "application/vnd.pgrst.object+json": components["schemas"]["admin_users"][];
            "text/csv": components["schemas"]["admin_users"][];
          };
        };
        /** @description Partial Content */
        206: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: {
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferPost"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["admin_users"];
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          user_id?: components["parameters"]["rowFilter.admin_users.user_id"];
          granted_by?: components["parameters"]["rowFilter.admin_users.granted_by"];
          granted_at?: components["parameters"]["rowFilter.admin_users.granted_at"];
          created_at?: components["parameters"]["rowFilter.admin_users.created_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch: {
      parameters: {
        query?: {
          user_id?: components["parameters"]["rowFilter.admin_users.user_id"];
          granted_by?: components["parameters"]["rowFilter.admin_users.granted_by"];
          granted_at?: components["parameters"]["rowFilter.admin_users.granted_at"];
          created_at?: components["parameters"]["rowFilter.admin_users.created_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["admin_users"];
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    trace?: never;
  };
  "/cron_logs": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.cron_logs.id"];
          job_name?: components["parameters"]["rowFilter.cron_logs.job_name"];
          status?: components["parameters"]["rowFilter.cron_logs.status"];
          error_message?: components["parameters"]["rowFilter.cron_logs.error_message"];
          executed_at?: components["parameters"]["rowFilter.cron_logs.executed_at"];
          created_at?: components["parameters"]["rowFilter.cron_logs.created_at"];
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
          /** @description Ordering */
          order?: components["parameters"]["order"];
          /** @description Limiting and Pagination */
          offset?: components["parameters"]["offset"];
          /** @description Limiting and Pagination */
          limit?: components["parameters"]["limit"];
        };
        header?: {
          /** @description Limiting and Pagination */
          Range?: components["parameters"]["range"];
          /** @description Limiting and Pagination */
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          /** @description Preference */
          Prefer?: components["parameters"]["preferCount"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["cron_logs"][];
            "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["cron_logs"][];
            "application/vnd.pgrst.object+json": components["schemas"]["cron_logs"][];
            "text/csv": components["schemas"]["cron_logs"][];
          };
        };
        /** @description Partial Content */
        206: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: {
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferPost"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["cron_logs"];
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.cron_logs.id"];
          job_name?: components["parameters"]["rowFilter.cron_logs.job_name"];
          status?: components["parameters"]["rowFilter.cron_logs.status"];
          error_message?: components["parameters"]["rowFilter.cron_logs.error_message"];
          executed_at?: components["parameters"]["rowFilter.cron_logs.executed_at"];
          created_at?: components["parameters"]["rowFilter.cron_logs.created_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.cron_logs.id"];
          job_name?: components["parameters"]["rowFilter.cron_logs.job_name"];
          status?: components["parameters"]["rowFilter.cron_logs.status"];
          error_message?: components["parameters"]["rowFilter.cron_logs.error_message"];
          executed_at?: components["parameters"]["rowFilter.cron_logs.executed_at"];
          created_at?: components["parameters"]["rowFilter.cron_logs.created_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["cron_logs"];
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    trace?: never;
  };
  "/trial_statistics": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          active_trials?: components["parameters"]["rowFilter.trial_statistics.active_trials"];
          expired_trials?: components["parameters"]["rowFilter.trial_statistics.expired_trials"];
          active_subscriptions?: components["parameters"]["rowFilter.trial_statistics.active_subscriptions"];
          beta_users?: components["parameters"]["rowFilter.trial_statistics.beta_users"];
          avg_trial_length_days?: components["parameters"]["rowFilter.trial_statistics.avg_trial_length_days"];
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
          /** @description Ordering */
          order?: components["parameters"]["order"];
          /** @description Limiting and Pagination */
          offset?: components["parameters"]["offset"];
          /** @description Limiting and Pagination */
          limit?: components["parameters"]["limit"];
        };
        header?: {
          /** @description Limiting and Pagination */
          Range?: components["parameters"]["range"];
          /** @description Limiting and Pagination */
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          /** @description Preference */
          Prefer?: components["parameters"]["preferCount"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["trial_statistics"][];
            "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["trial_statistics"][];
            "application/vnd.pgrst.object+json": components["schemas"]["trial_statistics"][];
            "text/csv": components["schemas"]["trial_statistics"][];
          };
        };
        /** @description Partial Content */
        206: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/feedback_rate_limit": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.feedback_rate_limit.id"];
          ip_address?: components["parameters"]["rowFilter.feedback_rate_limit.ip_address"];
          submission_count?: components["parameters"]["rowFilter.feedback_rate_limit.submission_count"];
          first_submission?: components["parameters"]["rowFilter.feedback_rate_limit.first_submission"];
          last_submission?: components["parameters"]["rowFilter.feedback_rate_limit.last_submission"];
          is_blocked?: components["parameters"]["rowFilter.feedback_rate_limit.is_blocked"];
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
          /** @description Ordering */
          order?: components["parameters"]["order"];
          /** @description Limiting and Pagination */
          offset?: components["parameters"]["offset"];
          /** @description Limiting and Pagination */
          limit?: components["parameters"]["limit"];
        };
        header?: {
          /** @description Limiting and Pagination */
          Range?: components["parameters"]["range"];
          /** @description Limiting and Pagination */
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          /** @description Preference */
          Prefer?: components["parameters"]["preferCount"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["feedback_rate_limit"][];
            "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["feedback_rate_limit"][];
            "application/vnd.pgrst.object+json": components["schemas"]["feedback_rate_limit"][];
            "text/csv": components["schemas"]["feedback_rate_limit"][];
          };
        };
        /** @description Partial Content */
        206: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: {
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferPost"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["feedback_rate_limit"];
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.feedback_rate_limit.id"];
          ip_address?: components["parameters"]["rowFilter.feedback_rate_limit.ip_address"];
          submission_count?: components["parameters"]["rowFilter.feedback_rate_limit.submission_count"];
          first_submission?: components["parameters"]["rowFilter.feedback_rate_limit.first_submission"];
          last_submission?: components["parameters"]["rowFilter.feedback_rate_limit.last_submission"];
          is_blocked?: components["parameters"]["rowFilter.feedback_rate_limit.is_blocked"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.feedback_rate_limit.id"];
          ip_address?: components["parameters"]["rowFilter.feedback_rate_limit.ip_address"];
          submission_count?: components["parameters"]["rowFilter.feedback_rate_limit.submission_count"];
          first_submission?: components["parameters"]["rowFilter.feedback_rate_limit.first_submission"];
          last_submission?: components["parameters"]["rowFilter.feedback_rate_limit.last_submission"];
          is_blocked?: components["parameters"]["rowFilter.feedback_rate_limit.is_blocked"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["feedback_rate_limit"];
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    trace?: never;
  };
  "/subscription_plans": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.subscription_plans.id"];
          stripe_price_id?: components["parameters"]["rowFilter.subscription_plans.stripe_price_id"];
          name?: components["parameters"]["rowFilter.subscription_plans.name"];
          description?: components["parameters"]["rowFilter.subscription_plans.description"];
          price_cents?: components["parameters"]["rowFilter.subscription_plans.price_cents"];
          currency?: components["parameters"]["rowFilter.subscription_plans.currency"];
          billing_interval?: components["parameters"]["rowFilter.subscription_plans.billing_interval"];
          interval_count?: components["parameters"]["rowFilter.subscription_plans.interval_count"];
          features?: components["parameters"]["rowFilter.subscription_plans.features"];
          is_active?: components["parameters"]["rowFilter.subscription_plans.is_active"];
          created_at?: components["parameters"]["rowFilter.subscription_plans.created_at"];
          updated_at?: components["parameters"]["rowFilter.subscription_plans.updated_at"];
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
          /** @description Ordering */
          order?: components["parameters"]["order"];
          /** @description Limiting and Pagination */
          offset?: components["parameters"]["offset"];
          /** @description Limiting and Pagination */
          limit?: components["parameters"]["limit"];
        };
        header?: {
          /** @description Limiting and Pagination */
          Range?: components["parameters"]["range"];
          /** @description Limiting and Pagination */
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          /** @description Preference */
          Prefer?: components["parameters"]["preferCount"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["subscription_plans"][];
            "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["subscription_plans"][];
            "application/vnd.pgrst.object+json": components["schemas"]["subscription_plans"][];
            "text/csv": components["schemas"]["subscription_plans"][];
          };
        };
        /** @description Partial Content */
        206: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: {
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferPost"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["subscription_plans"];
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.subscription_plans.id"];
          stripe_price_id?: components["parameters"]["rowFilter.subscription_plans.stripe_price_id"];
          name?: components["parameters"]["rowFilter.subscription_plans.name"];
          description?: components["parameters"]["rowFilter.subscription_plans.description"];
          price_cents?: components["parameters"]["rowFilter.subscription_plans.price_cents"];
          currency?: components["parameters"]["rowFilter.subscription_plans.currency"];
          billing_interval?: components["parameters"]["rowFilter.subscription_plans.billing_interval"];
          interval_count?: components["parameters"]["rowFilter.subscription_plans.interval_count"];
          features?: components["parameters"]["rowFilter.subscription_plans.features"];
          is_active?: components["parameters"]["rowFilter.subscription_plans.is_active"];
          created_at?: components["parameters"]["rowFilter.subscription_plans.created_at"];
          updated_at?: components["parameters"]["rowFilter.subscription_plans.updated_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.subscription_plans.id"];
          stripe_price_id?: components["parameters"]["rowFilter.subscription_plans.stripe_price_id"];
          name?: components["parameters"]["rowFilter.subscription_plans.name"];
          description?: components["parameters"]["rowFilter.subscription_plans.description"];
          price_cents?: components["parameters"]["rowFilter.subscription_plans.price_cents"];
          currency?: components["parameters"]["rowFilter.subscription_plans.currency"];
          billing_interval?: components["parameters"]["rowFilter.subscription_plans.billing_interval"];
          interval_count?: components["parameters"]["rowFilter.subscription_plans.interval_count"];
          features?: components["parameters"]["rowFilter.subscription_plans.features"];
          is_active?: components["parameters"]["rowFilter.subscription_plans.is_active"];
          created_at?: components["parameters"]["rowFilter.subscription_plans.created_at"];
          updated_at?: components["parameters"]["rowFilter.subscription_plans.updated_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["subscription_plans"];
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    trace?: never;
  };
  "/queue_jobs_stats": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          status?: components["parameters"]["rowFilter.queue_jobs_stats.status"];
          job_type?: components["parameters"]["rowFilter.queue_jobs_stats.job_type"];
          count?: components["parameters"]["rowFilter.queue_jobs_stats.count"];
          oldest_job?: components["parameters"]["rowFilter.queue_jobs_stats.oldest_job"];
          newest_job?: components["parameters"]["rowFilter.queue_jobs_stats.newest_job"];
          avg_duration_seconds?: components["parameters"]["rowFilter.queue_jobs_stats.avg_duration_seconds"];
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
          /** @description Ordering */
          order?: components["parameters"]["order"];
          /** @description Limiting and Pagination */
          offset?: components["parameters"]["offset"];
          /** @description Limiting and Pagination */
          limit?: components["parameters"]["limit"];
        };
        header?: {
          /** @description Limiting and Pagination */
          Range?: components["parameters"]["range"];
          /** @description Limiting and Pagination */
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          /** @description Preference */
          Prefer?: components["parameters"]["preferCount"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["queue_jobs_stats"][];
            "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["queue_jobs_stats"][];
            "application/vnd.pgrst.object+json": components["schemas"]["queue_jobs_stats"][];
            "text/csv": components["schemas"]["queue_jobs_stats"][];
          };
        };
        /** @description Partial Content */
        206: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/brain_dumps": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.brain_dumps.id"];
          user_id?: components["parameters"]["rowFilter.brain_dumps.user_id"];
          title?: components["parameters"]["rowFilter.brain_dumps.title"];
          content?: components["parameters"]["rowFilter.brain_dumps.content"];
          created_at?: components["parameters"]["rowFilter.brain_dumps.created_at"];
          tags?: components["parameters"]["rowFilter.brain_dumps.tags"];
          updated_at?: components["parameters"]["rowFilter.brain_dumps.updated_at"];
          ai_summary?: components["parameters"]["rowFilter.brain_dumps.ai_summary"];
          ai_insights?: components["parameters"]["rowFilter.brain_dumps.ai_insights"];
          status?: components["parameters"]["rowFilter.brain_dumps.status"];
          project_id?: components["parameters"]["rowFilter.brain_dumps.project_id"];
          metaData?: components["parameters"]["rowFilter.brain_dumps.metaData"];
          parsed_results?: components["parameters"]["rowFilter.brain_dumps.parsed_results"];
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
          /** @description Ordering */
          order?: components["parameters"]["order"];
          /** @description Limiting and Pagination */
          offset?: components["parameters"]["offset"];
          /** @description Limiting and Pagination */
          limit?: components["parameters"]["limit"];
        };
        header?: {
          /** @description Limiting and Pagination */
          Range?: components["parameters"]["range"];
          /** @description Limiting and Pagination */
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          /** @description Preference */
          Prefer?: components["parameters"]["preferCount"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["brain_dumps"][];
            "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["brain_dumps"][];
            "application/vnd.pgrst.object+json": components["schemas"]["brain_dumps"][];
            "text/csv": components["schemas"]["brain_dumps"][];
          };
        };
        /** @description Partial Content */
        206: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: {
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferPost"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["brain_dumps"];
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.brain_dumps.id"];
          user_id?: components["parameters"]["rowFilter.brain_dumps.user_id"];
          title?: components["parameters"]["rowFilter.brain_dumps.title"];
          content?: components["parameters"]["rowFilter.brain_dumps.content"];
          created_at?: components["parameters"]["rowFilter.brain_dumps.created_at"];
          tags?: components["parameters"]["rowFilter.brain_dumps.tags"];
          updated_at?: components["parameters"]["rowFilter.brain_dumps.updated_at"];
          ai_summary?: components["parameters"]["rowFilter.brain_dumps.ai_summary"];
          ai_insights?: components["parameters"]["rowFilter.brain_dumps.ai_insights"];
          status?: components["parameters"]["rowFilter.brain_dumps.status"];
          project_id?: components["parameters"]["rowFilter.brain_dumps.project_id"];
          metaData?: components["parameters"]["rowFilter.brain_dumps.metaData"];
          parsed_results?: components["parameters"]["rowFilter.brain_dumps.parsed_results"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.brain_dumps.id"];
          user_id?: components["parameters"]["rowFilter.brain_dumps.user_id"];
          title?: components["parameters"]["rowFilter.brain_dumps.title"];
          content?: components["parameters"]["rowFilter.brain_dumps.content"];
          created_at?: components["parameters"]["rowFilter.brain_dumps.created_at"];
          tags?: components["parameters"]["rowFilter.brain_dumps.tags"];
          updated_at?: components["parameters"]["rowFilter.brain_dumps.updated_at"];
          ai_summary?: components["parameters"]["rowFilter.brain_dumps.ai_summary"];
          ai_insights?: components["parameters"]["rowFilter.brain_dumps.ai_insights"];
          status?: components["parameters"]["rowFilter.brain_dumps.status"];
          project_id?: components["parameters"]["rowFilter.brain_dumps.project_id"];
          metaData?: components["parameters"]["rowFilter.brain_dumps.metaData"];
          parsed_results?: components["parameters"]["rowFilter.brain_dumps.parsed_results"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["brain_dumps"];
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    trace?: never;
  };
  "/feedback": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.feedback.id"];
          user_id?: components["parameters"]["rowFilter.feedback.user_id"];
          category?: components["parameters"]["rowFilter.feedback.category"];
          rating?: components["parameters"]["rowFilter.feedback.rating"];
          feedback_text?: components["parameters"]["rowFilter.feedback.feedback_text"];
          user_email?: components["parameters"]["rowFilter.feedback.user_email"];
          user_ip?: components["parameters"]["rowFilter.feedback.user_ip"];
          user_agent?: components["parameters"]["rowFilter.feedback.user_agent"];
          status?: components["parameters"]["rowFilter.feedback.status"];
          created_at?: components["parameters"]["rowFilter.feedback.created_at"];
          updated_at?: components["parameters"]["rowFilter.feedback.updated_at"];
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
          /** @description Ordering */
          order?: components["parameters"]["order"];
          /** @description Limiting and Pagination */
          offset?: components["parameters"]["offset"];
          /** @description Limiting and Pagination */
          limit?: components["parameters"]["limit"];
        };
        header?: {
          /** @description Limiting and Pagination */
          Range?: components["parameters"]["range"];
          /** @description Limiting and Pagination */
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          /** @description Preference */
          Prefer?: components["parameters"]["preferCount"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["feedback"][];
            "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["feedback"][];
            "application/vnd.pgrst.object+json": components["schemas"]["feedback"][];
            "text/csv": components["schemas"]["feedback"][];
          };
        };
        /** @description Partial Content */
        206: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: {
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferPost"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["feedback"];
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.feedback.id"];
          user_id?: components["parameters"]["rowFilter.feedback.user_id"];
          category?: components["parameters"]["rowFilter.feedback.category"];
          rating?: components["parameters"]["rowFilter.feedback.rating"];
          feedback_text?: components["parameters"]["rowFilter.feedback.feedback_text"];
          user_email?: components["parameters"]["rowFilter.feedback.user_email"];
          user_ip?: components["parameters"]["rowFilter.feedback.user_ip"];
          user_agent?: components["parameters"]["rowFilter.feedback.user_agent"];
          status?: components["parameters"]["rowFilter.feedback.status"];
          created_at?: components["parameters"]["rowFilter.feedback.created_at"];
          updated_at?: components["parameters"]["rowFilter.feedback.updated_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.feedback.id"];
          user_id?: components["parameters"]["rowFilter.feedback.user_id"];
          category?: components["parameters"]["rowFilter.feedback.category"];
          rating?: components["parameters"]["rowFilter.feedback.rating"];
          feedback_text?: components["parameters"]["rowFilter.feedback.feedback_text"];
          user_email?: components["parameters"]["rowFilter.feedback.user_email"];
          user_ip?: components["parameters"]["rowFilter.feedback.user_ip"];
          user_agent?: components["parameters"]["rowFilter.feedback.user_agent"];
          status?: components["parameters"]["rowFilter.feedback.status"];
          created_at?: components["parameters"]["rowFilter.feedback.created_at"];
          updated_at?: components["parameters"]["rowFilter.feedback.updated_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["feedback"];
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    trace?: never;
  };
  "/projects": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.projects.id"];
          user_id?: components["parameters"]["rowFilter.projects.user_id"];
          name?: components["parameters"]["rowFilter.projects.name"];
          slug?: components["parameters"]["rowFilter.projects.slug"];
          description?: components["parameters"]["rowFilter.projects.description"];
          start_date?: components["parameters"]["rowFilter.projects.start_date"];
          end_date?: components["parameters"]["rowFilter.projects.end_date"];
          tags?: components["parameters"]["rowFilter.projects.tags"];
          created_at?: components["parameters"]["rowFilter.projects.created_at"];
          updated_at?: components["parameters"]["rowFilter.projects.updated_at"];
          context?: components["parameters"]["rowFilter.projects.context"];
          executive_summary?: components["parameters"]["rowFilter.projects.executive_summary"];
          status?: components["parameters"]["rowFilter.projects.status"];
          calendar_color_id?: components["parameters"]["rowFilter.projects.calendar_color_id"];
          calendar_sync_enabled?: components["parameters"]["rowFilter.projects.calendar_sync_enabled"];
          calendar_settings?: components["parameters"]["rowFilter.projects.calendar_settings"];
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
          /** @description Ordering */
          order?: components["parameters"]["order"];
          /** @description Limiting and Pagination */
          offset?: components["parameters"]["offset"];
          /** @description Limiting and Pagination */
          limit?: components["parameters"]["limit"];
        };
        header?: {
          /** @description Limiting and Pagination */
          Range?: components["parameters"]["range"];
          /** @description Limiting and Pagination */
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          /** @description Preference */
          Prefer?: components["parameters"]["preferCount"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["projects"][];
            "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["projects"][];
            "application/vnd.pgrst.object+json": components["schemas"]["projects"][];
            "text/csv": components["schemas"]["projects"][];
          };
        };
        /** @description Partial Content */
        206: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: {
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferPost"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["projects"];
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.projects.id"];
          user_id?: components["parameters"]["rowFilter.projects.user_id"];
          name?: components["parameters"]["rowFilter.projects.name"];
          slug?: components["parameters"]["rowFilter.projects.slug"];
          description?: components["parameters"]["rowFilter.projects.description"];
          start_date?: components["parameters"]["rowFilter.projects.start_date"];
          end_date?: components["parameters"]["rowFilter.projects.end_date"];
          tags?: components["parameters"]["rowFilter.projects.tags"];
          created_at?: components["parameters"]["rowFilter.projects.created_at"];
          updated_at?: components["parameters"]["rowFilter.projects.updated_at"];
          context?: components["parameters"]["rowFilter.projects.context"];
          executive_summary?: components["parameters"]["rowFilter.projects.executive_summary"];
          status?: components["parameters"]["rowFilter.projects.status"];
          calendar_color_id?: components["parameters"]["rowFilter.projects.calendar_color_id"];
          calendar_sync_enabled?: components["parameters"]["rowFilter.projects.calendar_sync_enabled"];
          calendar_settings?: components["parameters"]["rowFilter.projects.calendar_settings"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.projects.id"];
          user_id?: components["parameters"]["rowFilter.projects.user_id"];
          name?: components["parameters"]["rowFilter.projects.name"];
          slug?: components["parameters"]["rowFilter.projects.slug"];
          description?: components["parameters"]["rowFilter.projects.description"];
          start_date?: components["parameters"]["rowFilter.projects.start_date"];
          end_date?: components["parameters"]["rowFilter.projects.end_date"];
          tags?: components["parameters"]["rowFilter.projects.tags"];
          created_at?: components["parameters"]["rowFilter.projects.created_at"];
          updated_at?: components["parameters"]["rowFilter.projects.updated_at"];
          context?: components["parameters"]["rowFilter.projects.context"];
          executive_summary?: components["parameters"]["rowFilter.projects.executive_summary"];
          status?: components["parameters"]["rowFilter.projects.status"];
          calendar_color_id?: components["parameters"]["rowFilter.projects.calendar_color_id"];
          calendar_sync_enabled?: components["parameters"]["rowFilter.projects.calendar_sync_enabled"];
          calendar_settings?: components["parameters"]["rowFilter.projects.calendar_settings"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["projects"];
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    trace?: never;
  };
  "/calendar_themes": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Stores user-defined color themes for consistent calendar coloring across projects */
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.calendar_themes.id"];
          user_id?: components["parameters"]["rowFilter.calendar_themes.user_id"];
          theme_name?: components["parameters"]["rowFilter.calendar_themes.theme_name"];
          /** @description JSON object with keys like high_priority, medium_priority, low_priority, completed, overdue mapped to Google color IDs */
          color_mappings?: components["parameters"]["rowFilter.calendar_themes.color_mappings"];
          is_default?: components["parameters"]["rowFilter.calendar_themes.is_default"];
          created_at?: components["parameters"]["rowFilter.calendar_themes.created_at"];
          updated_at?: components["parameters"]["rowFilter.calendar_themes.updated_at"];
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
          /** @description Ordering */
          order?: components["parameters"]["order"];
          /** @description Limiting and Pagination */
          offset?: components["parameters"]["offset"];
          /** @description Limiting and Pagination */
          limit?: components["parameters"]["limit"];
        };
        header?: {
          /** @description Limiting and Pagination */
          Range?: components["parameters"]["range"];
          /** @description Limiting and Pagination */
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          /** @description Preference */
          Prefer?: components["parameters"]["preferCount"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["calendar_themes"][];
            "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["calendar_themes"][];
            "application/vnd.pgrst.object+json": components["schemas"]["calendar_themes"][];
            "text/csv": components["schemas"]["calendar_themes"][];
          };
        };
        /** @description Partial Content */
        206: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    /** Stores user-defined color themes for consistent calendar coloring across projects */
    post: {
      parameters: {
        query?: {
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferPost"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["calendar_themes"];
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    /** Stores user-defined color themes for consistent calendar coloring across projects */
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.calendar_themes.id"];
          user_id?: components["parameters"]["rowFilter.calendar_themes.user_id"];
          theme_name?: components["parameters"]["rowFilter.calendar_themes.theme_name"];
          /** @description JSON object with keys like high_priority, medium_priority, low_priority, completed, overdue mapped to Google color IDs */
          color_mappings?: components["parameters"]["rowFilter.calendar_themes.color_mappings"];
          is_default?: components["parameters"]["rowFilter.calendar_themes.is_default"];
          created_at?: components["parameters"]["rowFilter.calendar_themes.created_at"];
          updated_at?: components["parameters"]["rowFilter.calendar_themes.updated_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    /** Stores user-defined color themes for consistent calendar coloring across projects */
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.calendar_themes.id"];
          user_id?: components["parameters"]["rowFilter.calendar_themes.user_id"];
          theme_name?: components["parameters"]["rowFilter.calendar_themes.theme_name"];
          /** @description JSON object with keys like high_priority, medium_priority, low_priority, completed, overdue mapped to Google color IDs */
          color_mappings?: components["parameters"]["rowFilter.calendar_themes.color_mappings"];
          is_default?: components["parameters"]["rowFilter.calendar_themes.is_default"];
          created_at?: components["parameters"]["rowFilter.calendar_themes.created_at"];
          updated_at?: components["parameters"]["rowFilter.calendar_themes.updated_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["calendar_themes"];
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    trace?: never;
  };
  "/user_calendar_preferences": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.user_calendar_preferences.id"];
          user_id?: components["parameters"]["rowFilter.user_calendar_preferences.user_id"];
          work_start_time?: components["parameters"]["rowFilter.user_calendar_preferences.work_start_time"];
          work_end_time?: components["parameters"]["rowFilter.user_calendar_preferences.work_end_time"];
          working_days?: components["parameters"]["rowFilter.user_calendar_preferences.working_days"];
          default_task_duration_minutes?: components["parameters"]["rowFilter.user_calendar_preferences.default_task_duration_minutes"];
          min_task_duration_minutes?: components["parameters"]["rowFilter.user_calendar_preferences.min_task_duration_minutes"];
          max_task_duration_minutes?: components["parameters"]["rowFilter.user_calendar_preferences.max_task_duration_minutes"];
          exclude_holidays?: components["parameters"]["rowFilter.user_calendar_preferences.exclude_holidays"];
          holiday_country_code?: components["parameters"]["rowFilter.user_calendar_preferences.holiday_country_code"];
          timezone?: components["parameters"]["rowFilter.user_calendar_preferences.timezone"];
          prefer_morning_for_important_tasks?: components["parameters"]["rowFilter.user_calendar_preferences.prefer_morning_for_important_tasks"];
          created_at?: components["parameters"]["rowFilter.user_calendar_preferences.created_at"];
          updated_at?: components["parameters"]["rowFilter.user_calendar_preferences.updated_at"];
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
          /** @description Ordering */
          order?: components["parameters"]["order"];
          /** @description Limiting and Pagination */
          offset?: components["parameters"]["offset"];
          /** @description Limiting and Pagination */
          limit?: components["parameters"]["limit"];
        };
        header?: {
          /** @description Limiting and Pagination */
          Range?: components["parameters"]["range"];
          /** @description Limiting and Pagination */
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          /** @description Preference */
          Prefer?: components["parameters"]["preferCount"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["user_calendar_preferences"][];
            "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["user_calendar_preferences"][];
            "application/vnd.pgrst.object+json": components["schemas"]["user_calendar_preferences"][];
            "text/csv": components["schemas"]["user_calendar_preferences"][];
          };
        };
        /** @description Partial Content */
        206: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: {
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferPost"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["user_calendar_preferences"];
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.user_calendar_preferences.id"];
          user_id?: components["parameters"]["rowFilter.user_calendar_preferences.user_id"];
          work_start_time?: components["parameters"]["rowFilter.user_calendar_preferences.work_start_time"];
          work_end_time?: components["parameters"]["rowFilter.user_calendar_preferences.work_end_time"];
          working_days?: components["parameters"]["rowFilter.user_calendar_preferences.working_days"];
          default_task_duration_minutes?: components["parameters"]["rowFilter.user_calendar_preferences.default_task_duration_minutes"];
          min_task_duration_minutes?: components["parameters"]["rowFilter.user_calendar_preferences.min_task_duration_minutes"];
          max_task_duration_minutes?: components["parameters"]["rowFilter.user_calendar_preferences.max_task_duration_minutes"];
          exclude_holidays?: components["parameters"]["rowFilter.user_calendar_preferences.exclude_holidays"];
          holiday_country_code?: components["parameters"]["rowFilter.user_calendar_preferences.holiday_country_code"];
          timezone?: components["parameters"]["rowFilter.user_calendar_preferences.timezone"];
          prefer_morning_for_important_tasks?: components["parameters"]["rowFilter.user_calendar_preferences.prefer_morning_for_important_tasks"];
          created_at?: components["parameters"]["rowFilter.user_calendar_preferences.created_at"];
          updated_at?: components["parameters"]["rowFilter.user_calendar_preferences.updated_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.user_calendar_preferences.id"];
          user_id?: components["parameters"]["rowFilter.user_calendar_preferences.user_id"];
          work_start_time?: components["parameters"]["rowFilter.user_calendar_preferences.work_start_time"];
          work_end_time?: components["parameters"]["rowFilter.user_calendar_preferences.work_end_time"];
          working_days?: components["parameters"]["rowFilter.user_calendar_preferences.working_days"];
          default_task_duration_minutes?: components["parameters"]["rowFilter.user_calendar_preferences.default_task_duration_minutes"];
          min_task_duration_minutes?: components["parameters"]["rowFilter.user_calendar_preferences.min_task_duration_minutes"];
          max_task_duration_minutes?: components["parameters"]["rowFilter.user_calendar_preferences.max_task_duration_minutes"];
          exclude_holidays?: components["parameters"]["rowFilter.user_calendar_preferences.exclude_holidays"];
          holiday_country_code?: components["parameters"]["rowFilter.user_calendar_preferences.holiday_country_code"];
          timezone?: components["parameters"]["rowFilter.user_calendar_preferences.timezone"];
          prefer_morning_for_important_tasks?: components["parameters"]["rowFilter.user_calendar_preferences.prefer_morning_for_important_tasks"];
          created_at?: components["parameters"]["rowFilter.user_calendar_preferences.created_at"];
          updated_at?: components["parameters"]["rowFilter.user_calendar_preferences.updated_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["user_calendar_preferences"];
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    trace?: never;
  };
  "/brain_dump_links": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.brain_dump_links.id"];
          created_at?: components["parameters"]["rowFilter.brain_dump_links.created_at"];
          brain_dump_id?: components["parameters"]["rowFilter.brain_dump_links.brain_dump_id"];
          project_id?: components["parameters"]["rowFilter.brain_dump_links.project_id"];
          note_id?: components["parameters"]["rowFilter.brain_dump_links.note_id"];
          task_id?: components["parameters"]["rowFilter.brain_dump_links.task_id"];
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
          /** @description Ordering */
          order?: components["parameters"]["order"];
          /** @description Limiting and Pagination */
          offset?: components["parameters"]["offset"];
          /** @description Limiting and Pagination */
          limit?: components["parameters"]["limit"];
        };
        header?: {
          /** @description Limiting and Pagination */
          Range?: components["parameters"]["range"];
          /** @description Limiting and Pagination */
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          /** @description Preference */
          Prefer?: components["parameters"]["preferCount"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["brain_dump_links"][];
            "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["brain_dump_links"][];
            "application/vnd.pgrst.object+json": components["schemas"]["brain_dump_links"][];
            "text/csv": components["schemas"]["brain_dump_links"][];
          };
        };
        /** @description Partial Content */
        206: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: {
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferPost"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["brain_dump_links"];
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.brain_dump_links.id"];
          created_at?: components["parameters"]["rowFilter.brain_dump_links.created_at"];
          brain_dump_id?: components["parameters"]["rowFilter.brain_dump_links.brain_dump_id"];
          project_id?: components["parameters"]["rowFilter.brain_dump_links.project_id"];
          note_id?: components["parameters"]["rowFilter.brain_dump_links.note_id"];
          task_id?: components["parameters"]["rowFilter.brain_dump_links.task_id"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.brain_dump_links.id"];
          created_at?: components["parameters"]["rowFilter.brain_dump_links.created_at"];
          brain_dump_id?: components["parameters"]["rowFilter.brain_dump_links.brain_dump_id"];
          project_id?: components["parameters"]["rowFilter.brain_dump_links.project_id"];
          note_id?: components["parameters"]["rowFilter.brain_dump_links.note_id"];
          task_id?: components["parameters"]["rowFilter.brain_dump_links.task_id"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["brain_dump_links"];
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    trace?: never;
  };
  "/invoices": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.invoices.id"];
          user_id?: components["parameters"]["rowFilter.invoices.user_id"];
          stripe_invoice_id?: components["parameters"]["rowFilter.invoices.stripe_invoice_id"];
          stripe_customer_id?: components["parameters"]["rowFilter.invoices.stripe_customer_id"];
          subscription_id?: components["parameters"]["rowFilter.invoices.subscription_id"];
          amount_paid?: components["parameters"]["rowFilter.invoices.amount_paid"];
          amount_due?: components["parameters"]["rowFilter.invoices.amount_due"];
          currency?: components["parameters"]["rowFilter.invoices.currency"];
          status?: components["parameters"]["rowFilter.invoices.status"];
          invoice_pdf?: components["parameters"]["rowFilter.invoices.invoice_pdf"];
          hosted_invoice_url?: components["parameters"]["rowFilter.invoices.hosted_invoice_url"];
          created_at?: components["parameters"]["rowFilter.invoices.created_at"];
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
          /** @description Ordering */
          order?: components["parameters"]["order"];
          /** @description Limiting and Pagination */
          offset?: components["parameters"]["offset"];
          /** @description Limiting and Pagination */
          limit?: components["parameters"]["limit"];
        };
        header?: {
          /** @description Limiting and Pagination */
          Range?: components["parameters"]["range"];
          /** @description Limiting and Pagination */
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          /** @description Preference */
          Prefer?: components["parameters"]["preferCount"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["invoices"][];
            "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["invoices"][];
            "application/vnd.pgrst.object+json": components["schemas"]["invoices"][];
            "text/csv": components["schemas"]["invoices"][];
          };
        };
        /** @description Partial Content */
        206: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: {
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferPost"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["invoices"];
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.invoices.id"];
          user_id?: components["parameters"]["rowFilter.invoices.user_id"];
          stripe_invoice_id?: components["parameters"]["rowFilter.invoices.stripe_invoice_id"];
          stripe_customer_id?: components["parameters"]["rowFilter.invoices.stripe_customer_id"];
          subscription_id?: components["parameters"]["rowFilter.invoices.subscription_id"];
          amount_paid?: components["parameters"]["rowFilter.invoices.amount_paid"];
          amount_due?: components["parameters"]["rowFilter.invoices.amount_due"];
          currency?: components["parameters"]["rowFilter.invoices.currency"];
          status?: components["parameters"]["rowFilter.invoices.status"];
          invoice_pdf?: components["parameters"]["rowFilter.invoices.invoice_pdf"];
          hosted_invoice_url?: components["parameters"]["rowFilter.invoices.hosted_invoice_url"];
          created_at?: components["parameters"]["rowFilter.invoices.created_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.invoices.id"];
          user_id?: components["parameters"]["rowFilter.invoices.user_id"];
          stripe_invoice_id?: components["parameters"]["rowFilter.invoices.stripe_invoice_id"];
          stripe_customer_id?: components["parameters"]["rowFilter.invoices.stripe_customer_id"];
          subscription_id?: components["parameters"]["rowFilter.invoices.subscription_id"];
          amount_paid?: components["parameters"]["rowFilter.invoices.amount_paid"];
          amount_due?: components["parameters"]["rowFilter.invoices.amount_due"];
          currency?: components["parameters"]["rowFilter.invoices.currency"];
          status?: components["parameters"]["rowFilter.invoices.status"];
          invoice_pdf?: components["parameters"]["rowFilter.invoices.invoice_pdf"];
          hosted_invoice_url?: components["parameters"]["rowFilter.invoices.hosted_invoice_url"];
          created_at?: components["parameters"]["rowFilter.invoices.created_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["invoices"];
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    trace?: never;
  };
  "/visitors": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.visitors.id"];
          visitor_id?: components["parameters"]["rowFilter.visitors.visitor_id"];
          ip_address?: components["parameters"]["rowFilter.visitors.ip_address"];
          user_agent?: components["parameters"]["rowFilter.visitors.user_agent"];
          created_at?: components["parameters"]["rowFilter.visitors.created_at"];
          updated_at?: components["parameters"]["rowFilter.visitors.updated_at"];
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
          /** @description Ordering */
          order?: components["parameters"]["order"];
          /** @description Limiting and Pagination */
          offset?: components["parameters"]["offset"];
          /** @description Limiting and Pagination */
          limit?: components["parameters"]["limit"];
        };
        header?: {
          /** @description Limiting and Pagination */
          Range?: components["parameters"]["range"];
          /** @description Limiting and Pagination */
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          /** @description Preference */
          Prefer?: components["parameters"]["preferCount"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["visitors"][];
            "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["visitors"][];
            "application/vnd.pgrst.object+json": components["schemas"]["visitors"][];
            "text/csv": components["schemas"]["visitors"][];
          };
        };
        /** @description Partial Content */
        206: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: {
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferPost"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["visitors"];
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.visitors.id"];
          visitor_id?: components["parameters"]["rowFilter.visitors.visitor_id"];
          ip_address?: components["parameters"]["rowFilter.visitors.ip_address"];
          user_agent?: components["parameters"]["rowFilter.visitors.user_agent"];
          created_at?: components["parameters"]["rowFilter.visitors.created_at"];
          updated_at?: components["parameters"]["rowFilter.visitors.updated_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.visitors.id"];
          visitor_id?: components["parameters"]["rowFilter.visitors.visitor_id"];
          ip_address?: components["parameters"]["rowFilter.visitors.ip_address"];
          user_agent?: components["parameters"]["rowFilter.visitors.user_agent"];
          created_at?: components["parameters"]["rowFilter.visitors.created_at"];
          updated_at?: components["parameters"]["rowFilter.visitors.updated_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["visitors"];
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    trace?: never;
  };
  "/trial_reminders": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.trial_reminders.id"];
          user_id?: components["parameters"]["rowFilter.trial_reminders.user_id"];
          reminder_type?: components["parameters"]["rowFilter.trial_reminders.reminder_type"];
          sent_at?: components["parameters"]["rowFilter.trial_reminders.sent_at"];
          created_at?: components["parameters"]["rowFilter.trial_reminders.created_at"];
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
          /** @description Ordering */
          order?: components["parameters"]["order"];
          /** @description Limiting and Pagination */
          offset?: components["parameters"]["offset"];
          /** @description Limiting and Pagination */
          limit?: components["parameters"]["limit"];
        };
        header?: {
          /** @description Limiting and Pagination */
          Range?: components["parameters"]["range"];
          /** @description Limiting and Pagination */
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          /** @description Preference */
          Prefer?: components["parameters"]["preferCount"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["trial_reminders"][];
            "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["trial_reminders"][];
            "application/vnd.pgrst.object+json": components["schemas"]["trial_reminders"][];
            "text/csv": components["schemas"]["trial_reminders"][];
          };
        };
        /** @description Partial Content */
        206: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: {
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferPost"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["trial_reminders"];
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.trial_reminders.id"];
          user_id?: components["parameters"]["rowFilter.trial_reminders.user_id"];
          reminder_type?: components["parameters"]["rowFilter.trial_reminders.reminder_type"];
          sent_at?: components["parameters"]["rowFilter.trial_reminders.sent_at"];
          created_at?: components["parameters"]["rowFilter.trial_reminders.created_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.trial_reminders.id"];
          user_id?: components["parameters"]["rowFilter.trial_reminders.user_id"];
          reminder_type?: components["parameters"]["rowFilter.trial_reminders.reminder_type"];
          sent_at?: components["parameters"]["rowFilter.trial_reminders.sent_at"];
          created_at?: components["parameters"]["rowFilter.trial_reminders.created_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["trial_reminders"];
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    trace?: never;
  };
  "/generated_phases": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Stores individual phases generated by AI, pending user approval */
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.generated_phases.id"];
          generation_id?: components["parameters"]["rowFilter.generated_phases.generation_id"];
          project_id?: components["parameters"]["rowFilter.generated_phases.project_id"];
          name?: components["parameters"]["rowFilter.generated_phases.name"];
          description?: components["parameters"]["rowFilter.generated_phases.description"];
          objectives?: components["parameters"]["rowFilter.generated_phases.objectives"];
          deliverables?: components["parameters"]["rowFilter.generated_phases.deliverables"];
          success_criteria?: components["parameters"]["rowFilter.generated_phases.success_criteria"];
          suggested_duration_days?: components["parameters"]["rowFilter.generated_phases.suggested_duration_days"];
          suggested_start_date?: components["parameters"]["rowFilter.generated_phases.suggested_start_date"];
          suggested_end_date?: components["parameters"]["rowFilter.generated_phases.suggested_end_date"];
          suggested_order?: components["parameters"]["rowFilter.generated_phases.suggested_order"];
          confidence_score?: components["parameters"]["rowFilter.generated_phases.confidence_score"];
          is_approved?: components["parameters"]["rowFilter.generated_phases.is_approved"];
          approved_at?: components["parameters"]["rowFilter.generated_phases.approved_at"];
          approved_by?: components["parameters"]["rowFilter.generated_phases.approved_by"];
          phase_id?: components["parameters"]["rowFilter.generated_phases.phase_id"];
          metadata?: components["parameters"]["rowFilter.generated_phases.metadata"];
          created_at?: components["parameters"]["rowFilter.generated_phases.created_at"];
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
          /** @description Ordering */
          order?: components["parameters"]["order"];
          /** @description Limiting and Pagination */
          offset?: components["parameters"]["offset"];
          /** @description Limiting and Pagination */
          limit?: components["parameters"]["limit"];
        };
        header?: {
          /** @description Limiting and Pagination */
          Range?: components["parameters"]["range"];
          /** @description Limiting and Pagination */
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          /** @description Preference */
          Prefer?: components["parameters"]["preferCount"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["generated_phases"][];
            "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["generated_phases"][];
            "application/vnd.pgrst.object+json": components["schemas"]["generated_phases"][];
            "text/csv": components["schemas"]["generated_phases"][];
          };
        };
        /** @description Partial Content */
        206: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    /** Stores individual phases generated by AI, pending user approval */
    post: {
      parameters: {
        query?: {
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferPost"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["generated_phases"];
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    /** Stores individual phases generated by AI, pending user approval */
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.generated_phases.id"];
          generation_id?: components["parameters"]["rowFilter.generated_phases.generation_id"];
          project_id?: components["parameters"]["rowFilter.generated_phases.project_id"];
          name?: components["parameters"]["rowFilter.generated_phases.name"];
          description?: components["parameters"]["rowFilter.generated_phases.description"];
          objectives?: components["parameters"]["rowFilter.generated_phases.objectives"];
          deliverables?: components["parameters"]["rowFilter.generated_phases.deliverables"];
          success_criteria?: components["parameters"]["rowFilter.generated_phases.success_criteria"];
          suggested_duration_days?: components["parameters"]["rowFilter.generated_phases.suggested_duration_days"];
          suggested_start_date?: components["parameters"]["rowFilter.generated_phases.suggested_start_date"];
          suggested_end_date?: components["parameters"]["rowFilter.generated_phases.suggested_end_date"];
          suggested_order?: components["parameters"]["rowFilter.generated_phases.suggested_order"];
          confidence_score?: components["parameters"]["rowFilter.generated_phases.confidence_score"];
          is_approved?: components["parameters"]["rowFilter.generated_phases.is_approved"];
          approved_at?: components["parameters"]["rowFilter.generated_phases.approved_at"];
          approved_by?: components["parameters"]["rowFilter.generated_phases.approved_by"];
          phase_id?: components["parameters"]["rowFilter.generated_phases.phase_id"];
          metadata?: components["parameters"]["rowFilter.generated_phases.metadata"];
          created_at?: components["parameters"]["rowFilter.generated_phases.created_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    /** Stores individual phases generated by AI, pending user approval */
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.generated_phases.id"];
          generation_id?: components["parameters"]["rowFilter.generated_phases.generation_id"];
          project_id?: components["parameters"]["rowFilter.generated_phases.project_id"];
          name?: components["parameters"]["rowFilter.generated_phases.name"];
          description?: components["parameters"]["rowFilter.generated_phases.description"];
          objectives?: components["parameters"]["rowFilter.generated_phases.objectives"];
          deliverables?: components["parameters"]["rowFilter.generated_phases.deliverables"];
          success_criteria?: components["parameters"]["rowFilter.generated_phases.success_criteria"];
          suggested_duration_days?: components["parameters"]["rowFilter.generated_phases.suggested_duration_days"];
          suggested_start_date?: components["parameters"]["rowFilter.generated_phases.suggested_start_date"];
          suggested_end_date?: components["parameters"]["rowFilter.generated_phases.suggested_end_date"];
          suggested_order?: components["parameters"]["rowFilter.generated_phases.suggested_order"];
          confidence_score?: components["parameters"]["rowFilter.generated_phases.confidence_score"];
          is_approved?: components["parameters"]["rowFilter.generated_phases.is_approved"];
          approved_at?: components["parameters"]["rowFilter.generated_phases.approved_at"];
          approved_by?: components["parameters"]["rowFilter.generated_phases.approved_by"];
          phase_id?: components["parameters"]["rowFilter.generated_phases.phase_id"];
          metadata?: components["parameters"]["rowFilter.generated_phases.metadata"];
          created_at?: components["parameters"]["rowFilter.generated_phases.created_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["generated_phases"];
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    trace?: never;
  };
  "/question_templates": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.question_templates.id"];
          template?: components["parameters"]["rowFilter.question_templates.template"];
          category?: components["parameters"]["rowFilter.question_templates.category"];
          conditions?: components["parameters"]["rowFilter.question_templates.conditions"];
          variables?: components["parameters"]["rowFilter.question_templates.variables"];
          effectiveness_score?: components["parameters"]["rowFilter.question_templates.effectiveness_score"];
          usage_count?: components["parameters"]["rowFilter.question_templates.usage_count"];
          created_at?: components["parameters"]["rowFilter.question_templates.created_at"];
          updated_at?: components["parameters"]["rowFilter.question_templates.updated_at"];
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
          /** @description Ordering */
          order?: components["parameters"]["order"];
          /** @description Limiting and Pagination */
          offset?: components["parameters"]["offset"];
          /** @description Limiting and Pagination */
          limit?: components["parameters"]["limit"];
        };
        header?: {
          /** @description Limiting and Pagination */
          Range?: components["parameters"]["range"];
          /** @description Limiting and Pagination */
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          /** @description Preference */
          Prefer?: components["parameters"]["preferCount"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["question_templates"][];
            "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["question_templates"][];
            "application/vnd.pgrst.object+json": components["schemas"]["question_templates"][];
            "text/csv": components["schemas"]["question_templates"][];
          };
        };
        /** @description Partial Content */
        206: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: {
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferPost"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["question_templates"];
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.question_templates.id"];
          template?: components["parameters"]["rowFilter.question_templates.template"];
          category?: components["parameters"]["rowFilter.question_templates.category"];
          conditions?: components["parameters"]["rowFilter.question_templates.conditions"];
          variables?: components["parameters"]["rowFilter.question_templates.variables"];
          effectiveness_score?: components["parameters"]["rowFilter.question_templates.effectiveness_score"];
          usage_count?: components["parameters"]["rowFilter.question_templates.usage_count"];
          created_at?: components["parameters"]["rowFilter.question_templates.created_at"];
          updated_at?: components["parameters"]["rowFilter.question_templates.updated_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.question_templates.id"];
          template?: components["parameters"]["rowFilter.question_templates.template"];
          category?: components["parameters"]["rowFilter.question_templates.category"];
          conditions?: components["parameters"]["rowFilter.question_templates.conditions"];
          variables?: components["parameters"]["rowFilter.question_templates.variables"];
          effectiveness_score?: components["parameters"]["rowFilter.question_templates.effectiveness_score"];
          usage_count?: components["parameters"]["rowFilter.question_templates.usage_count"];
          created_at?: components["parameters"]["rowFilter.question_templates.created_at"];
          updated_at?: components["parameters"]["rowFilter.question_templates.updated_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["question_templates"];
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    trace?: never;
  };
  "/phases": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.phases.id"];
          project_id?: components["parameters"]["rowFilter.phases.project_id"];
          user_id?: components["parameters"]["rowFilter.phases.user_id"];
          name?: components["parameters"]["rowFilter.phases.name"];
          description?: components["parameters"]["rowFilter.phases.description"];
          start_date?: components["parameters"]["rowFilter.phases.start_date"];
          end_date?: components["parameters"]["rowFilter.phases.end_date"];
          /** @description Ordering */
          order?: components["parameters"]["order"];
          created_at?: components["parameters"]["rowFilter.phases.created_at"];
          updated_at?: components["parameters"]["rowFilter.phases.updated_at"];
          /** @description Method used for task scheduling: phases_only, schedule_in_phases, or calendar_optimized */
          scheduling_method?: components["parameters"]["rowFilter.phases.scheduling_method"];
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
          /** @description Limiting and Pagination */
          offset?: components["parameters"]["offset"];
          /** @description Limiting and Pagination */
          limit?: components["parameters"]["limit"];
        };
        header?: {
          /** @description Limiting and Pagination */
          Range?: components["parameters"]["range"];
          /** @description Limiting and Pagination */
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          /** @description Preference */
          Prefer?: components["parameters"]["preferCount"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["phases"][];
            "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["phases"][];
            "application/vnd.pgrst.object+json": components["schemas"]["phases"][];
            "text/csv": components["schemas"]["phases"][];
          };
        };
        /** @description Partial Content */
        206: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: {
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferPost"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["phases"];
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.phases.id"];
          project_id?: components["parameters"]["rowFilter.phases.project_id"];
          user_id?: components["parameters"]["rowFilter.phases.user_id"];
          name?: components["parameters"]["rowFilter.phases.name"];
          description?: components["parameters"]["rowFilter.phases.description"];
          start_date?: components["parameters"]["rowFilter.phases.start_date"];
          end_date?: components["parameters"]["rowFilter.phases.end_date"];
          order?: components["parameters"]["rowFilter.phases.order"];
          created_at?: components["parameters"]["rowFilter.phases.created_at"];
          updated_at?: components["parameters"]["rowFilter.phases.updated_at"];
          /** @description Method used for task scheduling: phases_only, schedule_in_phases, or calendar_optimized */
          scheduling_method?: components["parameters"]["rowFilter.phases.scheduling_method"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.phases.id"];
          project_id?: components["parameters"]["rowFilter.phases.project_id"];
          user_id?: components["parameters"]["rowFilter.phases.user_id"];
          name?: components["parameters"]["rowFilter.phases.name"];
          description?: components["parameters"]["rowFilter.phases.description"];
          start_date?: components["parameters"]["rowFilter.phases.start_date"];
          end_date?: components["parameters"]["rowFilter.phases.end_date"];
          order?: components["parameters"]["rowFilter.phases.order"];
          created_at?: components["parameters"]["rowFilter.phases.created_at"];
          updated_at?: components["parameters"]["rowFilter.phases.updated_at"];
          /** @description Method used for task scheduling: phases_only, schedule_in_phases, or calendar_optimized */
          scheduling_method?: components["parameters"]["rowFilter.phases.scheduling_method"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["phases"];
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    trace?: never;
  };
  "/beta_members": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.beta_members.id"];
          user_id?: components["parameters"]["rowFilter.beta_members.user_id"];
          signup_id?: components["parameters"]["rowFilter.beta_members.signup_id"];
          full_name?: components["parameters"]["rowFilter.beta_members.full_name"];
          email?: components["parameters"]["rowFilter.beta_members.email"];
          job_title?: components["parameters"]["rowFilter.beta_members.job_title"];
          company_name?: components["parameters"]["rowFilter.beta_members.company_name"];
          joined_at?: components["parameters"]["rowFilter.beta_members.joined_at"];
          beta_tier?: components["parameters"]["rowFilter.beta_members.beta_tier"];
          access_level?: components["parameters"]["rowFilter.beta_members.access_level"];
          last_active_at?: components["parameters"]["rowFilter.beta_members.last_active_at"];
          total_feedback_submitted?: components["parameters"]["rowFilter.beta_members.total_feedback_submitted"];
          total_features_requested?: components["parameters"]["rowFilter.beta_members.total_features_requested"];
          total_calls_attended?: components["parameters"]["rowFilter.beta_members.total_calls_attended"];
          has_lifetime_pricing?: components["parameters"]["rowFilter.beta_members.has_lifetime_pricing"];
          discount_percentage?: components["parameters"]["rowFilter.beta_members.discount_percentage"];
          early_access_features?: components["parameters"]["rowFilter.beta_members.early_access_features"];
          wants_weekly_calls?: components["parameters"]["rowFilter.beta_members.wants_weekly_calls"];
          wants_community_access?: components["parameters"]["rowFilter.beta_members.wants_community_access"];
          wants_feature_updates?: components["parameters"]["rowFilter.beta_members.wants_feature_updates"];
          user_timezone?: components["parameters"]["rowFilter.beta_members.user_timezone"];
          is_active?: components["parameters"]["rowFilter.beta_members.is_active"];
          deactivated_at?: components["parameters"]["rowFilter.beta_members.deactivated_at"];
          deactivation_reason?: components["parameters"]["rowFilter.beta_members.deactivation_reason"];
          created_at?: components["parameters"]["rowFilter.beta_members.created_at"];
          updated_at?: components["parameters"]["rowFilter.beta_members.updated_at"];
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
          /** @description Ordering */
          order?: components["parameters"]["order"];
          /** @description Limiting and Pagination */
          offset?: components["parameters"]["offset"];
          /** @description Limiting and Pagination */
          limit?: components["parameters"]["limit"];
        };
        header?: {
          /** @description Limiting and Pagination */
          Range?: components["parameters"]["range"];
          /** @description Limiting and Pagination */
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          /** @description Preference */
          Prefer?: components["parameters"]["preferCount"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["beta_members"][];
            "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["beta_members"][];
            "application/vnd.pgrst.object+json": components["schemas"]["beta_members"][];
            "text/csv": components["schemas"]["beta_members"][];
          };
        };
        /** @description Partial Content */
        206: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: {
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferPost"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["beta_members"];
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.beta_members.id"];
          user_id?: components["parameters"]["rowFilter.beta_members.user_id"];
          signup_id?: components["parameters"]["rowFilter.beta_members.signup_id"];
          full_name?: components["parameters"]["rowFilter.beta_members.full_name"];
          email?: components["parameters"]["rowFilter.beta_members.email"];
          job_title?: components["parameters"]["rowFilter.beta_members.job_title"];
          company_name?: components["parameters"]["rowFilter.beta_members.company_name"];
          joined_at?: components["parameters"]["rowFilter.beta_members.joined_at"];
          beta_tier?: components["parameters"]["rowFilter.beta_members.beta_tier"];
          access_level?: components["parameters"]["rowFilter.beta_members.access_level"];
          last_active_at?: components["parameters"]["rowFilter.beta_members.last_active_at"];
          total_feedback_submitted?: components["parameters"]["rowFilter.beta_members.total_feedback_submitted"];
          total_features_requested?: components["parameters"]["rowFilter.beta_members.total_features_requested"];
          total_calls_attended?: components["parameters"]["rowFilter.beta_members.total_calls_attended"];
          has_lifetime_pricing?: components["parameters"]["rowFilter.beta_members.has_lifetime_pricing"];
          discount_percentage?: components["parameters"]["rowFilter.beta_members.discount_percentage"];
          early_access_features?: components["parameters"]["rowFilter.beta_members.early_access_features"];
          wants_weekly_calls?: components["parameters"]["rowFilter.beta_members.wants_weekly_calls"];
          wants_community_access?: components["parameters"]["rowFilter.beta_members.wants_community_access"];
          wants_feature_updates?: components["parameters"]["rowFilter.beta_members.wants_feature_updates"];
          user_timezone?: components["parameters"]["rowFilter.beta_members.user_timezone"];
          is_active?: components["parameters"]["rowFilter.beta_members.is_active"];
          deactivated_at?: components["parameters"]["rowFilter.beta_members.deactivated_at"];
          deactivation_reason?: components["parameters"]["rowFilter.beta_members.deactivation_reason"];
          created_at?: components["parameters"]["rowFilter.beta_members.created_at"];
          updated_at?: components["parameters"]["rowFilter.beta_members.updated_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.beta_members.id"];
          user_id?: components["parameters"]["rowFilter.beta_members.user_id"];
          signup_id?: components["parameters"]["rowFilter.beta_members.signup_id"];
          full_name?: components["parameters"]["rowFilter.beta_members.full_name"];
          email?: components["parameters"]["rowFilter.beta_members.email"];
          job_title?: components["parameters"]["rowFilter.beta_members.job_title"];
          company_name?: components["parameters"]["rowFilter.beta_members.company_name"];
          joined_at?: components["parameters"]["rowFilter.beta_members.joined_at"];
          beta_tier?: components["parameters"]["rowFilter.beta_members.beta_tier"];
          access_level?: components["parameters"]["rowFilter.beta_members.access_level"];
          last_active_at?: components["parameters"]["rowFilter.beta_members.last_active_at"];
          total_feedback_submitted?: components["parameters"]["rowFilter.beta_members.total_feedback_submitted"];
          total_features_requested?: components["parameters"]["rowFilter.beta_members.total_features_requested"];
          total_calls_attended?: components["parameters"]["rowFilter.beta_members.total_calls_attended"];
          has_lifetime_pricing?: components["parameters"]["rowFilter.beta_members.has_lifetime_pricing"];
          discount_percentage?: components["parameters"]["rowFilter.beta_members.discount_percentage"];
          early_access_features?: components["parameters"]["rowFilter.beta_members.early_access_features"];
          wants_weekly_calls?: components["parameters"]["rowFilter.beta_members.wants_weekly_calls"];
          wants_community_access?: components["parameters"]["rowFilter.beta_members.wants_community_access"];
          wants_feature_updates?: components["parameters"]["rowFilter.beta_members.wants_feature_updates"];
          user_timezone?: components["parameters"]["rowFilter.beta_members.user_timezone"];
          is_active?: components["parameters"]["rowFilter.beta_members.is_active"];
          deactivated_at?: components["parameters"]["rowFilter.beta_members.deactivated_at"];
          deactivation_reason?: components["parameters"]["rowFilter.beta_members.deactivation_reason"];
          created_at?: components["parameters"]["rowFilter.beta_members.created_at"];
          updated_at?: components["parameters"]["rowFilter.beta_members.updated_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["beta_members"];
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    trace?: never;
  };
  "/project_daily_briefs": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.project_daily_briefs.id"];
          user_id?: components["parameters"]["rowFilter.project_daily_briefs.user_id"];
          project_id?: components["parameters"]["rowFilter.project_daily_briefs.project_id"];
          template_id?: components["parameters"]["rowFilter.project_daily_briefs.template_id"];
          brief_content?: components["parameters"]["rowFilter.project_daily_briefs.brief_content"];
          brief_date?: components["parameters"]["rowFilter.project_daily_briefs.brief_date"];
          metadata?: components["parameters"]["rowFilter.project_daily_briefs.metadata"];
          created_at?: components["parameters"]["rowFilter.project_daily_briefs.created_at"];
          updated_at?: components["parameters"]["rowFilter.project_daily_briefs.updated_at"];
          generation_status?: components["parameters"]["rowFilter.project_daily_briefs.generation_status"];
          generation_started_at?: components["parameters"]["rowFilter.project_daily_briefs.generation_started_at"];
          generation_completed_at?: components["parameters"]["rowFilter.project_daily_briefs.generation_completed_at"];
          generation_error?: components["parameters"]["rowFilter.project_daily_briefs.generation_error"];
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
          /** @description Ordering */
          order?: components["parameters"]["order"];
          /** @description Limiting and Pagination */
          offset?: components["parameters"]["offset"];
          /** @description Limiting and Pagination */
          limit?: components["parameters"]["limit"];
        };
        header?: {
          /** @description Limiting and Pagination */
          Range?: components["parameters"]["range"];
          /** @description Limiting and Pagination */
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          /** @description Preference */
          Prefer?: components["parameters"]["preferCount"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["project_daily_briefs"][];
            "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["project_daily_briefs"][];
            "application/vnd.pgrst.object+json": components["schemas"]["project_daily_briefs"][];
            "text/csv": components["schemas"]["project_daily_briefs"][];
          };
        };
        /** @description Partial Content */
        206: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: {
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferPost"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["project_daily_briefs"];
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.project_daily_briefs.id"];
          user_id?: components["parameters"]["rowFilter.project_daily_briefs.user_id"];
          project_id?: components["parameters"]["rowFilter.project_daily_briefs.project_id"];
          template_id?: components["parameters"]["rowFilter.project_daily_briefs.template_id"];
          brief_content?: components["parameters"]["rowFilter.project_daily_briefs.brief_content"];
          brief_date?: components["parameters"]["rowFilter.project_daily_briefs.brief_date"];
          metadata?: components["parameters"]["rowFilter.project_daily_briefs.metadata"];
          created_at?: components["parameters"]["rowFilter.project_daily_briefs.created_at"];
          updated_at?: components["parameters"]["rowFilter.project_daily_briefs.updated_at"];
          generation_status?: components["parameters"]["rowFilter.project_daily_briefs.generation_status"];
          generation_started_at?: components["parameters"]["rowFilter.project_daily_briefs.generation_started_at"];
          generation_completed_at?: components["parameters"]["rowFilter.project_daily_briefs.generation_completed_at"];
          generation_error?: components["parameters"]["rowFilter.project_daily_briefs.generation_error"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.project_daily_briefs.id"];
          user_id?: components["parameters"]["rowFilter.project_daily_briefs.user_id"];
          project_id?: components["parameters"]["rowFilter.project_daily_briefs.project_id"];
          template_id?: components["parameters"]["rowFilter.project_daily_briefs.template_id"];
          brief_content?: components["parameters"]["rowFilter.project_daily_briefs.brief_content"];
          brief_date?: components["parameters"]["rowFilter.project_daily_briefs.brief_date"];
          metadata?: components["parameters"]["rowFilter.project_daily_briefs.metadata"];
          created_at?: components["parameters"]["rowFilter.project_daily_briefs.created_at"];
          updated_at?: components["parameters"]["rowFilter.project_daily_briefs.updated_at"];
          generation_status?: components["parameters"]["rowFilter.project_daily_briefs.generation_status"];
          generation_started_at?: components["parameters"]["rowFilter.project_daily_briefs.generation_started_at"];
          generation_completed_at?: components["parameters"]["rowFilter.project_daily_briefs.generation_completed_at"];
          generation_error?: components["parameters"]["rowFilter.project_daily_briefs.generation_error"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["project_daily_briefs"];
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    trace?: never;
  };
  "/notes": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.notes.id"];
          user_id?: components["parameters"]["rowFilter.notes.user_id"];
          title?: components["parameters"]["rowFilter.notes.title"];
          content?: components["parameters"]["rowFilter.notes.content"];
          project_id?: components["parameters"]["rowFilter.notes.project_id"];
          created_at?: components["parameters"]["rowFilter.notes.created_at"];
          tags?: components["parameters"]["rowFilter.notes.tags"];
          updated_at?: components["parameters"]["rowFilter.notes.updated_at"];
          category?: components["parameters"]["rowFilter.notes.category"];
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
          /** @description Ordering */
          order?: components["parameters"]["order"];
          /** @description Limiting and Pagination */
          offset?: components["parameters"]["offset"];
          /** @description Limiting and Pagination */
          limit?: components["parameters"]["limit"];
        };
        header?: {
          /** @description Limiting and Pagination */
          Range?: components["parameters"]["range"];
          /** @description Limiting and Pagination */
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          /** @description Preference */
          Prefer?: components["parameters"]["preferCount"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["notes"][];
            "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["notes"][];
            "application/vnd.pgrst.object+json": components["schemas"]["notes"][];
            "text/csv": components["schemas"]["notes"][];
          };
        };
        /** @description Partial Content */
        206: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: {
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferPost"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["notes"];
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.notes.id"];
          user_id?: components["parameters"]["rowFilter.notes.user_id"];
          title?: components["parameters"]["rowFilter.notes.title"];
          content?: components["parameters"]["rowFilter.notes.content"];
          project_id?: components["parameters"]["rowFilter.notes.project_id"];
          created_at?: components["parameters"]["rowFilter.notes.created_at"];
          tags?: components["parameters"]["rowFilter.notes.tags"];
          updated_at?: components["parameters"]["rowFilter.notes.updated_at"];
          category?: components["parameters"]["rowFilter.notes.category"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.notes.id"];
          user_id?: components["parameters"]["rowFilter.notes.user_id"];
          title?: components["parameters"]["rowFilter.notes.title"];
          content?: components["parameters"]["rowFilter.notes.content"];
          project_id?: components["parameters"]["rowFilter.notes.project_id"];
          created_at?: components["parameters"]["rowFilter.notes.created_at"];
          tags?: components["parameters"]["rowFilter.notes.tags"];
          updated_at?: components["parameters"]["rowFilter.notes.updated_at"];
          category?: components["parameters"]["rowFilter.notes.category"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["notes"];
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    trace?: never;
  };
  "/project_phases_generation": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Tracks AI-generated project phases before user approval */
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.project_phases_generation.id"];
          project_id?: components["parameters"]["rowFilter.project_phases_generation.project_id"];
          user_id?: components["parameters"]["rowFilter.project_phases_generation.user_id"];
          generation_status?: components["parameters"]["rowFilter.project_phases_generation.generation_status"];
          generation_started_at?: components["parameters"]["rowFilter.project_phases_generation.generation_started_at"];
          generation_completed_at?: components["parameters"]["rowFilter.project_phases_generation.generation_completed_at"];
          generation_error?: components["parameters"]["rowFilter.project_phases_generation.generation_error"];
          generation_progress?: components["parameters"]["rowFilter.project_phases_generation.generation_progress"];
          regenerated?: components["parameters"]["rowFilter.project_phases_generation.regenerated"];
          template_used?: components["parameters"]["rowFilter.project_phases_generation.template_used"];
          /** @description JSON array containing all generated phases data */
          phases_data?: components["parameters"]["rowFilter.project_phases_generation.phases_data"];
          phases_count?: components["parameters"]["rowFilter.project_phases_generation.phases_count"];
          total_duration_days?: components["parameters"]["rowFilter.project_phases_generation.total_duration_days"];
          metadata?: components["parameters"]["rowFilter.project_phases_generation.metadata"];
          created_at?: components["parameters"]["rowFilter.project_phases_generation.created_at"];
          updated_at?: components["parameters"]["rowFilter.project_phases_generation.updated_at"];
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
          /** @description Ordering */
          order?: components["parameters"]["order"];
          /** @description Limiting and Pagination */
          offset?: components["parameters"]["offset"];
          /** @description Limiting and Pagination */
          limit?: components["parameters"]["limit"];
        };
        header?: {
          /** @description Limiting and Pagination */
          Range?: components["parameters"]["range"];
          /** @description Limiting and Pagination */
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          /** @description Preference */
          Prefer?: components["parameters"]["preferCount"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["project_phases_generation"][];
            "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["project_phases_generation"][];
            "application/vnd.pgrst.object+json": components["schemas"]["project_phases_generation"][];
            "text/csv": components["schemas"]["project_phases_generation"][];
          };
        };
        /** @description Partial Content */
        206: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    /** Tracks AI-generated project phases before user approval */
    post: {
      parameters: {
        query?: {
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferPost"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["project_phases_generation"];
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    /** Tracks AI-generated project phases before user approval */
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.project_phases_generation.id"];
          project_id?: components["parameters"]["rowFilter.project_phases_generation.project_id"];
          user_id?: components["parameters"]["rowFilter.project_phases_generation.user_id"];
          generation_status?: components["parameters"]["rowFilter.project_phases_generation.generation_status"];
          generation_started_at?: components["parameters"]["rowFilter.project_phases_generation.generation_started_at"];
          generation_completed_at?: components["parameters"]["rowFilter.project_phases_generation.generation_completed_at"];
          generation_error?: components["parameters"]["rowFilter.project_phases_generation.generation_error"];
          generation_progress?: components["parameters"]["rowFilter.project_phases_generation.generation_progress"];
          regenerated?: components["parameters"]["rowFilter.project_phases_generation.regenerated"];
          template_used?: components["parameters"]["rowFilter.project_phases_generation.template_used"];
          /** @description JSON array containing all generated phases data */
          phases_data?: components["parameters"]["rowFilter.project_phases_generation.phases_data"];
          phases_count?: components["parameters"]["rowFilter.project_phases_generation.phases_count"];
          total_duration_days?: components["parameters"]["rowFilter.project_phases_generation.total_duration_days"];
          metadata?: components["parameters"]["rowFilter.project_phases_generation.metadata"];
          created_at?: components["parameters"]["rowFilter.project_phases_generation.created_at"];
          updated_at?: components["parameters"]["rowFilter.project_phases_generation.updated_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    /** Tracks AI-generated project phases before user approval */
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.project_phases_generation.id"];
          project_id?: components["parameters"]["rowFilter.project_phases_generation.project_id"];
          user_id?: components["parameters"]["rowFilter.project_phases_generation.user_id"];
          generation_status?: components["parameters"]["rowFilter.project_phases_generation.generation_status"];
          generation_started_at?: components["parameters"]["rowFilter.project_phases_generation.generation_started_at"];
          generation_completed_at?: components["parameters"]["rowFilter.project_phases_generation.generation_completed_at"];
          generation_error?: components["parameters"]["rowFilter.project_phases_generation.generation_error"];
          generation_progress?: components["parameters"]["rowFilter.project_phases_generation.generation_progress"];
          regenerated?: components["parameters"]["rowFilter.project_phases_generation.regenerated"];
          template_used?: components["parameters"]["rowFilter.project_phases_generation.template_used"];
          /** @description JSON array containing all generated phases data */
          phases_data?: components["parameters"]["rowFilter.project_phases_generation.phases_data"];
          phases_count?: components["parameters"]["rowFilter.project_phases_generation.phases_count"];
          total_duration_days?: components["parameters"]["rowFilter.project_phases_generation.total_duration_days"];
          metadata?: components["parameters"]["rowFilter.project_phases_generation.metadata"];
          created_at?: components["parameters"]["rowFilter.project_phases_generation.created_at"];
          updated_at?: components["parameters"]["rowFilter.project_phases_generation.updated_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["project_phases_generation"];
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    trace?: never;
  };
  "/phase_task_schedules": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.phase_task_schedules.id"];
          phase_id?: components["parameters"]["rowFilter.phase_task_schedules.phase_id"];
          task_id?: components["parameters"]["rowFilter.phase_task_schedules.task_id"];
          proposed_start?: components["parameters"]["rowFilter.phase_task_schedules.proposed_start"];
          proposed_end?: components["parameters"]["rowFilter.phase_task_schedules.proposed_end"];
          is_confirmed?: components["parameters"]["rowFilter.phase_task_schedules.is_confirmed"];
          scheduling_notes?: components["parameters"]["rowFilter.phase_task_schedules.scheduling_notes"];
          conflict_warnings?: components["parameters"]["rowFilter.phase_task_schedules.conflict_warnings"];
          created_at?: components["parameters"]["rowFilter.phase_task_schedules.created_at"];
          updated_at?: components["parameters"]["rowFilter.phase_task_schedules.updated_at"];
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
          /** @description Ordering */
          order?: components["parameters"]["order"];
          /** @description Limiting and Pagination */
          offset?: components["parameters"]["offset"];
          /** @description Limiting and Pagination */
          limit?: components["parameters"]["limit"];
        };
        header?: {
          /** @description Limiting and Pagination */
          Range?: components["parameters"]["range"];
          /** @description Limiting and Pagination */
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          /** @description Preference */
          Prefer?: components["parameters"]["preferCount"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["phase_task_schedules"][];
            "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["phase_task_schedules"][];
            "application/vnd.pgrst.object+json": components["schemas"]["phase_task_schedules"][];
            "text/csv": components["schemas"]["phase_task_schedules"][];
          };
        };
        /** @description Partial Content */
        206: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: {
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferPost"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["phase_task_schedules"];
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.phase_task_schedules.id"];
          phase_id?: components["parameters"]["rowFilter.phase_task_schedules.phase_id"];
          task_id?: components["parameters"]["rowFilter.phase_task_schedules.task_id"];
          proposed_start?: components["parameters"]["rowFilter.phase_task_schedules.proposed_start"];
          proposed_end?: components["parameters"]["rowFilter.phase_task_schedules.proposed_end"];
          is_confirmed?: components["parameters"]["rowFilter.phase_task_schedules.is_confirmed"];
          scheduling_notes?: components["parameters"]["rowFilter.phase_task_schedules.scheduling_notes"];
          conflict_warnings?: components["parameters"]["rowFilter.phase_task_schedules.conflict_warnings"];
          created_at?: components["parameters"]["rowFilter.phase_task_schedules.created_at"];
          updated_at?: components["parameters"]["rowFilter.phase_task_schedules.updated_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.phase_task_schedules.id"];
          phase_id?: components["parameters"]["rowFilter.phase_task_schedules.phase_id"];
          task_id?: components["parameters"]["rowFilter.phase_task_schedules.task_id"];
          proposed_start?: components["parameters"]["rowFilter.phase_task_schedules.proposed_start"];
          proposed_end?: components["parameters"]["rowFilter.phase_task_schedules.proposed_end"];
          is_confirmed?: components["parameters"]["rowFilter.phase_task_schedules.is_confirmed"];
          scheduling_notes?: components["parameters"]["rowFilter.phase_task_schedules.scheduling_notes"];
          conflict_warnings?: components["parameters"]["rowFilter.phase_task_schedules.conflict_warnings"];
          created_at?: components["parameters"]["rowFilter.phase_task_schedules.created_at"];
          updated_at?: components["parameters"]["rowFilter.phase_task_schedules.updated_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["phase_task_schedules"];
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    trace?: never;
  };
  "/recurring_task_summary": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          task_id?: components["parameters"]["rowFilter.recurring_task_summary.task_id"];
          title?: components["parameters"]["rowFilter.recurring_task_summary.title"];
          recurrence_pattern?: components["parameters"]["rowFilter.recurring_task_summary.recurrence_pattern"];
          recurrence_ends?: components["parameters"]["rowFilter.recurring_task_summary.recurrence_ends"];
          start_date?: components["parameters"]["rowFilter.recurring_task_summary.start_date"];
          user_id?: components["parameters"]["rowFilter.recurring_task_summary.user_id"];
          total_instances?: components["parameters"]["rowFilter.recurring_task_summary.total_instances"];
          completed_instances?: components["parameters"]["rowFilter.recurring_task_summary.completed_instances"];
          skipped_instances?: components["parameters"]["rowFilter.recurring_task_summary.skipped_instances"];
          exception_count?: components["parameters"]["rowFilter.recurring_task_summary.exception_count"];
          next_occurrence?: components["parameters"]["rowFilter.recurring_task_summary.next_occurrence"];
          last_completed_at?: components["parameters"]["rowFilter.recurring_task_summary.last_completed_at"];
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
          /** @description Ordering */
          order?: components["parameters"]["order"];
          /** @description Limiting and Pagination */
          offset?: components["parameters"]["offset"];
          /** @description Limiting and Pagination */
          limit?: components["parameters"]["limit"];
        };
        header?: {
          /** @description Limiting and Pagination */
          Range?: components["parameters"]["range"];
          /** @description Limiting and Pagination */
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          /** @description Preference */
          Prefer?: components["parameters"]["preferCount"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["recurring_task_summary"][];
            "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["recurring_task_summary"][];
            "application/vnd.pgrst.object+json": components["schemas"]["recurring_task_summary"][];
            "text/csv": components["schemas"]["recurring_task_summary"][];
          };
        };
        /** @description Partial Content */
        206: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/email_attachments": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.email_attachments.id"];
          email_id?: components["parameters"]["rowFilter.email_attachments.email_id"];
          filename?: components["parameters"]["rowFilter.email_attachments.filename"];
          original_filename?: components["parameters"]["rowFilter.email_attachments.original_filename"];
          file_size?: components["parameters"]["rowFilter.email_attachments.file_size"];
          content_type?: components["parameters"]["rowFilter.email_attachments.content_type"];
          storage_path?: components["parameters"]["rowFilter.email_attachments.storage_path"];
          storage_bucket?: components["parameters"]["rowFilter.email_attachments.storage_bucket"];
          is_image?: components["parameters"]["rowFilter.email_attachments.is_image"];
          image_width?: components["parameters"]["rowFilter.email_attachments.image_width"];
          image_height?: components["parameters"]["rowFilter.email_attachments.image_height"];
          optimized_versions?: components["parameters"]["rowFilter.email_attachments.optimized_versions"];
          created_by?: components["parameters"]["rowFilter.email_attachments.created_by"];
          created_at?: components["parameters"]["rowFilter.email_attachments.created_at"];
          is_inline?: components["parameters"]["rowFilter.email_attachments.is_inline"];
          cid?: components["parameters"]["rowFilter.email_attachments.cid"];
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
          /** @description Ordering */
          order?: components["parameters"]["order"];
          /** @description Limiting and Pagination */
          offset?: components["parameters"]["offset"];
          /** @description Limiting and Pagination */
          limit?: components["parameters"]["limit"];
        };
        header?: {
          /** @description Limiting and Pagination */
          Range?: components["parameters"]["range"];
          /** @description Limiting and Pagination */
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          /** @description Preference */
          Prefer?: components["parameters"]["preferCount"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["email_attachments"][];
            "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["email_attachments"][];
            "application/vnd.pgrst.object+json": components["schemas"]["email_attachments"][];
            "text/csv": components["schemas"]["email_attachments"][];
          };
        };
        /** @description Partial Content */
        206: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: {
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferPost"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["email_attachments"];
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.email_attachments.id"];
          email_id?: components["parameters"]["rowFilter.email_attachments.email_id"];
          filename?: components["parameters"]["rowFilter.email_attachments.filename"];
          original_filename?: components["parameters"]["rowFilter.email_attachments.original_filename"];
          file_size?: components["parameters"]["rowFilter.email_attachments.file_size"];
          content_type?: components["parameters"]["rowFilter.email_attachments.content_type"];
          storage_path?: components["parameters"]["rowFilter.email_attachments.storage_path"];
          storage_bucket?: components["parameters"]["rowFilter.email_attachments.storage_bucket"];
          is_image?: components["parameters"]["rowFilter.email_attachments.is_image"];
          image_width?: components["parameters"]["rowFilter.email_attachments.image_width"];
          image_height?: components["parameters"]["rowFilter.email_attachments.image_height"];
          optimized_versions?: components["parameters"]["rowFilter.email_attachments.optimized_versions"];
          created_by?: components["parameters"]["rowFilter.email_attachments.created_by"];
          created_at?: components["parameters"]["rowFilter.email_attachments.created_at"];
          is_inline?: components["parameters"]["rowFilter.email_attachments.is_inline"];
          cid?: components["parameters"]["rowFilter.email_attachments.cid"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.email_attachments.id"];
          email_id?: components["parameters"]["rowFilter.email_attachments.email_id"];
          filename?: components["parameters"]["rowFilter.email_attachments.filename"];
          original_filename?: components["parameters"]["rowFilter.email_attachments.original_filename"];
          file_size?: components["parameters"]["rowFilter.email_attachments.file_size"];
          content_type?: components["parameters"]["rowFilter.email_attachments.content_type"];
          storage_path?: components["parameters"]["rowFilter.email_attachments.storage_path"];
          storage_bucket?: components["parameters"]["rowFilter.email_attachments.storage_bucket"];
          is_image?: components["parameters"]["rowFilter.email_attachments.is_image"];
          image_width?: components["parameters"]["rowFilter.email_attachments.image_width"];
          image_height?: components["parameters"]["rowFilter.email_attachments.image_height"];
          optimized_versions?: components["parameters"]["rowFilter.email_attachments.optimized_versions"];
          created_by?: components["parameters"]["rowFilter.email_attachments.created_by"];
          created_at?: components["parameters"]["rowFilter.email_attachments.created_at"];
          is_inline?: components["parameters"]["rowFilter.email_attachments.is_inline"];
          cid?: components["parameters"]["rowFilter.email_attachments.cid"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["email_attachments"];
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    trace?: never;
  };
  "/emails": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.emails.id"];
          subject?: components["parameters"]["rowFilter.emails.subject"];
          content?: components["parameters"]["rowFilter.emails.content"];
          from_email?: components["parameters"]["rowFilter.emails.from_email"];
          from_name?: components["parameters"]["rowFilter.emails.from_name"];
          status?: components["parameters"]["rowFilter.emails.status"];
          scheduled_at?: components["parameters"]["rowFilter.emails.scheduled_at"];
          sent_at?: components["parameters"]["rowFilter.emails.sent_at"];
          tracking_enabled?: components["parameters"]["rowFilter.emails.tracking_enabled"];
          tracking_id?: components["parameters"]["rowFilter.emails.tracking_id"];
          created_by?: components["parameters"]["rowFilter.emails.created_by"];
          created_at?: components["parameters"]["rowFilter.emails.created_at"];
          updated_at?: components["parameters"]["rowFilter.emails.updated_at"];
          category?: components["parameters"]["rowFilter.emails.category"];
          template_data?: components["parameters"]["rowFilter.emails.template_data"];
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
          /** @description Ordering */
          order?: components["parameters"]["order"];
          /** @description Limiting and Pagination */
          offset?: components["parameters"]["offset"];
          /** @description Limiting and Pagination */
          limit?: components["parameters"]["limit"];
        };
        header?: {
          /** @description Limiting and Pagination */
          Range?: components["parameters"]["range"];
          /** @description Limiting and Pagination */
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          /** @description Preference */
          Prefer?: components["parameters"]["preferCount"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["emails"][];
            "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["emails"][];
            "application/vnd.pgrst.object+json": components["schemas"]["emails"][];
            "text/csv": components["schemas"]["emails"][];
          };
        };
        /** @description Partial Content */
        206: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: {
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferPost"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["emails"];
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.emails.id"];
          subject?: components["parameters"]["rowFilter.emails.subject"];
          content?: components["parameters"]["rowFilter.emails.content"];
          from_email?: components["parameters"]["rowFilter.emails.from_email"];
          from_name?: components["parameters"]["rowFilter.emails.from_name"];
          status?: components["parameters"]["rowFilter.emails.status"];
          scheduled_at?: components["parameters"]["rowFilter.emails.scheduled_at"];
          sent_at?: components["parameters"]["rowFilter.emails.sent_at"];
          tracking_enabled?: components["parameters"]["rowFilter.emails.tracking_enabled"];
          tracking_id?: components["parameters"]["rowFilter.emails.tracking_id"];
          created_by?: components["parameters"]["rowFilter.emails.created_by"];
          created_at?: components["parameters"]["rowFilter.emails.created_at"];
          updated_at?: components["parameters"]["rowFilter.emails.updated_at"];
          category?: components["parameters"]["rowFilter.emails.category"];
          template_data?: components["parameters"]["rowFilter.emails.template_data"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.emails.id"];
          subject?: components["parameters"]["rowFilter.emails.subject"];
          content?: components["parameters"]["rowFilter.emails.content"];
          from_email?: components["parameters"]["rowFilter.emails.from_email"];
          from_name?: components["parameters"]["rowFilter.emails.from_name"];
          status?: components["parameters"]["rowFilter.emails.status"];
          scheduled_at?: components["parameters"]["rowFilter.emails.scheduled_at"];
          sent_at?: components["parameters"]["rowFilter.emails.sent_at"];
          tracking_enabled?: components["parameters"]["rowFilter.emails.tracking_enabled"];
          tracking_id?: components["parameters"]["rowFilter.emails.tracking_id"];
          created_by?: components["parameters"]["rowFilter.emails.created_by"];
          created_at?: components["parameters"]["rowFilter.emails.created_at"];
          updated_at?: components["parameters"]["rowFilter.emails.updated_at"];
          category?: components["parameters"]["rowFilter.emails.category"];
          template_data?: components["parameters"]["rowFilter.emails.template_data"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["emails"];
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    trace?: never;
  };
  "/beta_feature_votes": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.beta_feature_votes.id"];
          feedback_id?: components["parameters"]["rowFilter.beta_feature_votes.feedback_id"];
          member_id?: components["parameters"]["rowFilter.beta_feature_votes.member_id"];
          vote_type?: components["parameters"]["rowFilter.beta_feature_votes.vote_type"];
          created_at?: components["parameters"]["rowFilter.beta_feature_votes.created_at"];
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
          /** @description Ordering */
          order?: components["parameters"]["order"];
          /** @description Limiting and Pagination */
          offset?: components["parameters"]["offset"];
          /** @description Limiting and Pagination */
          limit?: components["parameters"]["limit"];
        };
        header?: {
          /** @description Limiting and Pagination */
          Range?: components["parameters"]["range"];
          /** @description Limiting and Pagination */
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          /** @description Preference */
          Prefer?: components["parameters"]["preferCount"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["beta_feature_votes"][];
            "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["beta_feature_votes"][];
            "application/vnd.pgrst.object+json": components["schemas"]["beta_feature_votes"][];
            "text/csv": components["schemas"]["beta_feature_votes"][];
          };
        };
        /** @description Partial Content */
        206: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: {
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferPost"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["beta_feature_votes"];
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.beta_feature_votes.id"];
          feedback_id?: components["parameters"]["rowFilter.beta_feature_votes.feedback_id"];
          member_id?: components["parameters"]["rowFilter.beta_feature_votes.member_id"];
          vote_type?: components["parameters"]["rowFilter.beta_feature_votes.vote_type"];
          created_at?: components["parameters"]["rowFilter.beta_feature_votes.created_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.beta_feature_votes.id"];
          feedback_id?: components["parameters"]["rowFilter.beta_feature_votes.feedback_id"];
          member_id?: components["parameters"]["rowFilter.beta_feature_votes.member_id"];
          vote_type?: components["parameters"]["rowFilter.beta_feature_votes.vote_type"];
          created_at?: components["parameters"]["rowFilter.beta_feature_votes.created_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["beta_feature_votes"];
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    trace?: never;
  };
  "/email_tracking_events": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.email_tracking_events.id"];
          email_id?: components["parameters"]["rowFilter.email_tracking_events.email_id"];
          recipient_id?: components["parameters"]["rowFilter.email_tracking_events.recipient_id"];
          event_type?: components["parameters"]["rowFilter.email_tracking_events.event_type"];
          event_data?: components["parameters"]["rowFilter.email_tracking_events.event_data"];
          user_agent?: components["parameters"]["rowFilter.email_tracking_events.user_agent"];
          ip_address?: components["parameters"]["rowFilter.email_tracking_events.ip_address"];
          timestamp?: components["parameters"]["rowFilter.email_tracking_events.timestamp"];
          clicked_url?: components["parameters"]["rowFilter.email_tracking_events.clicked_url"];
          created_at?: components["parameters"]["rowFilter.email_tracking_events.created_at"];
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
          /** @description Ordering */
          order?: components["parameters"]["order"];
          /** @description Limiting and Pagination */
          offset?: components["parameters"]["offset"];
          /** @description Limiting and Pagination */
          limit?: components["parameters"]["limit"];
        };
        header?: {
          /** @description Limiting and Pagination */
          Range?: components["parameters"]["range"];
          /** @description Limiting and Pagination */
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          /** @description Preference */
          Prefer?: components["parameters"]["preferCount"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["email_tracking_events"][];
            "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["email_tracking_events"][];
            "application/vnd.pgrst.object+json": components["schemas"]["email_tracking_events"][];
            "text/csv": components["schemas"]["email_tracking_events"][];
          };
        };
        /** @description Partial Content */
        206: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: {
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferPost"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["email_tracking_events"];
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.email_tracking_events.id"];
          email_id?: components["parameters"]["rowFilter.email_tracking_events.email_id"];
          recipient_id?: components["parameters"]["rowFilter.email_tracking_events.recipient_id"];
          event_type?: components["parameters"]["rowFilter.email_tracking_events.event_type"];
          event_data?: components["parameters"]["rowFilter.email_tracking_events.event_data"];
          user_agent?: components["parameters"]["rowFilter.email_tracking_events.user_agent"];
          ip_address?: components["parameters"]["rowFilter.email_tracking_events.ip_address"];
          timestamp?: components["parameters"]["rowFilter.email_tracking_events.timestamp"];
          clicked_url?: components["parameters"]["rowFilter.email_tracking_events.clicked_url"];
          created_at?: components["parameters"]["rowFilter.email_tracking_events.created_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.email_tracking_events.id"];
          email_id?: components["parameters"]["rowFilter.email_tracking_events.email_id"];
          recipient_id?: components["parameters"]["rowFilter.email_tracking_events.recipient_id"];
          event_type?: components["parameters"]["rowFilter.email_tracking_events.event_type"];
          event_data?: components["parameters"]["rowFilter.email_tracking_events.event_data"];
          user_agent?: components["parameters"]["rowFilter.email_tracking_events.user_agent"];
          ip_address?: components["parameters"]["rowFilter.email_tracking_events.ip_address"];
          timestamp?: components["parameters"]["rowFilter.email_tracking_events.timestamp"];
          clicked_url?: components["parameters"]["rowFilter.email_tracking_events.clicked_url"];
          created_at?: components["parameters"]["rowFilter.email_tracking_events.created_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["email_tracking_events"];
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    trace?: never;
  };
  "/project_synthesis": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Stores AI-generated project synthesis including task consolidation and next steps */
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.project_synthesis.id"];
          user_id?: components["parameters"]["rowFilter.project_synthesis.user_id"];
          project_id?: components["parameters"]["rowFilter.project_synthesis.project_id"];
          /** @description JSON structure: {
           *       "consolidatedTasks": [...],
           *       "suggestedTasks": [...],
           *       "duplicatesFound": [...],
           *       "nextSteps": [...],
           *       "outdatedTaskIds": [...]
           *     } */
          synthesis_content?: components["parameters"]["rowFilter.project_synthesis.synthesis_content"];
          insights?: components["parameters"]["rowFilter.project_synthesis.insights"];
          generation_model?: components["parameters"]["rowFilter.project_synthesis.generation_model"];
          generation_duration_ms?: components["parameters"]["rowFilter.project_synthesis.generation_duration_ms"];
          created_at?: components["parameters"]["rowFilter.project_synthesis.created_at"];
          updated_at?: components["parameters"]["rowFilter.project_synthesis.updated_at"];
          operations_count?: components["parameters"]["rowFilter.project_synthesis.operations_count"];
          status?: components["parameters"]["rowFilter.project_synthesis.status"];
          applied_at?: components["parameters"]["rowFilter.project_synthesis.applied_at"];
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
          /** @description Ordering */
          order?: components["parameters"]["order"];
          /** @description Limiting and Pagination */
          offset?: components["parameters"]["offset"];
          /** @description Limiting and Pagination */
          limit?: components["parameters"]["limit"];
        };
        header?: {
          /** @description Limiting and Pagination */
          Range?: components["parameters"]["range"];
          /** @description Limiting and Pagination */
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          /** @description Preference */
          Prefer?: components["parameters"]["preferCount"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["project_synthesis"][];
            "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["project_synthesis"][];
            "application/vnd.pgrst.object+json": components["schemas"]["project_synthesis"][];
            "text/csv": components["schemas"]["project_synthesis"][];
          };
        };
        /** @description Partial Content */
        206: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    /** Stores AI-generated project synthesis including task consolidation and next steps */
    post: {
      parameters: {
        query?: {
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferPost"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["project_synthesis"];
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    /** Stores AI-generated project synthesis including task consolidation and next steps */
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.project_synthesis.id"];
          user_id?: components["parameters"]["rowFilter.project_synthesis.user_id"];
          project_id?: components["parameters"]["rowFilter.project_synthesis.project_id"];
          /** @description JSON structure: {
           *       "consolidatedTasks": [...],
           *       "suggestedTasks": [...],
           *       "duplicatesFound": [...],
           *       "nextSteps": [...],
           *       "outdatedTaskIds": [...]
           *     } */
          synthesis_content?: components["parameters"]["rowFilter.project_synthesis.synthesis_content"];
          insights?: components["parameters"]["rowFilter.project_synthesis.insights"];
          generation_model?: components["parameters"]["rowFilter.project_synthesis.generation_model"];
          generation_duration_ms?: components["parameters"]["rowFilter.project_synthesis.generation_duration_ms"];
          created_at?: components["parameters"]["rowFilter.project_synthesis.created_at"];
          updated_at?: components["parameters"]["rowFilter.project_synthesis.updated_at"];
          operations_count?: components["parameters"]["rowFilter.project_synthesis.operations_count"];
          status?: components["parameters"]["rowFilter.project_synthesis.status"];
          applied_at?: components["parameters"]["rowFilter.project_synthesis.applied_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    /** Stores AI-generated project synthesis including task consolidation and next steps */
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.project_synthesis.id"];
          user_id?: components["parameters"]["rowFilter.project_synthesis.user_id"];
          project_id?: components["parameters"]["rowFilter.project_synthesis.project_id"];
          /** @description JSON structure: {
           *       "consolidatedTasks": [...],
           *       "suggestedTasks": [...],
           *       "duplicatesFound": [...],
           *       "nextSteps": [...],
           *       "outdatedTaskIds": [...]
           *     } */
          synthesis_content?: components["parameters"]["rowFilter.project_synthesis.synthesis_content"];
          insights?: components["parameters"]["rowFilter.project_synthesis.insights"];
          generation_model?: components["parameters"]["rowFilter.project_synthesis.generation_model"];
          generation_duration_ms?: components["parameters"]["rowFilter.project_synthesis.generation_duration_ms"];
          created_at?: components["parameters"]["rowFilter.project_synthesis.created_at"];
          updated_at?: components["parameters"]["rowFilter.project_synthesis.updated_at"];
          operations_count?: components["parameters"]["rowFilter.project_synthesis.operations_count"];
          status?: components["parameters"]["rowFilter.project_synthesis.status"];
          applied_at?: components["parameters"]["rowFilter.project_synthesis.applied_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["project_synthesis"];
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    trace?: never;
  };
  "/users": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.users.id"];
          email?: components["parameters"]["rowFilter.users.email"];
          name?: components["parameters"]["rowFilter.users.name"];
          created_at?: components["parameters"]["rowFilter.users.created_at"];
          bio?: components["parameters"]["rowFilter.users.bio"];
          /** @description Whether the user has admin privileges */
          is_admin?: components["parameters"]["rowFilter.users.is_admin"];
          completed_onboarding?: components["parameters"]["rowFilter.users.completed_onboarding"];
          updated_at?: components["parameters"]["rowFilter.users.updated_at"];
          last_visit?: components["parameters"]["rowFilter.users.last_visit"];
          stripe_customer_id?: components["parameters"]["rowFilter.users.stripe_customer_id"];
          subscription_status?: components["parameters"]["rowFilter.users.subscription_status"];
          subscription_plan_id?: components["parameters"]["rowFilter.users.subscription_plan_id"];
          trial_ends_at?: components["parameters"]["rowFilter.users.trial_ends_at"];
          access_restricted?: components["parameters"]["rowFilter.users.access_restricted"];
          access_restricted_at?: components["parameters"]["rowFilter.users.access_restricted_at"];
          /** @description Indicates if the user is part of the beta program */
          is_beta_user?: components["parameters"]["rowFilter.users.is_beta_user"];
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
          /** @description Ordering */
          order?: components["parameters"]["order"];
          /** @description Limiting and Pagination */
          offset?: components["parameters"]["offset"];
          /** @description Limiting and Pagination */
          limit?: components["parameters"]["limit"];
        };
        header?: {
          /** @description Limiting and Pagination */
          Range?: components["parameters"]["range"];
          /** @description Limiting and Pagination */
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          /** @description Preference */
          Prefer?: components["parameters"]["preferCount"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["users"][];
            "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["users"][];
            "application/vnd.pgrst.object+json": components["schemas"]["users"][];
            "text/csv": components["schemas"]["users"][];
          };
        };
        /** @description Partial Content */
        206: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: {
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferPost"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["users"];
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.users.id"];
          email?: components["parameters"]["rowFilter.users.email"];
          name?: components["parameters"]["rowFilter.users.name"];
          created_at?: components["parameters"]["rowFilter.users.created_at"];
          bio?: components["parameters"]["rowFilter.users.bio"];
          /** @description Whether the user has admin privileges */
          is_admin?: components["parameters"]["rowFilter.users.is_admin"];
          completed_onboarding?: components["parameters"]["rowFilter.users.completed_onboarding"];
          updated_at?: components["parameters"]["rowFilter.users.updated_at"];
          last_visit?: components["parameters"]["rowFilter.users.last_visit"];
          stripe_customer_id?: components["parameters"]["rowFilter.users.stripe_customer_id"];
          subscription_status?: components["parameters"]["rowFilter.users.subscription_status"];
          subscription_plan_id?: components["parameters"]["rowFilter.users.subscription_plan_id"];
          trial_ends_at?: components["parameters"]["rowFilter.users.trial_ends_at"];
          access_restricted?: components["parameters"]["rowFilter.users.access_restricted"];
          access_restricted_at?: components["parameters"]["rowFilter.users.access_restricted_at"];
          /** @description Indicates if the user is part of the beta program */
          is_beta_user?: components["parameters"]["rowFilter.users.is_beta_user"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.users.id"];
          email?: components["parameters"]["rowFilter.users.email"];
          name?: components["parameters"]["rowFilter.users.name"];
          created_at?: components["parameters"]["rowFilter.users.created_at"];
          bio?: components["parameters"]["rowFilter.users.bio"];
          /** @description Whether the user has admin privileges */
          is_admin?: components["parameters"]["rowFilter.users.is_admin"];
          completed_onboarding?: components["parameters"]["rowFilter.users.completed_onboarding"];
          updated_at?: components["parameters"]["rowFilter.users.updated_at"];
          last_visit?: components["parameters"]["rowFilter.users.last_visit"];
          stripe_customer_id?: components["parameters"]["rowFilter.users.stripe_customer_id"];
          subscription_status?: components["parameters"]["rowFilter.users.subscription_status"];
          subscription_plan_id?: components["parameters"]["rowFilter.users.subscription_plan_id"];
          trial_ends_at?: components["parameters"]["rowFilter.users.trial_ends_at"];
          access_restricted?: components["parameters"]["rowFilter.users.access_restricted"];
          access_restricted_at?: components["parameters"]["rowFilter.users.access_restricted_at"];
          /** @description Indicates if the user is part of the beta program */
          is_beta_user?: components["parameters"]["rowFilter.users.is_beta_user"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["users"];
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    trace?: never;
  };
  "/api_keys": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.api_keys.id"];
          user_id?: components["parameters"]["rowFilter.api_keys.user_id"];
          service_name?: components["parameters"]["rowFilter.api_keys.service_name"];
          api_key?: components["parameters"]["rowFilter.api_keys.api_key"];
          created_at?: components["parameters"]["rowFilter.api_keys.created_at"];
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
          /** @description Ordering */
          order?: components["parameters"]["order"];
          /** @description Limiting and Pagination */
          offset?: components["parameters"]["offset"];
          /** @description Limiting and Pagination */
          limit?: components["parameters"]["limit"];
        };
        header?: {
          /** @description Limiting and Pagination */
          Range?: components["parameters"]["range"];
          /** @description Limiting and Pagination */
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          /** @description Preference */
          Prefer?: components["parameters"]["preferCount"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["api_keys"][];
            "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["api_keys"][];
            "application/vnd.pgrst.object+json": components["schemas"]["api_keys"][];
            "text/csv": components["schemas"]["api_keys"][];
          };
        };
        /** @description Partial Content */
        206: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: {
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferPost"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["api_keys"];
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.api_keys.id"];
          user_id?: components["parameters"]["rowFilter.api_keys.user_id"];
          service_name?: components["parameters"]["rowFilter.api_keys.service_name"];
          api_key?: components["parameters"]["rowFilter.api_keys.api_key"];
          created_at?: components["parameters"]["rowFilter.api_keys.created_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.api_keys.id"];
          user_id?: components["parameters"]["rowFilter.api_keys.user_id"];
          service_name?: components["parameters"]["rowFilter.api_keys.service_name"];
          api_key?: components["parameters"]["rowFilter.api_keys.api_key"];
          created_at?: components["parameters"]["rowFilter.api_keys.created_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["api_keys"];
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    trace?: never;
  };
  "/sms_templates": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.sms_templates.id"];
          template_key?: components["parameters"]["rowFilter.sms_templates.template_key"];
          name?: components["parameters"]["rowFilter.sms_templates.name"];
          description?: components["parameters"]["rowFilter.sms_templates.description"];
          message_template?: components["parameters"]["rowFilter.sms_templates.message_template"];
          template_vars?: components["parameters"]["rowFilter.sms_templates.template_vars"];
          required_vars?: components["parameters"]["rowFilter.sms_templates.required_vars"];
          max_length?: components["parameters"]["rowFilter.sms_templates.max_length"];
          is_active?: components["parameters"]["rowFilter.sms_templates.is_active"];
          usage_count?: components["parameters"]["rowFilter.sms_templates.usage_count"];
          last_used_at?: components["parameters"]["rowFilter.sms_templates.last_used_at"];
          created_by?: components["parameters"]["rowFilter.sms_templates.created_by"];
          created_at?: components["parameters"]["rowFilter.sms_templates.created_at"];
          updated_at?: components["parameters"]["rowFilter.sms_templates.updated_at"];
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
          /** @description Ordering */
          order?: components["parameters"]["order"];
          /** @description Limiting and Pagination */
          offset?: components["parameters"]["offset"];
          /** @description Limiting and Pagination */
          limit?: components["parameters"]["limit"];
        };
        header?: {
          /** @description Limiting and Pagination */
          Range?: components["parameters"]["range"];
          /** @description Limiting and Pagination */
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          /** @description Preference */
          Prefer?: components["parameters"]["preferCount"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["sms_templates"][];
            "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["sms_templates"][];
            "application/vnd.pgrst.object+json": components["schemas"]["sms_templates"][];
            "text/csv": components["schemas"]["sms_templates"][];
          };
        };
        /** @description Partial Content */
        206: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: {
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferPost"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["sms_templates"];
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.sms_templates.id"];
          template_key?: components["parameters"]["rowFilter.sms_templates.template_key"];
          name?: components["parameters"]["rowFilter.sms_templates.name"];
          description?: components["parameters"]["rowFilter.sms_templates.description"];
          message_template?: components["parameters"]["rowFilter.sms_templates.message_template"];
          template_vars?: components["parameters"]["rowFilter.sms_templates.template_vars"];
          required_vars?: components["parameters"]["rowFilter.sms_templates.required_vars"];
          max_length?: components["parameters"]["rowFilter.sms_templates.max_length"];
          is_active?: components["parameters"]["rowFilter.sms_templates.is_active"];
          usage_count?: components["parameters"]["rowFilter.sms_templates.usage_count"];
          last_used_at?: components["parameters"]["rowFilter.sms_templates.last_used_at"];
          created_by?: components["parameters"]["rowFilter.sms_templates.created_by"];
          created_at?: components["parameters"]["rowFilter.sms_templates.created_at"];
          updated_at?: components["parameters"]["rowFilter.sms_templates.updated_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.sms_templates.id"];
          template_key?: components["parameters"]["rowFilter.sms_templates.template_key"];
          name?: components["parameters"]["rowFilter.sms_templates.name"];
          description?: components["parameters"]["rowFilter.sms_templates.description"];
          message_template?: components["parameters"]["rowFilter.sms_templates.message_template"];
          template_vars?: components["parameters"]["rowFilter.sms_templates.template_vars"];
          required_vars?: components["parameters"]["rowFilter.sms_templates.required_vars"];
          max_length?: components["parameters"]["rowFilter.sms_templates.max_length"];
          is_active?: components["parameters"]["rowFilter.sms_templates.is_active"];
          usage_count?: components["parameters"]["rowFilter.sms_templates.usage_count"];
          last_used_at?: components["parameters"]["rowFilter.sms_templates.last_used_at"];
          created_by?: components["parameters"]["rowFilter.sms_templates.created_by"];
          created_at?: components["parameters"]["rowFilter.sms_templates.created_at"];
          updated_at?: components["parameters"]["rowFilter.sms_templates.updated_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["sms_templates"];
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    trace?: never;
  };
  "/error_summary": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          error_type?: components["parameters"]["rowFilter.error_summary.error_type"];
          severity?: components["parameters"]["rowFilter.error_summary.severity"];
          error_count?: components["parameters"]["rowFilter.error_summary.error_count"];
          affected_users?: components["parameters"]["rowFilter.error_summary.affected_users"];
          affected_projects?: components["parameters"]["rowFilter.error_summary.affected_projects"];
          first_occurrence?: components["parameters"]["rowFilter.error_summary.first_occurrence"];
          last_occurrence?: components["parameters"]["rowFilter.error_summary.last_occurrence"];
          resolved_count?: components["parameters"]["rowFilter.error_summary.resolved_count"];
          avg_response_time_ms?: components["parameters"]["rowFilter.error_summary.avg_response_time_ms"];
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
          /** @description Ordering */
          order?: components["parameters"]["order"];
          /** @description Limiting and Pagination */
          offset?: components["parameters"]["offset"];
          /** @description Limiting and Pagination */
          limit?: components["parameters"]["limit"];
        };
        header?: {
          /** @description Limiting and Pagination */
          Range?: components["parameters"]["range"];
          /** @description Limiting and Pagination */
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          /** @description Preference */
          Prefer?: components["parameters"]["preferCount"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["error_summary"][];
            "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["error_summary"][];
            "application/vnd.pgrst.object+json": components["schemas"]["error_summary"][];
            "text/csv": components["schemas"]["error_summary"][];
          };
        };
        /** @description Partial Content */
        206: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/customer_subscriptions": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.customer_subscriptions.id"];
          user_id?: components["parameters"]["rowFilter.customer_subscriptions.user_id"];
          stripe_customer_id?: components["parameters"]["rowFilter.customer_subscriptions.stripe_customer_id"];
          stripe_subscription_id?: components["parameters"]["rowFilter.customer_subscriptions.stripe_subscription_id"];
          stripe_price_id?: components["parameters"]["rowFilter.customer_subscriptions.stripe_price_id"];
          plan_id?: components["parameters"]["rowFilter.customer_subscriptions.plan_id"];
          status?: components["parameters"]["rowFilter.customer_subscriptions.status"];
          current_period_start?: components["parameters"]["rowFilter.customer_subscriptions.current_period_start"];
          current_period_end?: components["parameters"]["rowFilter.customer_subscriptions.current_period_end"];
          cancel_at?: components["parameters"]["rowFilter.customer_subscriptions.cancel_at"];
          canceled_at?: components["parameters"]["rowFilter.customer_subscriptions.canceled_at"];
          trial_start?: components["parameters"]["rowFilter.customer_subscriptions.trial_start"];
          trial_end?: components["parameters"]["rowFilter.customer_subscriptions.trial_end"];
          metadata?: components["parameters"]["rowFilter.customer_subscriptions.metadata"];
          created_at?: components["parameters"]["rowFilter.customer_subscriptions.created_at"];
          updated_at?: components["parameters"]["rowFilter.customer_subscriptions.updated_at"];
          cancellation_reason?: components["parameters"]["rowFilter.customer_subscriptions.cancellation_reason"];
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
          /** @description Ordering */
          order?: components["parameters"]["order"];
          /** @description Limiting and Pagination */
          offset?: components["parameters"]["offset"];
          /** @description Limiting and Pagination */
          limit?: components["parameters"]["limit"];
        };
        header?: {
          /** @description Limiting and Pagination */
          Range?: components["parameters"]["range"];
          /** @description Limiting and Pagination */
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          /** @description Preference */
          Prefer?: components["parameters"]["preferCount"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["customer_subscriptions"][];
            "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["customer_subscriptions"][];
            "application/vnd.pgrst.object+json": components["schemas"]["customer_subscriptions"][];
            "text/csv": components["schemas"]["customer_subscriptions"][];
          };
        };
        /** @description Partial Content */
        206: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: {
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferPost"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["customer_subscriptions"];
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.customer_subscriptions.id"];
          user_id?: components["parameters"]["rowFilter.customer_subscriptions.user_id"];
          stripe_customer_id?: components["parameters"]["rowFilter.customer_subscriptions.stripe_customer_id"];
          stripe_subscription_id?: components["parameters"]["rowFilter.customer_subscriptions.stripe_subscription_id"];
          stripe_price_id?: components["parameters"]["rowFilter.customer_subscriptions.stripe_price_id"];
          plan_id?: components["parameters"]["rowFilter.customer_subscriptions.plan_id"];
          status?: components["parameters"]["rowFilter.customer_subscriptions.status"];
          current_period_start?: components["parameters"]["rowFilter.customer_subscriptions.current_period_start"];
          current_period_end?: components["parameters"]["rowFilter.customer_subscriptions.current_period_end"];
          cancel_at?: components["parameters"]["rowFilter.customer_subscriptions.cancel_at"];
          canceled_at?: components["parameters"]["rowFilter.customer_subscriptions.canceled_at"];
          trial_start?: components["parameters"]["rowFilter.customer_subscriptions.trial_start"];
          trial_end?: components["parameters"]["rowFilter.customer_subscriptions.trial_end"];
          metadata?: components["parameters"]["rowFilter.customer_subscriptions.metadata"];
          created_at?: components["parameters"]["rowFilter.customer_subscriptions.created_at"];
          updated_at?: components["parameters"]["rowFilter.customer_subscriptions.updated_at"];
          cancellation_reason?: components["parameters"]["rowFilter.customer_subscriptions.cancellation_reason"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.customer_subscriptions.id"];
          user_id?: components["parameters"]["rowFilter.customer_subscriptions.user_id"];
          stripe_customer_id?: components["parameters"]["rowFilter.customer_subscriptions.stripe_customer_id"];
          stripe_subscription_id?: components["parameters"]["rowFilter.customer_subscriptions.stripe_subscription_id"];
          stripe_price_id?: components["parameters"]["rowFilter.customer_subscriptions.stripe_price_id"];
          plan_id?: components["parameters"]["rowFilter.customer_subscriptions.plan_id"];
          status?: components["parameters"]["rowFilter.customer_subscriptions.status"];
          current_period_start?: components["parameters"]["rowFilter.customer_subscriptions.current_period_start"];
          current_period_end?: components["parameters"]["rowFilter.customer_subscriptions.current_period_end"];
          cancel_at?: components["parameters"]["rowFilter.customer_subscriptions.cancel_at"];
          canceled_at?: components["parameters"]["rowFilter.customer_subscriptions.canceled_at"];
          trial_start?: components["parameters"]["rowFilter.customer_subscriptions.trial_start"];
          trial_end?: components["parameters"]["rowFilter.customer_subscriptions.trial_end"];
          metadata?: components["parameters"]["rowFilter.customer_subscriptions.metadata"];
          created_at?: components["parameters"]["rowFilter.customer_subscriptions.created_at"];
          updated_at?: components["parameters"]["rowFilter.customer_subscriptions.updated_at"];
          cancellation_reason?: components["parameters"]["rowFilter.customer_subscriptions.cancellation_reason"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["customer_subscriptions"];
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    trace?: never;
  };
  "/user_activity_logs": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Detailed user activity tracking */
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.user_activity_logs.id"];
          user_id?: components["parameters"]["rowFilter.user_activity_logs.user_id"];
          activity_type?: components["parameters"]["rowFilter.user_activity_logs.activity_type"];
          activity_data?: components["parameters"]["rowFilter.user_activity_logs.activity_data"];
          ip_address?: components["parameters"]["rowFilter.user_activity_logs.ip_address"];
          user_agent?: components["parameters"]["rowFilter.user_activity_logs.user_agent"];
          created_at?: components["parameters"]["rowFilter.user_activity_logs.created_at"];
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
          /** @description Ordering */
          order?: components["parameters"]["order"];
          /** @description Limiting and Pagination */
          offset?: components["parameters"]["offset"];
          /** @description Limiting and Pagination */
          limit?: components["parameters"]["limit"];
        };
        header?: {
          /** @description Limiting and Pagination */
          Range?: components["parameters"]["range"];
          /** @description Limiting and Pagination */
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          /** @description Preference */
          Prefer?: components["parameters"]["preferCount"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["user_activity_logs"][];
            "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["user_activity_logs"][];
            "application/vnd.pgrst.object+json": components["schemas"]["user_activity_logs"][];
            "text/csv": components["schemas"]["user_activity_logs"][];
          };
        };
        /** @description Partial Content */
        206: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    /** Detailed user activity tracking */
    post: {
      parameters: {
        query?: {
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferPost"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["user_activity_logs"];
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    /** Detailed user activity tracking */
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.user_activity_logs.id"];
          user_id?: components["parameters"]["rowFilter.user_activity_logs.user_id"];
          activity_type?: components["parameters"]["rowFilter.user_activity_logs.activity_type"];
          activity_data?: components["parameters"]["rowFilter.user_activity_logs.activity_data"];
          ip_address?: components["parameters"]["rowFilter.user_activity_logs.ip_address"];
          user_agent?: components["parameters"]["rowFilter.user_activity_logs.user_agent"];
          created_at?: components["parameters"]["rowFilter.user_activity_logs.created_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    /** Detailed user activity tracking */
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.user_activity_logs.id"];
          user_id?: components["parameters"]["rowFilter.user_activity_logs.user_id"];
          activity_type?: components["parameters"]["rowFilter.user_activity_logs.activity_type"];
          activity_data?: components["parameters"]["rowFilter.user_activity_logs.activity_data"];
          ip_address?: components["parameters"]["rowFilter.user_activity_logs.ip_address"];
          user_agent?: components["parameters"]["rowFilter.user_activity_logs.user_agent"];
          created_at?: components["parameters"]["rowFilter.user_activity_logs.created_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["user_activity_logs"];
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    trace?: never;
  };
  "/project_kept_versions": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          history_id?: components["parameters"]["rowFilter.project_kept_versions.history_id"];
          project_id?: components["parameters"]["rowFilter.project_kept_versions.project_id"];
          version_number?: components["parameters"]["rowFilter.project_kept_versions.version_number"];
          is_first_version?: components["parameters"]["rowFilter.project_kept_versions.is_first_version"];
          project_data?: components["parameters"]["rowFilter.project_kept_versions.project_data"];
          created_at?: components["parameters"]["rowFilter.project_kept_versions.created_at"];
          created_by?: components["parameters"]["rowFilter.project_kept_versions.created_by"];
          current_name?: components["parameters"]["rowFilter.project_kept_versions.current_name"];
          version_name?: components["parameters"]["rowFilter.project_kept_versions.version_name"];
          version_status?: components["parameters"]["rowFilter.project_kept_versions.version_status"];
          version_type?: components["parameters"]["rowFilter.project_kept_versions.version_type"];
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
          /** @description Ordering */
          order?: components["parameters"]["order"];
          /** @description Limiting and Pagination */
          offset?: components["parameters"]["offset"];
          /** @description Limiting and Pagination */
          limit?: components["parameters"]["limit"];
        };
        header?: {
          /** @description Limiting and Pagination */
          Range?: components["parameters"]["range"];
          /** @description Limiting and Pagination */
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          /** @description Preference */
          Prefer?: components["parameters"]["preferCount"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["project_kept_versions"][];
            "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["project_kept_versions"][];
            "application/vnd.pgrst.object+json": components["schemas"]["project_kept_versions"][];
            "text/csv": components["schemas"]["project_kept_versions"][];
          };
        };
        /** @description Partial Content */
        206: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/error_logs": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.error_logs.id"];
          error_type?: components["parameters"]["rowFilter.error_logs.error_type"];
          error_code?: components["parameters"]["rowFilter.error_logs.error_code"];
          error_message?: components["parameters"]["rowFilter.error_logs.error_message"];
          error_stack?: components["parameters"]["rowFilter.error_logs.error_stack"];
          severity?: components["parameters"]["rowFilter.error_logs.severity"];
          user_id?: components["parameters"]["rowFilter.error_logs.user_id"];
          project_id?: components["parameters"]["rowFilter.error_logs.project_id"];
          brain_dump_id?: components["parameters"]["rowFilter.error_logs.brain_dump_id"];
          endpoint?: components["parameters"]["rowFilter.error_logs.endpoint"];
          http_method?: components["parameters"]["rowFilter.error_logs.http_method"];
          request_id?: components["parameters"]["rowFilter.error_logs.request_id"];
          user_agent?: components["parameters"]["rowFilter.error_logs.user_agent"];
          ip_address?: components["parameters"]["rowFilter.error_logs.ip_address"];
          llm_provider?: components["parameters"]["rowFilter.error_logs.llm_provider"];
          llm_model?: components["parameters"]["rowFilter.error_logs.llm_model"];
          prompt_tokens?: components["parameters"]["rowFilter.error_logs.prompt_tokens"];
          completion_tokens?: components["parameters"]["rowFilter.error_logs.completion_tokens"];
          total_tokens?: components["parameters"]["rowFilter.error_logs.total_tokens"];
          response_time_ms?: components["parameters"]["rowFilter.error_logs.response_time_ms"];
          llm_temperature?: components["parameters"]["rowFilter.error_logs.llm_temperature"];
          llm_max_tokens?: components["parameters"]["rowFilter.error_logs.llm_max_tokens"];
          operation_type?: components["parameters"]["rowFilter.error_logs.operation_type"];
          table_name?: components["parameters"]["rowFilter.error_logs.table_name"];
          record_id?: components["parameters"]["rowFilter.error_logs.record_id"];
          operation_payload?: components["parameters"]["rowFilter.error_logs.operation_payload"];
          metadata?: components["parameters"]["rowFilter.error_logs.metadata"];
          environment?: components["parameters"]["rowFilter.error_logs.environment"];
          app_version?: components["parameters"]["rowFilter.error_logs.app_version"];
          browser_info?: components["parameters"]["rowFilter.error_logs.browser_info"];
          resolved?: components["parameters"]["rowFilter.error_logs.resolved"];
          resolved_at?: components["parameters"]["rowFilter.error_logs.resolved_at"];
          resolved_by?: components["parameters"]["rowFilter.error_logs.resolved_by"];
          resolution_notes?: components["parameters"]["rowFilter.error_logs.resolution_notes"];
          created_at?: components["parameters"]["rowFilter.error_logs.created_at"];
          updated_at?: components["parameters"]["rowFilter.error_logs.updated_at"];
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
          /** @description Ordering */
          order?: components["parameters"]["order"];
          /** @description Limiting and Pagination */
          offset?: components["parameters"]["offset"];
          /** @description Limiting and Pagination */
          limit?: components["parameters"]["limit"];
        };
        header?: {
          /** @description Limiting and Pagination */
          Range?: components["parameters"]["range"];
          /** @description Limiting and Pagination */
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          /** @description Preference */
          Prefer?: components["parameters"]["preferCount"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["error_logs"][];
            "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["error_logs"][];
            "application/vnd.pgrst.object+json": components["schemas"]["error_logs"][];
            "text/csv": components["schemas"]["error_logs"][];
          };
        };
        /** @description Partial Content */
        206: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: {
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferPost"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["error_logs"];
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.error_logs.id"];
          error_type?: components["parameters"]["rowFilter.error_logs.error_type"];
          error_code?: components["parameters"]["rowFilter.error_logs.error_code"];
          error_message?: components["parameters"]["rowFilter.error_logs.error_message"];
          error_stack?: components["parameters"]["rowFilter.error_logs.error_stack"];
          severity?: components["parameters"]["rowFilter.error_logs.severity"];
          user_id?: components["parameters"]["rowFilter.error_logs.user_id"];
          project_id?: components["parameters"]["rowFilter.error_logs.project_id"];
          brain_dump_id?: components["parameters"]["rowFilter.error_logs.brain_dump_id"];
          endpoint?: components["parameters"]["rowFilter.error_logs.endpoint"];
          http_method?: components["parameters"]["rowFilter.error_logs.http_method"];
          request_id?: components["parameters"]["rowFilter.error_logs.request_id"];
          user_agent?: components["parameters"]["rowFilter.error_logs.user_agent"];
          ip_address?: components["parameters"]["rowFilter.error_logs.ip_address"];
          llm_provider?: components["parameters"]["rowFilter.error_logs.llm_provider"];
          llm_model?: components["parameters"]["rowFilter.error_logs.llm_model"];
          prompt_tokens?: components["parameters"]["rowFilter.error_logs.prompt_tokens"];
          completion_tokens?: components["parameters"]["rowFilter.error_logs.completion_tokens"];
          total_tokens?: components["parameters"]["rowFilter.error_logs.total_tokens"];
          response_time_ms?: components["parameters"]["rowFilter.error_logs.response_time_ms"];
          llm_temperature?: components["parameters"]["rowFilter.error_logs.llm_temperature"];
          llm_max_tokens?: components["parameters"]["rowFilter.error_logs.llm_max_tokens"];
          operation_type?: components["parameters"]["rowFilter.error_logs.operation_type"];
          table_name?: components["parameters"]["rowFilter.error_logs.table_name"];
          record_id?: components["parameters"]["rowFilter.error_logs.record_id"];
          operation_payload?: components["parameters"]["rowFilter.error_logs.operation_payload"];
          metadata?: components["parameters"]["rowFilter.error_logs.metadata"];
          environment?: components["parameters"]["rowFilter.error_logs.environment"];
          app_version?: components["parameters"]["rowFilter.error_logs.app_version"];
          browser_info?: components["parameters"]["rowFilter.error_logs.browser_info"];
          resolved?: components["parameters"]["rowFilter.error_logs.resolved"];
          resolved_at?: components["parameters"]["rowFilter.error_logs.resolved_at"];
          resolved_by?: components["parameters"]["rowFilter.error_logs.resolved_by"];
          resolution_notes?: components["parameters"]["rowFilter.error_logs.resolution_notes"];
          created_at?: components["parameters"]["rowFilter.error_logs.created_at"];
          updated_at?: components["parameters"]["rowFilter.error_logs.updated_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.error_logs.id"];
          error_type?: components["parameters"]["rowFilter.error_logs.error_type"];
          error_code?: components["parameters"]["rowFilter.error_logs.error_code"];
          error_message?: components["parameters"]["rowFilter.error_logs.error_message"];
          error_stack?: components["parameters"]["rowFilter.error_logs.error_stack"];
          severity?: components["parameters"]["rowFilter.error_logs.severity"];
          user_id?: components["parameters"]["rowFilter.error_logs.user_id"];
          project_id?: components["parameters"]["rowFilter.error_logs.project_id"];
          brain_dump_id?: components["parameters"]["rowFilter.error_logs.brain_dump_id"];
          endpoint?: components["parameters"]["rowFilter.error_logs.endpoint"];
          http_method?: components["parameters"]["rowFilter.error_logs.http_method"];
          request_id?: components["parameters"]["rowFilter.error_logs.request_id"];
          user_agent?: components["parameters"]["rowFilter.error_logs.user_agent"];
          ip_address?: components["parameters"]["rowFilter.error_logs.ip_address"];
          llm_provider?: components["parameters"]["rowFilter.error_logs.llm_provider"];
          llm_model?: components["parameters"]["rowFilter.error_logs.llm_model"];
          prompt_tokens?: components["parameters"]["rowFilter.error_logs.prompt_tokens"];
          completion_tokens?: components["parameters"]["rowFilter.error_logs.completion_tokens"];
          total_tokens?: components["parameters"]["rowFilter.error_logs.total_tokens"];
          response_time_ms?: components["parameters"]["rowFilter.error_logs.response_time_ms"];
          llm_temperature?: components["parameters"]["rowFilter.error_logs.llm_temperature"];
          llm_max_tokens?: components["parameters"]["rowFilter.error_logs.llm_max_tokens"];
          operation_type?: components["parameters"]["rowFilter.error_logs.operation_type"];
          table_name?: components["parameters"]["rowFilter.error_logs.table_name"];
          record_id?: components["parameters"]["rowFilter.error_logs.record_id"];
          operation_payload?: components["parameters"]["rowFilter.error_logs.operation_payload"];
          metadata?: components["parameters"]["rowFilter.error_logs.metadata"];
          environment?: components["parameters"]["rowFilter.error_logs.environment"];
          app_version?: components["parameters"]["rowFilter.error_logs.app_version"];
          browser_info?: components["parameters"]["rowFilter.error_logs.browser_info"];
          resolved?: components["parameters"]["rowFilter.error_logs.resolved"];
          resolved_at?: components["parameters"]["rowFilter.error_logs.resolved_at"];
          resolved_by?: components["parameters"]["rowFilter.error_logs.resolved_by"];
          resolution_notes?: components["parameters"]["rowFilter.error_logs.resolution_notes"];
          created_at?: components["parameters"]["rowFilter.error_logs.created_at"];
          updated_at?: components["parameters"]["rowFilter.error_logs.updated_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["error_logs"];
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    trace?: never;
  };
  "/user_notifications": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.user_notifications.id"];
          user_id?: components["parameters"]["rowFilter.user_notifications.user_id"];
          type?: components["parameters"]["rowFilter.user_notifications.type"];
          title?: components["parameters"]["rowFilter.user_notifications.title"];
          message?: components["parameters"]["rowFilter.user_notifications.message"];
          priority?: components["parameters"]["rowFilter.user_notifications.priority"];
          action_url?: components["parameters"]["rowFilter.user_notifications.action_url"];
          read_at?: components["parameters"]["rowFilter.user_notifications.read_at"];
          dismissed_at?: components["parameters"]["rowFilter.user_notifications.dismissed_at"];
          expires_at?: components["parameters"]["rowFilter.user_notifications.expires_at"];
          created_at?: components["parameters"]["rowFilter.user_notifications.created_at"];
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
          /** @description Ordering */
          order?: components["parameters"]["order"];
          /** @description Limiting and Pagination */
          offset?: components["parameters"]["offset"];
          /** @description Limiting and Pagination */
          limit?: components["parameters"]["limit"];
        };
        header?: {
          /** @description Limiting and Pagination */
          Range?: components["parameters"]["range"];
          /** @description Limiting and Pagination */
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          /** @description Preference */
          Prefer?: components["parameters"]["preferCount"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["user_notifications"][];
            "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["user_notifications"][];
            "application/vnd.pgrst.object+json": components["schemas"]["user_notifications"][];
            "text/csv": components["schemas"]["user_notifications"][];
          };
        };
        /** @description Partial Content */
        206: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: {
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferPost"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["user_notifications"];
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.user_notifications.id"];
          user_id?: components["parameters"]["rowFilter.user_notifications.user_id"];
          type?: components["parameters"]["rowFilter.user_notifications.type"];
          title?: components["parameters"]["rowFilter.user_notifications.title"];
          message?: components["parameters"]["rowFilter.user_notifications.message"];
          priority?: components["parameters"]["rowFilter.user_notifications.priority"];
          action_url?: components["parameters"]["rowFilter.user_notifications.action_url"];
          read_at?: components["parameters"]["rowFilter.user_notifications.read_at"];
          dismissed_at?: components["parameters"]["rowFilter.user_notifications.dismissed_at"];
          expires_at?: components["parameters"]["rowFilter.user_notifications.expires_at"];
          created_at?: components["parameters"]["rowFilter.user_notifications.created_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.user_notifications.id"];
          user_id?: components["parameters"]["rowFilter.user_notifications.user_id"];
          type?: components["parameters"]["rowFilter.user_notifications.type"];
          title?: components["parameters"]["rowFilter.user_notifications.title"];
          message?: components["parameters"]["rowFilter.user_notifications.message"];
          priority?: components["parameters"]["rowFilter.user_notifications.priority"];
          action_url?: components["parameters"]["rowFilter.user_notifications.action_url"];
          read_at?: components["parameters"]["rowFilter.user_notifications.read_at"];
          dismissed_at?: components["parameters"]["rowFilter.user_notifications.dismissed_at"];
          expires_at?: components["parameters"]["rowFilter.user_notifications.expires_at"];
          created_at?: components["parameters"]["rowFilter.user_notifications.created_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["user_notifications"];
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    trace?: never;
  };
  "/system_metrics": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Real-time system performance metrics */
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.system_metrics.id"];
          metric_name?: components["parameters"]["rowFilter.system_metrics.metric_name"];
          metric_value?: components["parameters"]["rowFilter.system_metrics.metric_value"];
          metric_unit?: components["parameters"]["rowFilter.system_metrics.metric_unit"];
          metric_description?: components["parameters"]["rowFilter.system_metrics.metric_description"];
          recorded_at?: components["parameters"]["rowFilter.system_metrics.recorded_at"];
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
          /** @description Ordering */
          order?: components["parameters"]["order"];
          /** @description Limiting and Pagination */
          offset?: components["parameters"]["offset"];
          /** @description Limiting and Pagination */
          limit?: components["parameters"]["limit"];
        };
        header?: {
          /** @description Limiting and Pagination */
          Range?: components["parameters"]["range"];
          /** @description Limiting and Pagination */
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          /** @description Preference */
          Prefer?: components["parameters"]["preferCount"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["system_metrics"][];
            "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["system_metrics"][];
            "application/vnd.pgrst.object+json": components["schemas"]["system_metrics"][];
            "text/csv": components["schemas"]["system_metrics"][];
          };
        };
        /** @description Partial Content */
        206: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    /** Real-time system performance metrics */
    post: {
      parameters: {
        query?: {
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferPost"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["system_metrics"];
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    /** Real-time system performance metrics */
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.system_metrics.id"];
          metric_name?: components["parameters"]["rowFilter.system_metrics.metric_name"];
          metric_value?: components["parameters"]["rowFilter.system_metrics.metric_value"];
          metric_unit?: components["parameters"]["rowFilter.system_metrics.metric_unit"];
          metric_description?: components["parameters"]["rowFilter.system_metrics.metric_description"];
          recorded_at?: components["parameters"]["rowFilter.system_metrics.recorded_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    /** Real-time system performance metrics */
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.system_metrics.id"];
          metric_name?: components["parameters"]["rowFilter.system_metrics.metric_name"];
          metric_value?: components["parameters"]["rowFilter.system_metrics.metric_value"];
          metric_unit?: components["parameters"]["rowFilter.system_metrics.metric_unit"];
          metric_description?: components["parameters"]["rowFilter.system_metrics.metric_description"];
          recorded_at?: components["parameters"]["rowFilter.system_metrics.recorded_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["system_metrics"];
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    trace?: never;
  };
  "/phase_tasks": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.phase_tasks.id"];
          phase_id?: components["parameters"]["rowFilter.phase_tasks.phase_id"];
          task_id?: components["parameters"]["rowFilter.phase_tasks.task_id"];
          suggested_start_date?: components["parameters"]["rowFilter.phase_tasks.suggested_start_date"];
          assignment_reason?: components["parameters"]["rowFilter.phase_tasks.assignment_reason"];
          created_at?: components["parameters"]["rowFilter.phase_tasks.created_at"];
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
          /** @description Ordering */
          order?: components["parameters"]["order"];
          /** @description Limiting and Pagination */
          offset?: components["parameters"]["offset"];
          /** @description Limiting and Pagination */
          limit?: components["parameters"]["limit"];
        };
        header?: {
          /** @description Limiting and Pagination */
          Range?: components["parameters"]["range"];
          /** @description Limiting and Pagination */
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          /** @description Preference */
          Prefer?: components["parameters"]["preferCount"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["phase_tasks"][];
            "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["phase_tasks"][];
            "application/vnd.pgrst.object+json": components["schemas"]["phase_tasks"][];
            "text/csv": components["schemas"]["phase_tasks"][];
          };
        };
        /** @description Partial Content */
        206: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: {
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferPost"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["phase_tasks"];
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.phase_tasks.id"];
          phase_id?: components["parameters"]["rowFilter.phase_tasks.phase_id"];
          task_id?: components["parameters"]["rowFilter.phase_tasks.task_id"];
          suggested_start_date?: components["parameters"]["rowFilter.phase_tasks.suggested_start_date"];
          assignment_reason?: components["parameters"]["rowFilter.phase_tasks.assignment_reason"];
          created_at?: components["parameters"]["rowFilter.phase_tasks.created_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.phase_tasks.id"];
          phase_id?: components["parameters"]["rowFilter.phase_tasks.phase_id"];
          task_id?: components["parameters"]["rowFilter.phase_tasks.task_id"];
          suggested_start_date?: components["parameters"]["rowFilter.phase_tasks.suggested_start_date"];
          assignment_reason?: components["parameters"]["rowFilter.phase_tasks.assignment_reason"];
          created_at?: components["parameters"]["rowFilter.phase_tasks.created_at"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["phase_tasks"];
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    trace?: never;
  };
  "/projects_history": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          history_id?: components["parameters"]["rowFilter.projects_history.history_id"];
          project_id?: components["parameters"]["rowFilter.projects_history.project_id"];
          version_number?: components["parameters"]["rowFilter.projects_history.version_number"];
          is_first_version?: components["parameters"]["rowFilter.projects_history.is_first_version"];
          project_data?: components["parameters"]["rowFilter.projects_history.project_data"];
          created_at?: components["parameters"]["rowFilter.projects_history.created_at"];
          created_by?: components["parameters"]["rowFilter.projects_history.created_by"];
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
          /** @description Ordering */
          order?: components["parameters"]["order"];
          /** @description Limiting and Pagination */
          offset?: components["parameters"]["offset"];
          /** @description Limiting and Pagination */
          limit?: components["parameters"]["limit"];
        };
        header?: {
          /** @description Limiting and Pagination */
          Range?: components["parameters"]["range"];
          /** @description Limiting and Pagination */
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          /** @description Preference */
          Prefer?: components["parameters"]["preferCount"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["projects_history"][];
            "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["projects_history"][];
            "application/vnd.pgrst.object+json": components["schemas"]["projects_history"][];
            "text/csv": components["schemas"]["projects_history"][];
          };
        };
        /** @description Partial Content */
        206: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: {
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferPost"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["projects_history"];
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          history_id?: components["parameters"]["rowFilter.projects_history.history_id"];
          project_id?: components["parameters"]["rowFilter.projects_history.project_id"];
          version_number?: components["parameters"]["rowFilter.projects_history.version_number"];
          is_first_version?: components["parameters"]["rowFilter.projects_history.is_first_version"];
          project_data?: components["parameters"]["rowFilter.projects_history.project_data"];
          created_at?: components["parameters"]["rowFilter.projects_history.created_at"];
          created_by?: components["parameters"]["rowFilter.projects_history.created_by"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch: {
      parameters: {
        query?: {
          history_id?: components["parameters"]["rowFilter.projects_history.history_id"];
          project_id?: components["parameters"]["rowFilter.projects_history.project_id"];
          version_number?: components["parameters"]["rowFilter.projects_history.version_number"];
          is_first_version?: components["parameters"]["rowFilter.projects_history.is_first_version"];
          project_data?: components["parameters"]["rowFilter.projects_history.project_data"];
          created_at?: components["parameters"]["rowFilter.projects_history.created_at"];
          created_by?: components["parameters"]["rowFilter.projects_history.created_by"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["projects_history"];
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    trace?: never;
  };
  "/user_calendar_tokens": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.user_calendar_tokens.id"];
          user_id?: components["parameters"]["rowFilter.user_calendar_tokens.user_id"];
          access_token?: components["parameters"]["rowFilter.user_calendar_tokens.access_token"];
          refresh_token?: components["parameters"]["rowFilter.user_calendar_tokens.refresh_token"];
          expiry_date?: components["parameters"]["rowFilter.user_calendar_tokens.expiry_date"];
          token_type?: components["parameters"]["rowFilter.user_calendar_tokens.token_type"];
          scope?: components["parameters"]["rowFilter.user_calendar_tokens.scope"];
          created_at?: components["parameters"]["rowFilter.user_calendar_tokens.created_at"];
          updated_at?: components["parameters"]["rowFilter.user_calendar_tokens.updated_at"];
          google_email?: components["parameters"]["rowFilter.user_calendar_tokens.google_email"];
          google_user_id?: components["parameters"]["rowFilter.user_calendar_tokens.google_user_id"];
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
          /** @description Ordering */
          order?: components["parameters"]["order"];
          /** @description Limiting and Pagination */
          offset?: components["parameters"]["offset"];
          /** @description Limiting and Pagination */
          limit?: components["parameters"]["limit"];
        };
        header?: {
          /** @description Limiting and Pagination */
          Range?: components["parameters"]["range"];
          /** @description Limiting and Pagination */
          "Range-Unit"?: components["parameters"]["rangeUnit"];
          /** @description Preference */
          Prefer?: components["parameters"]["preferCount"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["user_calendar_tokens"][];
            "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["user_calendar_tokens"][];
            "application/vnd.pgrst.object+json": components["schemas"]["user_calendar_tokens"][];
            "text/csv": components["schemas"]["user_calendar_tokens"][];
          };
        };
        /** @description Partial Content */
        206: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: {
          /** @description Filtering Columns */
          select?: components["parameters"]["select"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferPost"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["user_calendar_tokens"];
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.user_calendar_tokens.id"];
          user_id?: components["parameters"]["rowFilter.user_calendar_tokens.user_id"];
          access_token?: components["parameters"]["rowFilter.user_calendar_tokens.access_token"];
          refresh_token?: components["parameters"]["rowFilter.user_calendar_tokens.refresh_token"];
          expiry_date?: components["parameters"]["rowFilter.user_calendar_tokens.expiry_date"];
          token_type?: components["parameters"]["rowFilter.user_calendar_tokens.token_type"];
          scope?: components["parameters"]["rowFilter.user_calendar_tokens.scope"];
          created_at?: components["parameters"]["rowFilter.user_calendar_tokens.created_at"];
          updated_at?: components["parameters"]["rowFilter.user_calendar_tokens.updated_at"];
          google_email?: components["parameters"]["rowFilter.user_calendar_tokens.google_email"];
          google_user_id?: components["parameters"]["rowFilter.user_calendar_tokens.google_user_id"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch: {
      parameters: {
        query?: {
          id?: components["parameters"]["rowFilter.user_calendar_tokens.id"];
          user_id?: components["parameters"]["rowFilter.user_calendar_tokens.user_id"];
          access_token?: components["parameters"]["rowFilter.user_calendar_tokens.access_token"];
          refresh_token?: components["parameters"]["rowFilter.user_calendar_tokens.refresh_token"];
          expiry_date?: components["parameters"]["rowFilter.user_calendar_tokens.expiry_date"];
          token_type?: components["parameters"]["rowFilter.user_calendar_tokens.token_type"];
          scope?: components["parameters"]["rowFilter.user_calendar_tokens.scope"];
          created_at?: components["parameters"]["rowFilter.user_calendar_tokens.created_at"];
          updated_at?: components["parameters"]["rowFilter.user_calendar_tokens.updated_at"];
          google_email?: components["parameters"]["rowFilter.user_calendar_tokens.google_email"];
          google_user_id?: components["parameters"]["rowFilter.user_calendar_tokens.google_user_id"];
        };
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferReturn"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: components["requestBodies"]["user_calendar_tokens"];
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    trace?: never;
  };
  "/rpc/is_admin": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferParams"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody: components["requestBodies"]["Args"];
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/rpc/search_all_content": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query: {
          search_query: string;
          current_user_id: string;
          items_per_category?: number;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferParams"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            /** Format: uuid */
            current_user_id: string;
            /** Format: integer */
            items_per_category?: number;
            /** Format: text */
            search_query: string;
          };
          "application/vnd.pgrst.object+json;nulls=stripped": {
            /** Format: uuid */
            current_user_id: string;
            /** Format: integer */
            items_per_category?: number;
            /** Format: text */
            search_query: string;
          };
          "application/vnd.pgrst.object+json": {
            /** Format: uuid */
            current_user_id: string;
            /** Format: integer */
            items_per_category?: number;
            /** Format: text */
            search_query: string;
          };
          "text/csv": {
            /** Format: uuid */
            current_user_id: string;
            /** Format: integer */
            items_per_category?: number;
            /** Format: text */
            search_query: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/rpc/get_project_statistics": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Optimized function to calculate project statistics without fetching all task data, using database aggregations for efficiency */
    get: {
      parameters: {
        query: {
          p_project_id: string;
          p_user_id: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    /** Optimized function to calculate project statistics without fetching all task data, using database aggregations for efficiency */
    post: {
      parameters: {
        query?: never;
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferParams"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            /** Format: uuid */
            p_project_id: string;
            /** Format: uuid */
            p_user_id: string;
          };
          "application/vnd.pgrst.object+json;nulls=stripped": {
            /** Format: uuid */
            p_project_id: string;
            /** Format: uuid */
            p_user_id: string;
          };
          "application/vnd.pgrst.object+json": {
            /** Format: uuid */
            p_project_id: string;
            /** Format: uuid */
            p_user_id: string;
          };
          "text/csv": {
            /** Format: uuid */
            p_project_id: string;
            /** Format: uuid */
            p_user_id: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/rpc/cancel_job_with_reason": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Enhanced single job cancellation with reason tracking and status validation */
    get: {
      parameters: {
        query: {
          p_job_id: string;
          p_reason: string;
          p_allow_processing?: boolean;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    /** Enhanced single job cancellation with reason tracking and status validation */
    post: {
      parameters: {
        query?: never;
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferParams"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            /** Format: boolean */
            p_allow_processing?: boolean;
            /** Format: uuid */
            p_job_id: string;
            /** Format: text */
            p_reason: string;
          };
          "application/vnd.pgrst.object+json;nulls=stripped": {
            /** Format: boolean */
            p_allow_processing?: boolean;
            /** Format: uuid */
            p_job_id: string;
            /** Format: text */
            p_reason: string;
          };
          "application/vnd.pgrst.object+json": {
            /** Format: boolean */
            p_allow_processing?: boolean;
            /** Format: uuid */
            p_job_id: string;
            /** Format: text */
            p_reason: string;
          };
          "text/csv": {
            /** Format: boolean */
            p_allow_processing?: boolean;
            /** Format: uuid */
            p_job_id: string;
            /** Format: text */
            p_reason: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/rpc/add_queue_job": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Adds a new job to the queue with deduplication support and proper enum type casting */
    get: {
      parameters: {
        query: {
          p_user_id: string;
          p_job_type: string;
          p_metadata?: string;
          p_priority?: number;
          p_scheduled_for?: string;
          p_dedup_key?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    /** Adds a new job to the queue with deduplication support and proper enum type casting */
    post: {
      parameters: {
        query?: never;
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferParams"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            /** Format: text */
            p_dedup_key?: string;
            /** Format: text */
            p_job_type: string;
            /** Format: jsonb */
            p_metadata?: unknown;
            /** Format: integer */
            p_priority?: number;
            /** Format: timestamp with time zone */
            p_scheduled_for?: string;
            /** Format: uuid */
            p_user_id: string;
          };
          "application/vnd.pgrst.object+json;nulls=stripped": {
            /** Format: text */
            p_dedup_key?: string;
            /** Format: text */
            p_job_type: string;
            /** Format: jsonb */
            p_metadata?: unknown;
            /** Format: integer */
            p_priority?: number;
            /** Format: timestamp with time zone */
            p_scheduled_for?: string;
            /** Format: uuid */
            p_user_id: string;
          };
          "application/vnd.pgrst.object+json": {
            /** Format: text */
            p_dedup_key?: string;
            /** Format: text */
            p_job_type: string;
            /** Format: jsonb */
            p_metadata?: unknown;
            /** Format: integer */
            p_priority?: number;
            /** Format: timestamp with time zone */
            p_scheduled_for?: string;
            /** Format: uuid */
            p_user_id: string;
          };
          "text/csv": {
            /** Format: text */
            p_dedup_key?: string;
            /** Format: text */
            p_job_type: string;
            /** Format: jsonb */
            p_metadata?: unknown;
            /** Format: integer */
            p_priority?: number;
            /** Format: timestamp with time zone */
            p_scheduled_for?: string;
            /** Format: uuid */
            p_user_id: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/rpc/restore_deleted_task": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query: {
          task_id_param: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferParams"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            /** Format: uuid */
            task_id_param: string;
          };
          "application/vnd.pgrst.object+json;nulls=stripped": {
            /** Format: uuid */
            task_id_param: string;
          };
          "application/vnd.pgrst.object+json": {
            /** Format: uuid */
            task_id_param: string;
          };
          "text/csv": {
            /** Format: uuid */
            task_id_param: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/rpc/search_all_similar": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query: {
          query_embedding: string;
          similarity_threshold?: number;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferParams"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            /** Format: public.vector */
            query_embedding: string;
            /** Format: double precision */
            similarity_threshold?: number;
          };
          "application/vnd.pgrst.object+json;nulls=stripped": {
            /** Format: public.vector */
            query_embedding: string;
            /** Format: double precision */
            similarity_threshold?: number;
          };
          "application/vnd.pgrst.object+json": {
            /** Format: public.vector */
            query_embedding: string;
            /** Format: double precision */
            similarity_threshold?: number;
          };
          "text/csv": {
            /** Format: public.vector */
            query_embedding: string;
            /** Format: double precision */
            similarity_threshold?: number;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/rpc/get_daily_active_users": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns daily active user counts for date range */
    get: {
      parameters: {
        query: {
          start_date: string;
          end_date: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    /** Returns daily active user counts for date range */
    post: {
      parameters: {
        query?: never;
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferParams"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            /** Format: date */
            end_date: string;
            /** Format: date */
            start_date: string;
          };
          "application/vnd.pgrst.object+json;nulls=stripped": {
            /** Format: date */
            end_date: string;
            /** Format: date */
            start_date: string;
          };
          "application/vnd.pgrst.object+json": {
            /** Format: date */
            end_date: string;
            /** Format: date */
            start_date: string;
          };
          "text/csv": {
            /** Format: date */
            end_date: string;
            /** Format: date */
            start_date: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/rpc/check_onboarding_complete": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query: {
          user_id_param: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferParams"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            /** Format: uuid */
            user_id_param: string;
          };
          "application/vnd.pgrst.object+json;nulls=stripped": {
            /** Format: uuid */
            user_id_param: string;
          };
          "application/vnd.pgrst.object+json": {
            /** Format: uuid */
            user_id_param: string;
          };
          "text/csv": {
            /** Format: uuid */
            user_id_param: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/rpc/get_user_failed_payments_count": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query: {
          p_user_id: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferParams"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody: components["requestBodies"]["Args2"];
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/rpc/brain_dump_cleanup_preview": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferParams"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody: components["requestBodies"]["Args"];
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/rpc/get_visitor_overview": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferParams"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody: components["requestBodies"]["Args"];
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/rpc/update_brief_generation_progress": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query: {
          p_brief_id: string;
          p_projects_completed: number;
          p_life_goals_completed: number;
          p_total_projects: number;
          p_total_life_goals: number;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferParams"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            /** Format: uuid */
            p_brief_id: string;
            /** Format: integer */
            p_life_goals_completed: number;
            /** Format: integer */
            p_projects_completed: number;
            /** Format: integer */
            p_total_life_goals: number;
            /** Format: integer */
            p_total_projects: number;
          };
          "application/vnd.pgrst.object+json;nulls=stripped": {
            /** Format: uuid */
            p_brief_id: string;
            /** Format: integer */
            p_life_goals_completed: number;
            /** Format: integer */
            p_projects_completed: number;
            /** Format: integer */
            p_total_life_goals: number;
            /** Format: integer */
            p_total_projects: number;
          };
          "application/vnd.pgrst.object+json": {
            /** Format: uuid */
            p_brief_id: string;
            /** Format: integer */
            p_life_goals_completed: number;
            /** Format: integer */
            p_projects_completed: number;
            /** Format: integer */
            p_total_life_goals: number;
            /** Format: integer */
            p_total_projects: number;
          };
          "text/csv": {
            /** Format: uuid */
            p_brief_id: string;
            /** Format: integer */
            p_life_goals_completed: number;
            /** Format: integer */
            p_projects_completed: number;
            /** Format: integer */
            p_total_life_goals: number;
            /** Format: integer */
            p_total_projects: number;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/rpc/reorder_phases_with_tasks": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Complete phase reordering operation with optional task date clearing */
    get: {
      parameters: {
        query: {
          p_project_id: string;
          p_phase_updates: string;
          p_clear_task_dates?: boolean;
          p_affected_task_ids?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    /** Complete phase reordering operation with optional task date clearing */
    post: {
      parameters: {
        query?: never;
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferParams"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            /** Format: uuid[] */
            p_affected_task_ids?: string[];
            /** Format: boolean */
            p_clear_task_dates?: boolean;
            /** Format: jsonb */
            p_phase_updates: unknown;
            /** Format: uuid */
            p_project_id: string;
          };
          "application/vnd.pgrst.object+json;nulls=stripped": {
            /** Format: uuid[] */
            p_affected_task_ids?: string[];
            /** Format: boolean */
            p_clear_task_dates?: boolean;
            /** Format: jsonb */
            p_phase_updates: unknown;
            /** Format: uuid */
            p_project_id: string;
          };
          "application/vnd.pgrst.object+json": {
            /** Format: uuid[] */
            p_affected_task_ids?: string[];
            /** Format: boolean */
            p_clear_task_dates?: boolean;
            /** Format: jsonb */
            p_phase_updates: unknown;
            /** Format: uuid */
            p_project_id: string;
          };
          "text/csv": {
            /** Format: uuid[] */
            p_affected_task_ids?: string[];
            /** Format: boolean */
            p_clear_task_dates?: boolean;
            /** Format: jsonb */
            p_phase_updates: unknown;
            /** Format: uuid */
            p_project_id: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/rpc/get_user_trial_status": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query: {
          p_user_id: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferParams"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody: components["requestBodies"]["Args2"];
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/rpc/generate_recurring_instances": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Generates recurring task instances for a date range */
    get: {
      parameters: {
        query: {
          p_task_id: string;
          p_start_date: string;
          p_end_date: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    /** Generates recurring task instances for a date range */
    post: {
      parameters: {
        query?: never;
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferParams"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            /** Format: date */
            p_end_date: string;
            /** Format: date */
            p_start_date: string;
            /** Format: uuid */
            p_task_id: string;
          };
          "application/vnd.pgrst.object+json;nulls=stripped": {
            /** Format: date */
            p_end_date: string;
            /** Format: date */
            p_start_date: string;
            /** Format: uuid */
            p_task_id: string;
          };
          "application/vnd.pgrst.object+json": {
            /** Format: date */
            p_end_date: string;
            /** Format: date */
            p_start_date: string;
            /** Format: uuid */
            p_task_id: string;
          };
          "text/csv": {
            /** Format: date */
            p_end_date: string;
            /** Format: date */
            p_start_date: string;
            /** Format: uuid */
            p_task_id: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/rpc/complete_recurring_instance": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Marks a recurring task instance as completed */
    get: {
      parameters: {
        query: {
          p_task_id: string;
          p_instance_date: string;
          p_user_id: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    /** Marks a recurring task instance as completed */
    post: {
      parameters: {
        query?: never;
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferParams"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            /** Format: date */
            p_instance_date: string;
            /** Format: uuid */
            p_task_id: string;
            /** Format: uuid */
            p_user_id: string;
          };
          "application/vnd.pgrst.object+json;nulls=stripped": {
            /** Format: date */
            p_instance_date: string;
            /** Format: uuid */
            p_task_id: string;
            /** Format: uuid */
            p_user_id: string;
          };
          "application/vnd.pgrst.object+json": {
            /** Format: date */
            p_instance_date: string;
            /** Format: uuid */
            p_task_id: string;
            /** Format: uuid */
            p_user_id: string;
          };
          "text/csv": {
            /** Format: date */
            p_instance_date: string;
            /** Format: uuid */
            p_task_id: string;
            /** Format: uuid */
            p_user_id: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/rpc/start_or_resume_brief_generation": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query: {
          p_user_id: string;
          p_brief_date: string;
          p_force_regenerate?: boolean;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferParams"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            /** Format: date */
            p_brief_date: string;
            /** Format: boolean */
            p_force_regenerate?: boolean;
            /** Format: uuid */
            p_user_id: string;
          };
          "application/vnd.pgrst.object+json;nulls=stripped": {
            /** Format: date */
            p_brief_date: string;
            /** Format: boolean */
            p_force_regenerate?: boolean;
            /** Format: uuid */
            p_user_id: string;
          };
          "application/vnd.pgrst.object+json": {
            /** Format: date */
            p_brief_date: string;
            /** Format: boolean */
            p_force_regenerate?: boolean;
            /** Format: uuid */
            p_user_id: string;
          };
          "text/csv": {
            /** Format: date */
            p_brief_date: string;
            /** Format: boolean */
            p_force_regenerate?: boolean;
            /** Format: uuid */
            p_user_id: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/rpc/get_dashboard_data": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Optimized function to fetch all dashboard data in a single query, reducing multiple round trips to the database */
    get: {
      parameters: {
        query: {
          p_user_id: string;
          p_timezone?: string;
          p_date_start?: string;
          p_date_end?: string;
          p_today?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    /** Optimized function to fetch all dashboard data in a single query, reducing multiple round trips to the database */
    post: {
      parameters: {
        query?: never;
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferParams"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            /** Format: date */
            p_date_end?: string;
            /** Format: date */
            p_date_start?: string;
            /** Format: text */
            p_timezone?: string;
            /** Format: date */
            p_today?: string;
            /** Format: uuid */
            p_user_id: string;
          };
          "application/vnd.pgrst.object+json;nulls=stripped": {
            /** Format: date */
            p_date_end?: string;
            /** Format: date */
            p_date_start?: string;
            /** Format: text */
            p_timezone?: string;
            /** Format: date */
            p_today?: string;
            /** Format: uuid */
            p_user_id: string;
          };
          "application/vnd.pgrst.object+json": {
            /** Format: date */
            p_date_end?: string;
            /** Format: date */
            p_date_start?: string;
            /** Format: text */
            p_timezone?: string;
            /** Format: date */
            p_today?: string;
            /** Format: uuid */
            p_user_id: string;
          };
          "text/csv": {
            /** Format: date */
            p_date_end?: string;
            /** Format: date */
            p_date_start?: string;
            /** Format: text */
            p_timezone?: string;
            /** Format: date */
            p_today?: string;
            /** Format: uuid */
            p_user_id: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/rpc/cancel_brief_jobs_for_date": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Specialized function to cancel brief generation jobs for a specific date */
    get: {
      parameters: {
        query: {
          p_user_id: string;
          p_brief_date: string;
          p_exclude_job_id?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    /** Specialized function to cancel brief generation jobs for a specific date */
    post: {
      parameters: {
        query?: never;
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferParams"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            /** Format: text */
            p_brief_date: string;
            /** Format: uuid */
            p_exclude_job_id?: string;
            /** Format: uuid */
            p_user_id: string;
          };
          "application/vnd.pgrst.object+json;nulls=stripped": {
            /** Format: text */
            p_brief_date: string;
            /** Format: uuid */
            p_exclude_job_id?: string;
            /** Format: uuid */
            p_user_id: string;
          };
          "application/vnd.pgrst.object+json": {
            /** Format: text */
            p_brief_date: string;
            /** Format: uuid */
            p_exclude_job_id?: string;
            /** Format: uuid */
            p_user_id: string;
          };
          "text/csv": {
            /** Format: text */
            p_brief_date: string;
            /** Format: uuid */
            p_exclude_job_id?: string;
            /** Format: uuid */
            p_user_id: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/rpc/check_feedback_rate_limit": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query: {
          client_ip: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferParams"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            /** Format: inet */
            client_ip: string;
          };
          "application/vnd.pgrst.object+json;nulls=stripped": {
            /** Format: inet */
            client_ip: string;
          };
          "application/vnd.pgrst.object+json": {
            /** Format: inet */
            client_ip: string;
          };
          "text/csv": {
            /** Format: inet */
            client_ip: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/rpc/validate_all_queue_jobs": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Validates all queue jobs and optionally fixes invalid ones by marking as failed */
    get: {
      parameters: {
        query?: {
          p_fix?: boolean;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    /** Validates all queue jobs and optionally fixes invalid ones by marking as failed */
    post: {
      parameters: {
        query?: never;
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferParams"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            /** Format: boolean */
            p_fix?: boolean;
          };
          "application/vnd.pgrst.object+json;nulls=stripped": {
            /** Format: boolean */
            p_fix?: boolean;
          };
          "application/vnd.pgrst.object+json": {
            /** Format: boolean */
            p_fix?: boolean;
          };
          "text/csv": {
            /** Format: boolean */
            p_fix?: boolean;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/rpc/get_brief_generation_stats": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns brief generation statistics by date */
    get: {
      parameters: {
        query: {
          start_date: string;
          end_date: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    /** Returns brief generation statistics by date */
    post: {
      parameters: {
        query?: never;
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferParams"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            /** Format: date */
            end_date: string;
            /** Format: date */
            start_date: string;
          };
          "application/vnd.pgrst.object+json;nulls=stripped": {
            /** Format: date */
            end_date: string;
            /** Format: date */
            start_date: string;
          };
          "application/vnd.pgrst.object+json": {
            /** Format: date */
            end_date: string;
            /** Format: date */
            start_date: string;
          };
          "text/csv": {
            /** Format: date */
            end_date: string;
            /** Format: date */
            start_date: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/rpc/increment_question_display_count": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query: {
          question_ids: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferParams"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            /** Format: uuid[] */
            question_ids: string[];
          };
          "application/vnd.pgrst.object+json;nulls=stripped": {
            /** Format: uuid[] */
            question_ids: string[];
          };
          "application/vnd.pgrst.object+json": {
            /** Format: uuid[] */
            question_ids: string[];
          };
          "text/csv": {
            /** Format: uuid[] */
            question_ids: string[];
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/rpc/get_projects_with_stats": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query: {
          p_user_id: string;
          p_status?: string;
          p_search?: string;
          p_limit?: number;
          p_offset?: number;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferParams"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            /** Format: integer */
            p_limit?: number;
            /** Format: integer */
            p_offset?: number;
            /** Format: text */
            p_search?: string;
            /** Format: text */
            p_status?: string;
            /** Format: uuid */
            p_user_id: string;
          };
          "application/vnd.pgrst.object+json;nulls=stripped": {
            /** Format: integer */
            p_limit?: number;
            /** Format: integer */
            p_offset?: number;
            /** Format: text */
            p_search?: string;
            /** Format: text */
            p_status?: string;
            /** Format: uuid */
            p_user_id: string;
          };
          "application/vnd.pgrst.object+json": {
            /** Format: integer */
            p_limit?: number;
            /** Format: integer */
            p_offset?: number;
            /** Format: text */
            p_search?: string;
            /** Format: text */
            p_status?: string;
            /** Format: uuid */
            p_user_id: string;
          };
          "text/csv": {
            /** Format: integer */
            p_limit?: number;
            /** Format: integer */
            p_offset?: number;
            /** Format: text */
            p_search?: string;
            /** Format: text */
            p_status?: string;
            /** Format: uuid */
            p_user_id: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/rpc/show_trgm": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query: {
          "": string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferParams"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody: components["requestBodies"]["Args3"];
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/rpc/cancel_jobs_in_time_window": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Cancels jobs scheduled within a specific time window to resolve conflicts */
    get: {
      parameters: {
        query: {
          p_user_id: string;
          p_job_type: string;
          p_window_start: string;
          p_window_end: string;
          p_exclude_job_id?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    /** Cancels jobs scheduled within a specific time window to resolve conflicts */
    post: {
      parameters: {
        query?: never;
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferParams"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            /** Format: uuid */
            p_exclude_job_id?: string;
            /** Format: text */
            p_job_type: string;
            /** Format: uuid */
            p_user_id: string;
            /** Format: timestamp with time zone */
            p_window_end: string;
            /** Format: timestamp with time zone */
            p_window_start: string;
          };
          "application/vnd.pgrst.object+json;nulls=stripped": {
            /** Format: uuid */
            p_exclude_job_id?: string;
            /** Format: text */
            p_job_type: string;
            /** Format: uuid */
            p_user_id: string;
            /** Format: timestamp with time zone */
            p_window_end: string;
            /** Format: timestamp with time zone */
            p_window_start: string;
          };
          "application/vnd.pgrst.object+json": {
            /** Format: uuid */
            p_exclude_job_id?: string;
            /** Format: text */
            p_job_type: string;
            /** Format: uuid */
            p_user_id: string;
            /** Format: timestamp with time zone */
            p_window_end: string;
            /** Format: timestamp with time zone */
            p_window_start: string;
          };
          "text/csv": {
            /** Format: uuid */
            p_exclude_job_id?: string;
            /** Format: text */
            p_job_type: string;
            /** Format: uuid */
            p_user_id: string;
            /** Format: timestamp with time zone */
            p_window_end: string;
            /** Format: timestamp with time zone */
            p_window_start: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/rpc/queue_sms_message": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query: {
          p_user_id: string;
          p_phone_number: string;
          p_message: string;
          p_priority?: string;
          p_scheduled_for?: string;
          p_metadata?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferParams"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            /** Format: text */
            p_message: string;
            /** Format: jsonb */
            p_metadata?: unknown;
            /** Format: text */
            p_phone_number: string;
            /** Format: public.sms_priority */
            p_priority?: string;
            /** Format: timestamp with time zone */
            p_scheduled_for?: string;
            /** Format: uuid */
            p_user_id: string;
          };
          "application/vnd.pgrst.object+json;nulls=stripped": {
            /** Format: text */
            p_message: string;
            /** Format: jsonb */
            p_metadata?: unknown;
            /** Format: text */
            p_phone_number: string;
            /** Format: public.sms_priority */
            p_priority?: string;
            /** Format: timestamp with time zone */
            p_scheduled_for?: string;
            /** Format: uuid */
            p_user_id: string;
          };
          "application/vnd.pgrst.object+json": {
            /** Format: text */
            p_message: string;
            /** Format: jsonb */
            p_metadata?: unknown;
            /** Format: text */
            p_phone_number: string;
            /** Format: public.sms_priority */
            p_priority?: string;
            /** Format: timestamp with time zone */
            p_scheduled_for?: string;
            /** Format: uuid */
            p_user_id: string;
          };
          "text/csv": {
            /** Format: text */
            p_message: string;
            /** Format: jsonb */
            p_metadata?: unknown;
            /** Format: text */
            p_phone_number: string;
            /** Format: public.sms_priority */
            p_priority?: string;
            /** Format: timestamp with time zone */
            p_scheduled_for?: string;
            /** Format: uuid */
            p_user_id: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/rpc/search_by_type": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query: {
          search_query: string;
          current_user_id: string;
          search_type: string;
          page_offset?: number;
          page_limit?: number;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferParams"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            /** Format: uuid */
            current_user_id: string;
            /** Format: integer */
            page_limit?: number;
            /** Format: integer */
            page_offset?: number;
            /** Format: text */
            search_query: string;
            /** Format: text */
            search_type: string;
          };
          "application/vnd.pgrst.object+json;nulls=stripped": {
            /** Format: uuid */
            current_user_id: string;
            /** Format: integer */
            page_limit?: number;
            /** Format: integer */
            page_offset?: number;
            /** Format: text */
            search_query: string;
            /** Format: text */
            search_type: string;
          };
          "application/vnd.pgrst.object+json": {
            /** Format: uuid */
            current_user_id: string;
            /** Format: integer */
            page_limit?: number;
            /** Format: integer */
            page_offset?: number;
            /** Format: text */
            search_query: string;
            /** Format: text */
            search_type: string;
          };
          "text/csv": {
            /** Format: uuid */
            current_user_id: string;
            /** Format: integer */
            page_limit?: number;
            /** Format: integer */
            page_offset?: number;
            /** Format: text */
            search_query: string;
            /** Format: text */
            search_type: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/rpc/get_project_history": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query: {
          target_project_id: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferParams"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody: components["requestBodies"]["Args4"];
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/rpc/get_user_active_generations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query: {
          p_user_id: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferParams"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody: components["requestBodies"]["Args2"];
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/rpc/get_daily_visitors": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query: {
          start_date: string;
          end_date: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferParams"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            /** Format: date */
            end_date: string;
            /** Format: date */
            start_date: string;
          };
          "application/vnd.pgrst.object+json;nulls=stripped": {
            /** Format: date */
            end_date: string;
            /** Format: date */
            start_date: string;
          };
          "application/vnd.pgrst.object+json": {
            /** Format: date */
            end_date: string;
            /** Format: date */
            start_date: string;
          };
          "text/csv": {
            /** Format: date */
            end_date: string;
            /** Format: date */
            start_date: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/rpc/batch_update_phase_dates": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Batch update phase start and end dates for a project */
    get: {
      parameters: {
        query: {
          p_project_id: string;
          p_updates: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    /** Batch update phase start and end dates for a project */
    post: {
      parameters: {
        query?: never;
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferParams"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            /** Format: uuid */
            p_project_id: string;
            /** Format: jsonb */
            p_updates: unknown;
          };
          "application/vnd.pgrst.object+json;nulls=stripped": {
            /** Format: uuid */
            p_project_id: string;
            /** Format: jsonb */
            p_updates: unknown;
          };
          "application/vnd.pgrst.object+json": {
            /** Format: uuid */
            p_project_id: string;
            /** Format: jsonb */
            p_updates: unknown;
          };
          "text/csv": {
            /** Format: uuid */
            p_project_id: string;
            /** Format: jsonb */
            p_updates: unknown;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/rpc/get_subscription_changes": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          p_timeframe?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferParams"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            /** Format: text */
            p_timeframe?: string;
          };
          "application/vnd.pgrst.object+json;nulls=stripped": {
            /** Format: text */
            p_timeframe?: string;
          };
          "application/vnd.pgrst.object+json": {
            /** Format: text */
            p_timeframe?: string;
          };
          "text/csv": {
            /** Format: text */
            p_timeframe?: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/rpc/fail_queue_job": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query: {
          p_job_id: string;
          p_error_message: string;
          p_retry?: boolean;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferParams"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            /** Format: text */
            p_error_message: string;
            /** Format: uuid */
            p_job_id: string;
            /** Format: boolean */
            p_retry?: boolean;
          };
          "application/vnd.pgrst.object+json;nulls=stripped": {
            /** Format: text */
            p_error_message: string;
            /** Format: uuid */
            p_job_id: string;
            /** Format: boolean */
            p_retry?: boolean;
          };
          "application/vnd.pgrst.object+json": {
            /** Format: text */
            p_error_message: string;
            /** Format: uuid */
            p_job_id: string;
            /** Format: boolean */
            p_retry?: boolean;
          };
          "text/csv": {
            /** Format: text */
            p_error_message: string;
            /** Format: uuid */
            p_job_id: string;
            /** Format: boolean */
            p_retry?: boolean;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/rpc/user_has_payment_issues": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query: {
          p_user_id: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferParams"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody: components["requestBodies"]["Args2"];
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/rpc/complete_queue_job": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query: {
          p_job_id: string;
          p_result?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferParams"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            /** Format: uuid */
            p_job_id: string;
            /** Format: jsonb */
            p_result?: unknown;
          };
          "application/vnd.pgrst.object+json;nulls=stripped": {
            /** Format: uuid */
            p_job_id: string;
            /** Format: jsonb */
            p_result?: unknown;
          };
          "application/vnd.pgrst.object+json": {
            /** Format: uuid */
            p_job_id: string;
            /** Format: jsonb */
            p_result?: unknown;
          };
          "text/csv": {
            /** Format: uuid */
            p_job_id: string;
            /** Format: jsonb */
            p_result?: unknown;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/rpc/cleanup_old_brief_jobs": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferParams"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody: components["requestBodies"]["Args"];
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/rpc/start_daily_brief_generation": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Starts the generation process for a daily brief, managing status transitions and preventing duplicate generations */
    get: {
      parameters: {
        query: {
          p_user_id: string;
          p_brief_date?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    /** Starts the generation process for a daily brief, managing status transitions and preventing duplicate generations */
    post: {
      parameters: {
        query?: never;
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferParams"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            /** Format: date */
            p_brief_date?: string;
            /** Format: uuid */
            p_user_id: string;
          };
          "application/vnd.pgrst.object+json;nulls=stripped": {
            /** Format: date */
            p_brief_date?: string;
            /** Format: uuid */
            p_user_id: string;
          };
          "application/vnd.pgrst.object+json": {
            /** Format: date */
            p_brief_date?: string;
            /** Format: uuid */
            p_user_id: string;
          };
          "text/csv": {
            /** Format: date */
            p_brief_date?: string;
            /** Format: uuid */
            p_user_id: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/rpc/claim_pending_jobs": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Atomically claims pending jobs for processing. Uses FOR UPDATE SKIP LOCKED to prevent race conditions.
     * @description Parameters:
     *     - p_job_types: Array of job type names as text (e.g. ARRAY['generate_daily_brief', 'generate_phases'])
     *     - p_batch_size: Maximum number of jobs to claim in one call (default 1)
     *     Returns claimed jobs with status updated to 'processing'.
     *     Example usage: SELECT * FROM claim_pending_jobs(ARRAY['generate_daily_brief'], 1);
     */
    get: {
      parameters: {
        query: {
          p_job_types: string;
          p_batch_size?: number;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    /**
     * Atomically claims pending jobs for processing. Uses FOR UPDATE SKIP LOCKED to prevent race conditions.
     * @description Parameters:
     *     - p_job_types: Array of job type names as text (e.g. ARRAY['generate_daily_brief', 'generate_phases'])
     *     - p_batch_size: Maximum number of jobs to claim in one call (default 1)
     *     Returns claimed jobs with status updated to 'processing'.
     *     Example usage: SELECT * FROM claim_pending_jobs(ARRAY['generate_daily_brief'], 1);
     */
    post: {
      parameters: {
        query?: never;
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferParams"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            /** Format: integer */
            p_batch_size?: number;
            /** Format: text[] */
            p_job_types: string[];
          };
          "application/vnd.pgrst.object+json;nulls=stripped": {
            /** Format: integer */
            p_batch_size?: number;
            /** Format: text[] */
            p_job_types: string[];
          };
          "application/vnd.pgrst.object+json": {
            /** Format: integer */
            p_batch_size?: number;
            /** Format: text[] */
            p_job_types: string[];
          };
          "text/csv": {
            /** Format: integer */
            p_batch_size?: number;
            /** Format: text[] */
            p_job_types: string[];
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/rpc/cancel_jobs_atomic": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Atomically cancels multiple jobs matching criteria to prevent race conditions */
    get: {
      parameters: {
        query: {
          p_user_id: string;
          p_job_type: string;
          p_metadata_filter?: string;
          p_allowed_statuses?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    /** Atomically cancels multiple jobs matching criteria to prevent race conditions */
    post: {
      parameters: {
        query?: never;
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferParams"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            /** Format: text[] */
            p_allowed_statuses?: string[];
            /** Format: text */
            p_job_type: string;
            /** Format: jsonb */
            p_metadata_filter?: unknown;
            /** Format: uuid */
            p_user_id: string;
          };
          "application/vnd.pgrst.object+json;nulls=stripped": {
            /** Format: text[] */
            p_allowed_statuses?: string[];
            /** Format: text */
            p_job_type: string;
            /** Format: jsonb */
            p_metadata_filter?: unknown;
            /** Format: uuid */
            p_user_id: string;
          };
          "application/vnd.pgrst.object+json": {
            /** Format: text[] */
            p_allowed_statuses?: string[];
            /** Format: text */
            p_job_type: string;
            /** Format: jsonb */
            p_metadata_filter?: unknown;
            /** Format: uuid */
            p_user_id: string;
          };
          "text/csv": {
            /** Format: text[] */
            p_allowed_statuses?: string[];
            /** Format: text */
            p_job_type: string;
            /** Format: jsonb */
            p_metadata_filter?: unknown;
            /** Format: uuid */
            p_user_id: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/rpc/reset_stalled_jobs": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Resets stalled jobs that have been processing for too long, with proper enum type casting */
    get: {
      parameters: {
        query?: {
          p_stall_timeout?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    /** Resets stalled jobs that have been processing for too long, with proper enum type casting */
    post: {
      parameters: {
        query?: never;
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferParams"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            /** Format: interval */
            p_stall_timeout?: string;
          };
          "application/vnd.pgrst.object+json;nulls=stripped": {
            /** Format: interval */
            p_stall_timeout?: string;
          };
          "application/vnd.pgrst.object+json": {
            /** Format: interval */
            p_stall_timeout?: string;
          };
          "text/csv": {
            /** Format: interval */
            p_stall_timeout?: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/rpc/get_project_version": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query: {
          target_project_id: string;
          target_version: number;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferParams"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            /** Format: uuid */
            target_project_id: string;
            /** Format: integer */
            target_version: number;
          };
          "application/vnd.pgrst.object+json;nulls=stripped": {
            /** Format: uuid */
            target_project_id: string;
            /** Format: integer */
            target_version: number;
          };
          "application/vnd.pgrst.object+json": {
            /** Format: uuid */
            target_project_id: string;
            /** Format: integer */
            target_version: number;
          };
          "text/csv": {
            /** Format: uuid */
            target_project_id: string;
            /** Format: integer */
            target_version: number;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/rpc/get_user_subscription_status": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query: {
          user_uuid: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferParams"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody: components["requestBodies"]["Args5"];
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/rpc/refresh_system_metrics": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferParams"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody: components["requestBodies"]["Args"];
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/rpc/batch_update_phase_orders": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Batch update phase order positions for a project */
    get: {
      parameters: {
        query: {
          p_project_id: string;
          p_updates: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    /** Batch update phase order positions for a project */
    post: {
      parameters: {
        query?: never;
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferParams"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            /** Format: uuid */
            p_project_id: string;
            /** Format: jsonb */
            p_updates: unknown;
          };
          "application/vnd.pgrst.object+json;nulls=stripped": {
            /** Format: uuid */
            p_project_id: string;
            /** Format: jsonb */
            p_updates: unknown;
          };
          "application/vnd.pgrst.object+json": {
            /** Format: uuid */
            p_project_id: string;
            /** Format: jsonb */
            p_updates: unknown;
          };
          "text/csv": {
            /** Format: uuid */
            p_project_id: string;
            /** Format: jsonb */
            p_updates: unknown;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/rpc/create_manual_project_version": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query: {
          target_project_id: string;
          created_by_user?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferParams"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            /** Format: uuid */
            created_by_user?: string;
            /** Format: uuid */
            target_project_id: string;
          };
          "application/vnd.pgrst.object+json;nulls=stripped": {
            /** Format: uuid */
            created_by_user?: string;
            /** Format: uuid */
            target_project_id: string;
          };
          "application/vnd.pgrst.object+json": {
            /** Format: uuid */
            created_by_user?: string;
            /** Format: uuid */
            target_project_id: string;
          };
          "text/csv": {
            /** Format: uuid */
            created_by_user?: string;
            /** Format: uuid */
            target_project_id: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/rpc/show_limit": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferParams"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody: components["requestBodies"]["Args"];
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/rpc/get_subscription_overview": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferParams"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody: components["requestBodies"]["Args"];
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/rpc/get_revenue_metrics": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferParams"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody: components["requestBodies"]["Args"];
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/rpc/cleanup_project_history": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query: {
          target_project_id: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferParams"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody: components["requestBodies"]["Args4"];
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/rpc/cleanup_stale_brief_generations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query: {
          p_user_id: string;
          p_timeout_minutes?: number;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferParams"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            /** Format: integer */
            p_timeout_minutes?: number;
            /** Format: uuid */
            p_user_id: string;
          };
          "application/vnd.pgrst.object+json;nulls=stripped": {
            /** Format: integer */
            p_timeout_minutes?: number;
            /** Format: uuid */
            p_user_id: string;
          };
          "application/vnd.pgrst.object+json": {
            /** Format: integer */
            p_timeout_minutes?: number;
            /** Format: uuid */
            p_user_id: string;
          };
          "text/csv": {
            /** Format: integer */
            p_timeout_minutes?: number;
            /** Format: uuid */
            p_user_id: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/rpc/cleanup_duplicate_brain_dump_drafts": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferParams"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody: components["requestBodies"]["Args"];
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/rpc/search_similar_items": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query: {
          table_name: string;
          query_embedding: string;
          similarity_threshold?: number;
          match_count?: number;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferParams"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            /** Format: integer */
            match_count?: number;
            /** Format: public.vector */
            query_embedding: string;
            /** Format: double precision */
            similarity_threshold?: number;
            /** Format: text */
            table_name: string;
          };
          "application/vnd.pgrst.object+json;nulls=stripped": {
            /** Format: integer */
            match_count?: number;
            /** Format: public.vector */
            query_embedding: string;
            /** Format: double precision */
            similarity_threshold?: number;
            /** Format: text */
            table_name: string;
          };
          "application/vnd.pgrst.object+json": {
            /** Format: integer */
            match_count?: number;
            /** Format: public.vector */
            query_embedding: string;
            /** Format: double precision */
            similarity_threshold?: number;
            /** Format: text */
            table_name: string;
          };
          "text/csv": {
            /** Format: integer */
            match_count?: number;
            /** Format: public.vector */
            query_embedding: string;
            /** Format: double precision */
            similarity_threshold?: number;
            /** Format: text */
            table_name: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/rpc/approve_generated_phases": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Approves generated phases and creates actual phase records */
    get: {
      parameters: {
        query: {
          p_generation_id: string;
          p_phase_ids?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    /** Approves generated phases and creates actual phase records */
    post: {
      parameters: {
        query?: never;
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferParams"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            /** Format: uuid */
            p_generation_id: string;
            /** Format: uuid[] */
            p_phase_ids?: string[];
          };
          "application/vnd.pgrst.object+json;nulls=stripped": {
            /** Format: uuid */
            p_generation_id: string;
            /** Format: uuid[] */
            p_phase_ids?: string[];
          };
          "application/vnd.pgrst.object+json": {
            /** Format: uuid */
            p_generation_id: string;
            /** Format: uuid[] */
            p_phase_ids?: string[];
          };
          "text/csv": {
            /** Format: uuid */
            p_generation_id: string;
            /** Format: uuid[] */
            p_phase_ids?: string[];
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/rpc/get_project_phases_hierarchy": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Optimized function to fetch all phases with their tasks and calendar events in a single query, eliminating complex nested JOINs */
    get: {
      parameters: {
        query: {
          p_project_id: string;
          p_user_id?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    /** Optimized function to fetch all phases with their tasks and calendar events in a single query, eliminating complex nested JOINs */
    post: {
      parameters: {
        query?: never;
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferParams"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            /** Format: uuid */
            p_project_id: string;
            /** Format: uuid */
            p_user_id?: string;
          };
          "application/vnd.pgrst.object+json;nulls=stripped": {
            /** Format: uuid */
            p_project_id: string;
            /** Format: uuid */
            p_user_id?: string;
          };
          "application/vnd.pgrst.object+json": {
            /** Format: uuid */
            p_project_id: string;
            /** Format: uuid */
            p_user_id?: string;
          };
          "text/csv": {
            /** Format: uuid */
            p_project_id: string;
            /** Format: uuid */
            p_user_id?: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/rpc/decrement_phase_order": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query: {
          p_project_id: string;
          p_order_threshold: number;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferParams"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            /** Format: integer */
            p_order_threshold: number;
            /** Format: uuid */
            p_project_id: string;
          };
          "application/vnd.pgrst.object+json;nulls=stripped": {
            /** Format: integer */
            p_order_threshold: number;
            /** Format: uuid */
            p_project_id: string;
          };
          "application/vnd.pgrst.object+json": {
            /** Format: integer */
            p_order_threshold: number;
            /** Format: uuid */
            p_project_id: string;
          };
          "text/csv": {
            /** Format: integer */
            p_order_threshold: number;
            /** Format: uuid */
            p_project_id: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/rpc/brain_dump_cleanup_with_report": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          execute_delete?: boolean;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferParams"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            /** Format: boolean */
            execute_delete?: boolean;
          };
          "application/vnd.pgrst.object+json;nulls=stripped": {
            /** Format: boolean */
            execute_delete?: boolean;
          };
          "application/vnd.pgrst.object+json": {
            /** Format: boolean */
            execute_delete?: boolean;
          };
          "text/csv": {
            /** Format: boolean */
            execute_delete?: boolean;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/rpc/has_active_subscription": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query: {
          user_uuid: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferParams"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody: components["requestBodies"]["Args5"];
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/rpc/brain_dump_cleanup_report": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferParams"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody: components["requestBodies"]["Args"];
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/rpc/unaccent": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query: {
          "": string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferParams"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody: components["requestBodies"]["Args3"];
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/rpc/get_user_engagement_metrics": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns comprehensive user engagement metrics */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    /** Returns comprehensive user engagement metrics */
    post: {
      parameters: {
        query?: never;
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferParams"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": Record<string, never>;
          "application/vnd.pgrst.object+json;nulls=stripped": Record<
            string,
            never
          >;
          "application/vnd.pgrst.object+json": Record<string, never>;
          "text/csv": Record<string, never>;
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/rpc/normalize_queue_job_metadata": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Normalizes metadata fields to expected format for all active jobs */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    /** Normalizes metadata fields to expected format for all active jobs */
    post: {
      parameters: {
        query?: never;
        header?: {
          /** @description Preference */
          Prefer?: components["parameters"]["preferParams"];
        };
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": Record<string, never>;
          "application/vnd.pgrst.object+json;nulls=stripped": Record<
            string,
            never
          >;
          "application/vnd.pgrst.object+json": Record<string, never>;
          "text/csv": Record<string, never>;
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    user_sms_preferences: {
      /**
       * Format: uuid
       * @description Note:
       *     This is a Primary Key.<pk/>
       * @default gen_random_uuid()
       */
      id: string;
      /** Format: uuid */
      user_id: string;
      /** Format: text */
      phone_number?: string;
      /**
       * Format: boolean
       * @default false
       */
      phone_verified: boolean;
      /** Format: timestamp with time zone */
      phone_verified_at?: string;
      /**
       * Format: boolean
       * @default false
       */
      task_reminders: boolean;
      /**
       * Format: boolean
       * @default false
       */
      daily_brief_sms: boolean;
      /**
       * Format: boolean
       * @default true
       */
      urgent_alerts: boolean;
      /**
       * Format: time without time zone
       * @default 21:00:00
       */
      quiet_hours_start: string;
      /**
       * Format: time without time zone
       * @default 08:00:00
       */
      quiet_hours_end: string;
      /**
       * Format: text
       * @default America/Los_Angeles
       */
      timezone: string;
      /**
       * Format: integer
       * @default 10
       */
      daily_sms_limit: number;
      /**
       * Format: integer
       * @default 0
       */
      daily_sms_count: number;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      daily_count_reset_at: string;
      /**
       * Format: boolean
       * @default false
       */
      opted_out: boolean;
      /** Format: timestamp with time zone */
      opted_out_at?: string;
      /** Format: text */
      opt_out_reason?: string;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      created_at: string;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      updated_at: string;
    };
    email_logs: {
      /**
       * Format: uuid
       * @description Note:
       *     This is a Primary Key.<pk/>
       * @default gen_random_uuid()
       */
      id: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
       */
      user_id?: string;
      /** Format: text */
      to_email: string;
      /** Format: text */
      subject: string;
      /** Format: text */
      body: string;
      /** Format: text[] */
      cc?: string[];
      /** Format: text[] */
      bcc?: string[];
      /** Format: text */
      reply_to?: string;
      /** Format: jsonb */
      metadata?: unknown;
      /** Format: text */
      status: string;
      /** Format: text */
      error_message?: string;
      /** Format: timestamp with time zone */
      sent_at?: string;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      created_at: string;
    };
    daily_briefs: {
      /**
       * Format: uuid
       * @description Note:
       *     This is a Primary Key.<pk/>
       * @default gen_random_uuid()
       */
      id: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
       */
      user_id: string;
      /** Format: date */
      brief_date: string;
      /** Format: text */
      summary_content: string;
      /** Format: uuid[] */
      project_brief_ids?: string[];
      /** Format: text */
      insights?: string;
      /** Format: text[] */
      priority_actions?: string[];
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      created_at: string;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      updated_at: string;
      /**
       * Format: text
       * @default not_started
       */
      generation_status: string;
      /** Format: timestamp with time zone */
      generation_started_at?: string;
      /** Format: timestamp with time zone */
      generation_completed_at?: string;
      /** Format: jsonb */
      generation_progress?: unknown;
      /** Format: text */
      generation_error?: string;
      /** Format: jsonb */
      metadata?: unknown;
      /** Format: text */
      llm_analysis?: string;
    };
    recurring_task_migration_log: {
      /**
       * Format: uuid
       * @description Note:
       *     This is a Primary Key.<pk/>
       * @default gen_random_uuid()
       */
      id: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `tasks.id`.<fk table='tasks' column='id'/>
       */
      task_id: string;
      /** Format: uuid */
      user_id: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `projects.id`.<fk table='projects' column='id'/>
       */
      project_id?: string;
      /** Format: text */
      migration_type: string;
      /** Format: timestamp with time zone */
      old_recurrence_ends?: string;
      /** Format: timestamp with time zone */
      new_recurrence_ends?: string;
      /** Format: text */
      old_calendar_event_id?: string;
      /** Format: text */
      new_calendar_event_id?: string;
      /**
       * Format: text
       * @default pending
       */
      status: string;
      /** Format: text */
      error_message?: string;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      created_at: string;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      updated_at: string;
    };
    queue_jobs: {
      /**
       * Format: uuid
       * @description Note:
       *     This is a Primary Key.<pk/>
       * @default gen_random_uuid()
       */
      id: string;
      /** Format: uuid */
      user_id: string;
      /** Format: timestamp with time zone */
      scheduled_for: string;
      /** Format: text */
      queue_job_id: string;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      created_at: string;
      /** Format: timestamp with time zone */
      processed_at?: string;
      /** Format: text */
      error_message?: string;
      /** Format: jsonb */
      metadata?: unknown;
      /**
       * Format: integer
       * @default 10
       */
      priority: number;
      /**
       * Format: integer
       * @default 0
       */
      attempts: number;
      /**
       * Format: integer
       * @default 3
       */
      max_attempts: number;
      /** Format: timestamp with time zone */
      started_at?: string;
      /** Format: timestamp with time zone */
      completed_at?: string;
      /** Format: jsonb */
      result?: unknown;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      updated_at: string;
      /**
       * Format: public.queue_status
       * @enum {string}
       */
      status:
        | "pending"
        | "processing"
        | "completed"
        | "failed"
        | "cancelled"
        | "retrying";
      /**
       * Format: public.queue_type
       * @enum {string}
       */
      job_type:
        | "generate_daily_brief"
        | "generate_phases"
        | "sync_calendar"
        | "process_brain_dump"
        | "send_email"
        | "update_recurring_tasks"
        | "cleanup_old_data"
        | "onboarding_analysis"
        | "other"
        | "send_sms";
    };
    question_metrics: {
      /**
       * Format: uuid
       * @description Note:
       *     This is a Primary Key.<pk/>
       * @default gen_random_uuid()
       */
      id: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `project_questions.id`.<fk table='project_questions' column='id'/>
       */
      question_id?: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
       */
      user_id?: string;
      /** Format: timestamp without time zone */
      presented_at: string;
      /** Format: timestamp without time zone */
      responded_at?: string;
      /** Format: text */
      response_quality?: string;
      /**
       * Format: boolean
       * @default false
       */
      created_project: boolean;
      /**
       * Format: integer
       * @default 0
       */
      created_tasks_count: number;
      /** Format: integer */
      brain_dump_length?: number;
      /**
       * Format: timestamp without time zone
       * @default CURRENT_TIMESTAMP
       */
      created_at: string;
    };
    failed_payments: {
      /**
       * Format: uuid
       * @description Note:
       *     This is a Primary Key.<pk/>
       * @default gen_random_uuid()
       */
      id: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
       */
      user_id: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `customer_subscriptions.id`.<fk table='customer_subscriptions' column='id'/>
       */
      subscription_id?: string;
      /** Format: text */
      invoice_id: string;
      /** Format: integer */
      amount_due: number;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      failed_at: string;
      /**
       * Format: integer
       * @default 1
       */
      retry_count: number;
      /** Format: timestamp with time zone */
      last_retry_at?: string;
      /** Format: text */
      dunning_stage?: string;
      /** Format: timestamp with time zone */
      last_dunning_at?: string;
      /** Format: timestamp with time zone */
      resolved_at?: string;
      /** Format: text */
      resolution_type?: string;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      created_at: string;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      updated_at: string;
    };
    beta_events: {
      /**
       * Format: uuid
       * @description Note:
       *     This is a Primary Key.<pk/>
       * @default gen_random_uuid()
       */
      id: string;
      /** Format: text */
      event_title: string;
      /** Format: text */
      event_description?: string;
      /** Format: text */
      event_type?: string;
      /** Format: timestamp with time zone */
      scheduled_at: string;
      /**
       * Format: integer
       * @default 60
       */
      duration_minutes: number;
      /**
       * Format: text
       * @default America/New_York
       */
      event_timezone: string;
      /** Format: text */
      meeting_link?: string;
      /** Format: text */
      agenda?: string;
      /** Format: text */
      meeting_notes?: string;
      /** Format: text */
      recording_url?: string;
      /**
       * Format: text
       * @default scheduled
       */
      event_status: string;
      /** Format: integer */
      max_attendees?: number;
      /** Format: uuid */
      created_by?: string;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      created_at: string;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      updated_at: string;
    };
    beta_feedback: {
      /**
       * Format: uuid
       * @description Note:
       *     This is a Primary Key.<pk/>
       * @default gen_random_uuid()
       */
      id: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `beta_members.id`.<fk table='beta_members' column='id'/>
       */
      member_id?: string;
      /** Format: uuid */
      user_id?: string;
      /** Format: text */
      feedback_type?: string;
      /** Format: text */
      feedback_title: string;
      /** Format: text */
      feedback_description: string;
      /**
       * Format: text
       * @default medium
       */
      feedback_priority: string;
      /** Format: text */
      feature_area?: string;
      /** Format: text[] */
      feedback_tags?: string[];
      /**
       * Format: text
       * @default new
       */
      feedback_status: string;
      /** Format: timestamp with time zone */
      implemented_at?: string;
      /** Format: text */
      declined_reason?: string;
      /**
       * Format: integer
       * @default 0
       */
      upvotes: number;
      /** Format: text */
      founder_response?: string;
      /** Format: timestamp with time zone */
      founder_responded_at?: string;
      /**
       * Format: timestamp with time zone
       * @default CURRENT_TIMESTAMP
       */
      created_at: string;
      /**
       * Format: timestamp with time zone
       * @default CURRENT_TIMESTAMP
       */
      updated_at: string;
    };
    discount_codes: {
      /**
       * Format: uuid
       * @description Note:
       *     This is a Primary Key.<pk/>
       * @default gen_random_uuid()
       */
      id: string;
      /** Format: text */
      code: string;
      /** Format: text */
      stripe_coupon_id?: string;
      /** Format: text */
      description?: string;
      /** Format: text */
      discount_type: string;
      /** Format: integer */
      discount_value: number;
      /** Format: text */
      duration: string;
      /** Format: integer */
      duration_in_months?: number;
      /** Format: integer */
      max_redemptions?: number;
      /**
       * Format: integer
       * @default 0
       */
      times_redeemed: number;
      /**
       * Format: timestamp with time zone
       * @default CURRENT_TIMESTAMP
       */
      valid_from: string;
      /** Format: timestamp with time zone */
      valid_until?: string;
      /** Format: jsonb */
      metadata?: unknown;
      /**
       * Format: boolean
       * @default true
       */
      is_active: boolean;
      /**
       * Format: timestamp with time zone
       * @default CURRENT_TIMESTAMP
       */
      created_at: string;
      /**
       * Format: timestamp with time zone
       * @default CURRENT_TIMESTAMP
       */
      updated_at: string;
    };
    /** @description Tracks individual instances of recurring tasks */
    recurring_task_instances: {
      /**
       * Format: uuid
       * @description Note:
       *     This is a Primary Key.<pk/>
       * @default gen_random_uuid()
       */
      id: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `tasks.id`.<fk table='tasks' column='id'/>
       */
      task_id: string;
      /** Format: date */
      instance_date: string;
      /**
       * Format: text
       * @default scheduled
       */
      status: string;
      /** Format: timestamp with time zone */
      completed_at?: string;
      /**
       * Format: boolean
       * @default false
       */
      skipped: boolean;
      /** Format: text */
      notes?: string;
      /** Format: text */
      calendar_event_id?: string;
      /**
       * Format: timestamp with time zone
       * @default CURRENT_TIMESTAMP
       */
      created_at: string;
      /**
       * Format: timestamp with time zone
       * @default CURRENT_TIMESTAMP
       */
      updated_at: string;
      /** Format: uuid */
      user_id?: string;
    };
    sms_messages: {
      /**
       * Format: uuid
       * @description Note:
       *     This is a Primary Key.<pk/>
       * @default gen_random_uuid()
       */
      id: string;
      /** Format: uuid */
      user_id: string;
      /** Format: text */
      phone_number: string;
      /** Format: text */
      message_content: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `sms_templates.id`.<fk table='sms_templates' column='id'/>
       */
      template_id?: string;
      /** Format: jsonb */
      template_vars?: unknown;
      /**
       * Format: public.sms_status
       * @default pending
       * @enum {string}
       */
      status:
        | "pending"
        | "queued"
        | "sending"
        | "sent"
        | "delivered"
        | "failed"
        | "undelivered"
        | "scheduled"
        | "cancelled";
      /**
       * Format: public.sms_priority
       * @default normal
       * @enum {string}
       */
      priority: "low" | "normal" | "high" | "urgent";
      /** Format: timestamp with time zone */
      scheduled_for?: string;
      /** Format: timestamp with time zone */
      sent_at?: string;
      /** Format: timestamp with time zone */
      delivered_at?: string;
      /** Format: text */
      twilio_sid?: string;
      /** Format: text */
      twilio_status?: string;
      /** Format: integer */
      twilio_error_code?: number;
      /** Format: text */
      twilio_error_message?: string;
      /**
       * Format: integer
       * @default 0
       */
      attempt_count: number;
      /**
       * Format: integer
       * @default 3
       */
      max_attempts: number;
      /** Format: timestamp with time zone */
      next_retry_at?: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `queue_jobs.id`.<fk table='queue_jobs' column='id'/>
       */
      queue_job_id?: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `projects.id`.<fk table='projects' column='id'/>
       */
      project_id?: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `tasks.id`.<fk table='tasks' column='id'/>
       */
      task_id?: string;
      /** Format: jsonb */
      metadata?: unknown;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      created_at: string;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      updated_at: string;
    };
    user_discounts: {
      /**
       * Format: uuid
       * @description Note:
       *     This is a Primary Key.<pk/>
       * @default gen_random_uuid()
       */
      id: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
       */
      user_id: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `discount_codes.id`.<fk table='discount_codes' column='id'/>
       */
      discount_code_id: string;
      /** Format: text */
      stripe_subscription_id?: string;
      /**
       * Format: timestamp with time zone
       * @default CURRENT_TIMESTAMP
       */
      applied_at: string;
      /** Format: timestamp with time zone */
      expires_at?: string;
    };
    /** @description Stores custom AI-generated and user-created templates for project daily briefs */
    project_brief_templates: {
      /**
       * Format: uuid
       * @description Note:
       *     This is a Primary Key.<pk/>
       * @default gen_random_uuid()
       */
      id: string;
      /** Format: text */
      name: string;
      /** Format: text */
      description?: string;
      /** Format: text */
      template_content: string;
      /**
       * Format: boolean
       * @default false
       */
      is_default: boolean;
      /** Format: json */
      variables?: unknown;
      /**
       * Format: timestamp without time zone
       * @default CURRENT_TIMESTAMP
       */
      created_at: string;
      /**
       * Format: timestamp without time zone
       * @default CURRENT_TIMESTAMP
       */
      updated_at: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
       */
      user_id?: string;
      /**
       * Format: boolean
       * @default false
       */
      in_use: boolean;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `projects.id`.<fk table='projects' column='id'/>
       */
      project_id?: string;
      /**
       * Format: jsonb
       * @description Additional metadata including generation parameters and usage statistics
       */
      metadata?: unknown;
      /**
       * Format: text
       * @description Indicates how the template was created: manual, ai, or system
       * @default manual
       */
      generated_by: string;
      /** Format: text */
      generation_model?: string;
      /**
       * Format: jsonb
       * @description Snapshot of project context at the time of template generation
       */
      context_snapshot?: unknown;
    };
    email_recipients: {
      /**
       * Format: uuid
       * @description Note:
       *     This is a Primary Key.<pk/>
       * @default gen_random_uuid()
       */
      id: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `emails.id`.<fk table='emails' column='id'/>
       */
      email_id: string;
      /** Format: character varying */
      recipient_email: string;
      /** Format: character varying */
      recipient_name?: string;
      /**
       * Format: character varying
       * @default beta_user
       */
      recipient_type: string;
      /** Format: uuid */
      recipient_id?: string;
      /**
       * Format: character varying
       * @default pending
       */
      status: string;
      /** Format: timestamp with time zone */
      sent_at?: string;
      /** Format: timestamp with time zone */
      delivered_at?: string;
      /** Format: timestamp with time zone */
      opened_at?: string;
      /**
       * Format: integer
       * @default 0
       */
      open_count: number;
      /** Format: timestamp with time zone */
      last_opened_at?: string;
      /** Format: text */
      error_message?: string;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      created_at: string;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      updated_at: string;
    };
    /** @description Stores AI suggestions for which tasks belong to which phases */
    generated_phase_tasks: {
      /**
       * Format: uuid
       * @description Note:
       *     This is a Primary Key.<pk/>
       * @default gen_random_uuid()
       */
      id: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `generated_phases.id`.<fk table='generated_phases' column='id'/>
       */
      generated_phase_id: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `tasks.id`.<fk table='tasks' column='id'/>
       */
      task_id: string;
      /**
       * Format: numeric
       * @description AI confidence score for the task-to-phase assignment suggestion (0-1)
       */
      confidence_score?: number;
      /** Format: text */
      reasoning?: string;
      /** Format: date */
      suggested_start_date?: string;
      /** Format: date */
      suggested_due_date?: string;
      /**
       * Format: boolean
       * @default false
       */
      is_approved: boolean;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      created_at: string;
    };
    project_brief_template_usage: {
      /**
       * Format: uuid
       * @description Note:
       *     This is a Primary Key.<pk/>
       * @default gen_random_uuid()
       */
      id: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `project_brief_templates.id`.<fk table='project_brief_templates' column='id'/>
       */
      template_id?: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
       */
      user_id?: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `projects.id`.<fk table='projects' column='id'/>
       */
      project_id?: string;
      /**
       * Format: timestamp without time zone
       * @default CURRENT_TIMESTAMP
       */
      used_at: string;
      /** Format: date */
      brief_date: string;
      /** Format: jsonb */
      metadata?: unknown;
    };
    /** @description Maps projects to dedicated Google Calendars for better organization and visual separation */
    project_calendars: {
      /**
       * Format: uuid
       * @description Note:
       *     This is a Primary Key.<pk/>
       * @default gen_random_uuid()
       */
      id: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `projects.id`.<fk table='projects' column='id'/>
       */
      project_id: string;
      /** Format: uuid */
      user_id: string;
      /**
       * Format: text
       * @description The Google Calendar ID returned when creating a calendar via Google Calendar API
       */
      calendar_id: string;
      /** Format: text */
      calendar_name: string;
      /**
       * Format: text
       * @description Google Calendar color IDs: 1=Lavender (#7986cb), 2=Sage (#33b679), 3=Grape (#8e24aa), 4=Flamingo (#e67c73), 5=Banana (#f6bf26), 6=Tangerine (#f4511e), 7=Peacock (#039be5), 8=Graphite (#616161), 9=Blueberry (#3f51b5), 10=Basil (#0b8043), 11=Tomato (#d50000)
       * @default 7
       */
      color_id: string;
      /**
       * Format: text
       * @description Cached hex color value for UI display without needing to map from Google color ID
       */
      hex_color?: string;
      /**
       * Format: boolean
       * @default false
       */
      is_primary: boolean;
      /**
       * Format: boolean
       * @default true
       */
      sync_enabled: boolean;
      /**
       * Format: public.calendar_visibility
       * @default private
       * @enum {string}
       */
      visibility: "public" | "private" | "shared";
      /**
       * Format: timestamp with time zone
       * @default timezone('utc'::text, now())
       */
      created_at: string;
      /**
       * Format: timestamp with time zone
       * @default timezone('utc'::text, now())
       */
      updated_at: string;
      /** Format: timestamp with time zone */
      last_synced_at?: string;
      /**
       * Format: public.calendar_sync_status
       * @default active
       * @enum {string}
       */
      sync_status: "active" | "paused" | "error";
      /** Format: text */
      sync_error?: string;
    };
    llm_prompts: {
      /**
       * Format: uuid
       * @description Note:
       *     This is a Primary Key.<pk/>
       * @default extensions.uuid_generate_v4()
       */
      id: string;
      /** Format: text */
      title?: string;
      /** Format: text */
      prompt_text?: string;
      /** Format: text */
      purpose?: string;
      /** Format: timestamp without time zone */
      last_used?: string;
    };
    calendar_webhook_channels: {
      /**
       * Format: uuid
       * @description Note:
       *     This is a Primary Key.<pk/>
       * @default gen_random_uuid()
       */
      id: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
       */
      user_id: string;
      /** Format: character varying */
      channel_id: string;
      /** Format: character varying */
      resource_id?: string;
      /**
       * Format: character varying
       * @default primary
       */
      calendar_id: string;
      /** Format: bigint */
      expiration: number;
      /** Format: character varying */
      sync_token?: string;
      /** Format: character varying */
      webhook_token: string;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      created_at: string;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      updated_at: string;
    };
    payment_methods: {
      /**
       * Format: uuid
       * @description Note:
       *     This is a Primary Key.<pk/>
       * @default gen_random_uuid()
       */
      id: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
       */
      user_id: string;
      /** Format: text */
      stripe_payment_method_id: string;
      /** Format: text */
      type: string;
      /** Format: text */
      card_brand?: string;
      /** Format: text */
      card_last4?: string;
      /**
       * Format: boolean
       * @default false
       */
      is_default: boolean;
      /**
       * Format: timestamp with time zone
       * @default CURRENT_TIMESTAMP
       */
      created_at: string;
      /**
       * Format: timestamp with time zone
       * @default CURRENT_TIMESTAMP
       */
      updated_at: string;
    };
    /** @description Daily aggregated analytics for admin dashboard */
    admin_analytics: {
      /**
       * Format: uuid
       * @description Note:
       *     This is a Primary Key.<pk/>
       * @default gen_random_uuid()
       */
      id: string;
      /** Format: date */
      date: string;
      /** Format: text */
      metric_name: string;
      /** Format: numeric */
      metric_value: number;
      /** Format: json */
      metadata?: unknown;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      created_at: string;
    };
    tasks: {
      /**
       * Format: uuid
       * @description Note:
       *     This is a Primary Key.<pk/>
       * @default extensions.uuid_generate_v4()
       */
      id: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `projects.id`.<fk table='projects' column='id'/>
       */
      project_id?: string;
      /** Format: text */
      title: string;
      /** Format: text */
      description?: string;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      created_at: string;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      updated_at: string;
      /** Format: uuid[] */
      dependencies?: string[];
      /** Format: text */
      details?: string;
      /** Format: date */
      recurrence_ends?: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `tasks.id`.<fk table='tasks' column='id'/>
       */
      parent_task_id?: string;
      /** Format: timestamp with time zone */
      completed_at?: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
       */
      user_id: string;
      /**
       * Format: boolean
       * @description Marks tasks as outdated/obsolete - excluded from synthesis and active task lists
       * @default false
       */
      outdated: boolean;
      /**
       * Format: integer
       * @default 30
       */
      duration_minutes: number;
      /** Format: timestamp with time zone */
      start_date?: string;
      /**
       * Format: text
       * @description Markdown-formatted breakdown of task into actionable steps and prerequisites
       */
      task_steps?: string;
      /**
       * Format: public.task_status
       * @default backlog
       * @enum {string}
       */
      status: "backlog" | "in_progress" | "done" | "blocked";
      /**
       * Format: public.priority_level
       * @default medium
       * @enum {string}
       */
      priority: "low" | "medium" | "high";
      /**
       * Format: public.task_type
       * @default one_off
       * @enum {string}
       */
      task_type: "one_off" | "recurring";
      /**
       * Format: public.recurrence_pattern
       * @enum {string}
       */
      recurrence_pattern?:
        | "daily"
        | "weekdays"
        | "weekly"
        | "biweekly"
        | "monthly"
        | "quarterly"
        | "yearly";
      /**
       * Format: timestamp with time zone
       * @description Soft delete timestamp. When null, task is active. When set, task is
       *       deleted.
       */
      deleted_at?: string;
      /**
       * Format: public.recurrence_end_reason
       * @enum {string}
       */
      recurrence_end_source?:
        | "indefinite"
        | "project_inherited"
        | "user_specified"
        | "user_action"
        | "project_end"
        | "max_occurrences"
        | "end_date"
        | "task_deleted";
    };
    user_brief_preferences: {
      /**
       * Format: uuid
       * @description Note:
       *     This is a Primary Key.<pk/>
       * @default gen_random_uuid()
       */
      id: string;
      /** Format: uuid */
      user_id: string;
      /**
       * Format: text
       * @default daily
       */
      frequency: string;
      /** Format: integer */
      day_of_week?: number;
      /**
       * Format: time without time zone
       * @default 09:00:00
       */
      time_of_day: string;
      /**
       * Format: text
       * @default UTC
       */
      timezone: string;
      /**
       * Format: boolean
       * @default true
       */
      is_active: boolean;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      created_at: string;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      updated_at: string;
      /**
       * Format: boolean
       * @description Whether the user has opted in to receive daily briefs via email
       * @default false
       */
      email_daily_brief: boolean;
    };
    project_questions: {
      /**
       * Format: uuid
       * @description Note:
       *     This is a Primary Key.<pk/>
       * @default gen_random_uuid()
       */
      id: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
       */
      user_id: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `projects.id`.<fk table='projects' column='id'/>
       */
      project_id?: string;
      /** Format: text */
      question: string;
      /** Format: text */
      context?: string;
      /** Format: text */
      expected_outcome?: string;
      /** Format: text */
      category?: string;
      /**
       * Format: text
       * @default medium
       */
      priority: string;
      /**
       * Format: text
       * @default active
       */
      status: string;
      /** Format: timestamp without time zone */
      answered_at?: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `brain_dumps.id`.<fk table='brain_dumps' column='id'/>
       */
      answer_brain_dump_id?: string;
      /** Format: text */
      source?: string;
      /** Format: text */
      source_field?: string;
      /** Format: jsonb */
      triggers?: unknown;
      /** Format: date */
      ask_after?: string;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      created_at: string;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      updated_at: string;
      /** Format: numeric */
      shown_to_user_count: number;
    };
    webhook_events: {
      /**
       * Format: uuid
       * @description Note:
       *     This is a Primary Key.<pk/>
       * @default gen_random_uuid()
       */
      id: string;
      /** Format: text */
      event_id: string;
      /** Format: text */
      event_type: string;
      /**
       * Format: text
       * @default pending
       */
      status: string;
      /** Format: jsonb */
      payload?: unknown;
      /** Format: text */
      error_message?: string;
      /**
       * Format: integer
       * @default 1
       */
      attempts: number;
      /** Format: timestamp with time zone */
      processed_at?: string;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      created_at: string;
    };
    beta_signups: {
      /**
       * Format: uuid
       * @description Note:
       *     This is a Primary Key.<pk/>
       * @default gen_random_uuid()
       */
      id: string;
      /** Format: text */
      email: string;
      /** Format: text */
      full_name: string;
      /** Format: text */
      job_title?: string;
      /** Format: text */
      company_name?: string;
      /** Format: text */
      why_interested?: string;
      /** Format: text[] */
      productivity_tools?: string[];
      /** Format: text */
      biggest_challenge?: string;
      /** Format: text */
      referral_source?: string;
      /**
       * Format: text
       * @default pending
       */
      signup_status: string;
      /** Format: timestamp with time zone */
      approved_at?: string;
      /** Format: uuid */
      invited_by?: string;
      /**
       * Format: boolean
       * @default true
       */
      wants_weekly_calls: boolean;
      /**
       * Format: boolean
       * @default true
       */
      wants_community_access: boolean;
      /**
       * Format: text
       * @default America/New_York
       */
      user_timezone: string;
      /** Format: inet */
      ip_address?: string;
      /** Format: text */
      user_agent?: string;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      created_at: string;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      updated_at: string;
    };
    /** @description Enhanced with recurrence support for better Google Calendar integration */
    task_calendar_events: {
      /**
       * Format: uuid
       * @description Note:
       *     This is a Primary Key.<pk/>
       * @default gen_random_uuid()
       */
      id: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
       */
      user_id: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `tasks.id`.<fk table='tasks' column='id'/>
       */
      task_id: string;
      /** Format: text */
      calendar_event_id: string;
      /** Format: text */
      calendar_id: string;
      /** Format: text */
      event_link?: string;
      /** Format: timestamp without time zone */
      last_synced_at?: string;
      /** Format: text */
      sync_error?: string;
      /** Format: timestamp with time zone */
      event_start?: string;
      /** Format: timestamp with time zone */
      event_end?: string;
      /** Format: text */
      event_title?: string;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      created_at: string;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      updated_at: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `task_calendar_events.id`.<fk table='task_calendar_events' column='id'/>
       */
      recurrence_master_id?: string;
      /** Format: date */
      recurrence_instance_date?: string;
      /**
       * Format: boolean
       * @default false
       */
      is_master_event: boolean;
      /**
       * Format: character varying
       * @default app
       */
      sync_source: string;
      /**
       * Format: integer
       * @default 1
       */
      sync_version: number;
      /** Format: text */
      recurrence_rule?: string;
      /** Format: timestamp with time zone */
      original_start_time?: string;
      /**
       * Format: boolean
       * @default false
       */
      is_exception: boolean;
      /** Format: text */
      exception_type?: string;
      /** Format: text */
      series_update_scope?: string;
      /**
       * Format: public.sync_status
       * @default pending
       * @enum {string}
       */
      sync_status: "pending" | "synced" | "failed" | "cancelled";
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `project_calendars.id`.<fk table='project_calendars' column='id'/>
       */
      project_calendar_id?: string;
    };
    beta_event_attendance: {
      /**
       * Format: uuid
       * @description Note:
       *     This is a Primary Key.<pk/>
       * @default gen_random_uuid()
       */
      id: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `beta_events.id`.<fk table='beta_events' column='id'/>
       */
      event_id?: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `beta_members.id`.<fk table='beta_members' column='id'/>
       */
      member_id?: string;
      /** Format: uuid */
      user_id?: string;
      /**
       * Format: text
       * @default pending
       */
      rsvp_status: string;
      /** Format: timestamp with time zone */
      rsvp_at?: string;
      /**
       * Format: boolean
       * @default false
       */
      attended: boolean;
      /** Format: timestamp with time zone */
      joined_at?: string;
      /** Format: timestamp with time zone */
      left_at?: string;
      /** Format: integer */
      event_rating?: number;
      /** Format: text */
      event_feedback?: string;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      created_at: string;
    };
    user_context: {
      /**
       * Format: uuid
       * @description Note:
       *     This is a Primary Key.<pk/>
       * @default gen_random_uuid()
       */
      id: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
       */
      user_id: string;
      /** Format: text */
      background?: string;
      /** Format: text */
      active_projects?: string;
      /** Format: text */
      goals_overview?: string;
      /** Format: text */
      habits?: string;
      /** Format: text */
      workflows?: string;
      /** Format: text */
      tools?: string;
      /** Format: text */
      schedule_preferences?: string;
      /** Format: text */
      work_style?: string;
      /** Format: text */
      blockers?: string;
      /** Format: text */
      collaboration_needs?: string;
      /** Format: text */
      skill_gaps?: string;
      /** Format: text */
      priorities?: string;
      /** Format: timestamp without time zone */
      onboarding_completed_at?: string;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      created_at: string;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      updated_at: string;
      /** Format: text */
      input_projects?: string;
      /** Format: text */
      input_work_style?: string;
      /** Format: text */
      input_challenges?: string;
      /** Format: text */
      input_help_focus?: string;
      /** Format: text */
      help_priorities?: string;
      /** Format: text */
      focus_areas?: string;
      /** Format: text */
      productivity_challenges?: string;
      /** Format: text */
      preferred_work_hours?: string;
      /** Format: text */
      communication_style?: string;
      /** Format: text */
      organization_method?: string;
      /**
       * Format: text
       * @description Stores the last input that was parsed by LLM for projects category
       */
      last_parsed_input_projects?: string;
      /**
       * Format: text
       * @description Stores the last input that was parsed by LLM for work_style category
       */
      last_parsed_input_work_style?: string;
      /**
       * Format: text
       * @description Stores the last input that was parsed by LLM for challenges category
       */
      last_parsed_input_challenges?: string;
      /**
       * Format: text
       * @description Stores the last input that was parsed by LLM for help_focus category
       */
      last_parsed_input_help_focus?: string;
    };
    admin_users: {
      /**
       * Format: uuid
       * @description Note:
       *     This is a Primary Key.<pk/>
       */
      user_id: string;
      /** Format: uuid */
      granted_by?: string;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      granted_at: string;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      created_at: string;
    };
    cron_logs: {
      /**
       * Format: uuid
       * @description Note:
       *     This is a Primary Key.<pk/>
       * @default gen_random_uuid()
       */
      id: string;
      /** Format: text */
      job_name: string;
      /** Format: text */
      status: string;
      /** Format: text */
      error_message?: string;
      /** Format: timestamp with time zone */
      executed_at: string;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      created_at: string;
    };
    trial_statistics: {
      /** Format: bigint */
      active_trials?: number;
      /** Format: bigint */
      expired_trials?: number;
      /** Format: bigint */
      active_subscriptions?: number;
      /** Format: bigint */
      beta_users?: number;
      /** Format: numeric */
      avg_trial_length_days?: number;
    };
    feedback_rate_limit: {
      /**
       * Format: uuid
       * @description Note:
       *     This is a Primary Key.<pk/>
       * @default gen_random_uuid()
       */
      id: string;
      /** Format: inet */
      ip_address: string;
      /**
       * Format: integer
       * @default 1
       */
      submission_count: number;
      /**
       * Format: timestamp with time zone
       * @default CURRENT_TIMESTAMP
       */
      first_submission: string;
      /**
       * Format: timestamp with time zone
       * @default CURRENT_TIMESTAMP
       */
      last_submission: string;
      /**
       * Format: boolean
       * @default false
       */
      is_blocked: boolean;
    };
    subscription_plans: {
      /**
       * Format: uuid
       * @description Note:
       *     This is a Primary Key.<pk/>
       * @default gen_random_uuid()
       */
      id: string;
      /** Format: text */
      stripe_price_id: string;
      /** Format: text */
      name: string;
      /** Format: text */
      description?: string;
      /** Format: integer */
      price_cents: number;
      /**
       * Format: text
       * @default usd
       */
      currency: string;
      /**
       * Format: text
       * @default month
       */
      billing_interval: string;
      /**
       * Format: integer
       * @default 1
       */
      interval_count: number;
      /** Format: jsonb */
      features?: unknown;
      /**
       * Format: boolean
       * @default true
       */
      is_active: boolean;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      created_at: string;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      updated_at: string;
    };
    queue_jobs_stats: {
      /** Format: text */
      status?: string;
      /** Format: text */
      job_type?: string;
      /** Format: bigint */
      count?: number;
      /** Format: timestamp with time zone */
      oldest_job?: string;
      /** Format: timestamp with time zone */
      newest_job?: string;
      /** Format: numeric */
      avg_duration_seconds?: number;
    };
    brain_dumps: {
      /**
       * Format: uuid
       * @description Note:
       *     This is a Primary Key.<pk/>
       * @default extensions.uuid_generate_v4()
       */
      id: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
       */
      user_id: string;
      /** Format: text */
      title?: string;
      /** Format: text */
      content?: string;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      created_at: string;
      /** Format: text[] */
      tags?: string[];
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      updated_at: string;
      /** Format: text */
      ai_summary?: string;
      /** Format: text */
      ai_insights?: string;
      /**
       * Format: public.brain_dump_status
       * @default saved
       * @enum {string}
       */
      status: "pending" | "parsed" | "saved" | "parsed_and_deleted";
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `projects.id`.<fk table='projects' column='id'/>
       */
      project_id?: string;
      /** Format: jsonb */
      metaData?: unknown;
      /** Format: jsonb */
      parsed_results?: unknown;
    };
    feedback: {
      /**
       * Format: uuid
       * @description Note:
       *     This is a Primary Key.<pk/>
       * @default gen_random_uuid()
       */
      id: string;
      /** Format: uuid */
      user_id?: string;
      /** Format: text */
      category: string;
      /** Format: integer */
      rating?: number;
      /** Format: text */
      feedback_text: string;
      /** Format: text */
      user_email?: string;
      /** Format: inet */
      user_ip?: string;
      /** Format: text */
      user_agent?: string;
      /**
       * Format: text
       * @default new
       */
      status: string;
      /**
       * Format: timestamp with time zone
       * @default CURRENT_TIMESTAMP
       */
      created_at: string;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      updated_at: string;
    };
    projects: {
      /**
       * Format: uuid
       * @description Note:
       *     This is a Primary Key.<pk/>
       * @default extensions.uuid_generate_v4()
       */
      id: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
       */
      user_id: string;
      /** Format: text */
      name: string;
      /** Format: text */
      slug: string;
      /** Format: text */
      description?: string;
      /** Format: date */
      start_date?: string;
      /** Format: date */
      end_date?: string;
      /** Format: text[] */
      tags?: string[];
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      created_at: string;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      updated_at: string;
      /** Format: text */
      context?: string;
      /** Format: text */
      executive_summary?: string;
      /**
       * Format: public.project_status
       * @default active
       * @enum {string}
       */
      status: "active" | "paused" | "completed" | "archived";
      /** Format: text */
      calendar_color_id?: string;
      /**
       * Format: boolean
       * @default true
       */
      calendar_sync_enabled: boolean;
      /** Format: jsonb */
      calendar_settings?: unknown;
    };
    /** @description Stores user-defined color themes for consistent calendar coloring across projects */
    calendar_themes: {
      /**
       * Format: uuid
       * @description Note:
       *     This is a Primary Key.<pk/>
       * @default gen_random_uuid()
       */
      id: string;
      /** Format: uuid */
      user_id: string;
      /** Format: text */
      theme_name: string;
      /**
       * Format: jsonb
       * @description JSON object with keys like high_priority, medium_priority, low_priority, completed, overdue mapped to Google color IDs
       */
      color_mappings: unknown;
      /**
       * Format: boolean
       * @default false
       */
      is_default: boolean;
      /**
       * Format: timestamp with time zone
       * @default timezone('utc'::text, now())
       */
      created_at: string;
      /**
       * Format: timestamp with time zone
       * @default timezone('utc'::text, now())
       */
      updated_at: string;
    };
    user_calendar_preferences: {
      /**
       * Format: uuid
       * @description Note:
       *     This is a Primary Key.<pk/>
       * @default gen_random_uuid()
       */
      id: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
       */
      user_id: string;
      /**
       * Format: time without time zone
       * @default 09:00:00
       */
      work_start_time: string;
      /**
       * Format: time without time zone
       * @default 17:00:00
       */
      work_end_time: string;
      /** Format: integer[] */
      working_days?: number[];
      /**
       * Format: integer
       * @default 60
       */
      default_task_duration_minutes: number;
      /**
       * Format: integer
       * @default 30
       */
      min_task_duration_minutes: number;
      /**
       * Format: integer
       * @default 240
       */
      max_task_duration_minutes: number;
      /**
       * Format: boolean
       * @default true
       */
      exclude_holidays: boolean;
      /**
       * Format: text
       * @default US
       */
      holiday_country_code: string;
      /**
       * Format: text
       * @default America/New_York
       */
      timezone: string;
      /**
       * Format: boolean
       * @default false
       */
      prefer_morning_for_important_tasks: boolean;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      created_at: string;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      updated_at: string;
    };
    brain_dump_links: {
      /**
       * Format: bigint
       * @description Note:
       *     This is a Primary Key.<pk/>
       */
      id: number;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      created_at: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `brain_dumps.id`.<fk table='brain_dumps' column='id'/>
       */
      brain_dump_id: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `projects.id`.<fk table='projects' column='id'/>
       */
      project_id?: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `notes.id`.<fk table='notes' column='id'/>
       */
      note_id?: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `tasks.id`.<fk table='tasks' column='id'/>
       */
      task_id?: string;
    };
    invoices: {
      /**
       * Format: uuid
       * @description Note:
       *     This is a Primary Key.<pk/>
       * @default gen_random_uuid()
       */
      id: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
       */
      user_id: string;
      /** Format: text */
      stripe_invoice_id: string;
      /** Format: text */
      stripe_customer_id: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `customer_subscriptions.id`.<fk table='customer_subscriptions' column='id'/>
       */
      subscription_id?: string;
      /** Format: integer */
      amount_paid: number;
      /** Format: integer */
      amount_due: number;
      /**
       * Format: text
       * @default usd
       */
      currency: string;
      /** Format: text */
      status: string;
      /** Format: text */
      invoice_pdf?: string;
      /** Format: text */
      hosted_invoice_url?: string;
      /**
       * Format: timestamp with time zone
       * @default CURRENT_TIMESTAMP
       */
      created_at: string;
    };
    visitors: {
      /**
       * Format: bigint
       * @description Note:
       *     This is a Primary Key.<pk/>
       */
      id: number;
      /** Format: text */
      visitor_id: string;
      /** Format: inet */
      ip_address?: string;
      /** Format: text */
      user_agent?: string;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      created_at: string;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      updated_at: string;
    };
    trial_reminders: {
      /**
       * Format: uuid
       * @description Note:
       *     This is a Primary Key.<pk/>
       * @default gen_random_uuid()
       */
      id: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
       */
      user_id: string;
      /** Format: text */
      reminder_type: string;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      sent_at: string;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      created_at: string;
    };
    /** @description Stores individual phases generated by AI, pending user approval */
    generated_phases: {
      /**
       * Format: uuid
       * @description Note:
       *     This is a Primary Key.<pk/>
       * @default gen_random_uuid()
       */
      id: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `project_phases_generation.id`.<fk table='project_phases_generation' column='id'/>
       */
      generation_id: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `projects.id`.<fk table='projects' column='id'/>
       */
      project_id: string;
      /** Format: text */
      name: string;
      /** Format: text */
      description?: string;
      /** Format: text[] */
      objectives?: string[];
      /** Format: text[] */
      deliverables?: string[];
      /** Format: text[] */
      success_criteria?: string[];
      /** Format: integer */
      suggested_duration_days?: number;
      /** Format: date */
      suggested_start_date?: string;
      /** Format: date */
      suggested_end_date?: string;
      /** Format: integer */
      suggested_order: number;
      /** Format: numeric */
      confidence_score?: number;
      /**
       * Format: boolean
       * @default false
       */
      is_approved: boolean;
      /** Format: timestamp with time zone */
      approved_at?: string;
      /** Format: uuid */
      approved_by?: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `phases.id`.<fk table='phases' column='id'/>
       */
      phase_id?: string;
      /** Format: jsonb */
      metadata?: unknown;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      created_at: string;
    };
    question_templates: {
      /**
       * Format: uuid
       * @description Note:
       *     This is a Primary Key.<pk/>
       * @default gen_random_uuid()
       */
      id: string;
      /** Format: text */
      template: string;
      /** Format: text */
      category: string;
      /** Format: jsonb */
      conditions?: unknown;
      /** Format: jsonb */
      variables?: unknown;
      /**
       * Format: double precision
       * @default 0.5
       */
      effectiveness_score: number;
      /**
       * Format: integer
       * @default 0
       */
      usage_count: number;
      /**
       * Format: timestamp without time zone
       * @default CURRENT_TIMESTAMP
       */
      created_at: string;
      /**
       * Format: timestamp without time zone
       * @default CURRENT_TIMESTAMP
       */
      updated_at: string;
    };
    phases: {
      /**
       * Format: uuid
       * @description Note:
       *     This is a Primary Key.<pk/>
       * @default gen_random_uuid()
       */
      id: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `projects.id`.<fk table='projects' column='id'/>
       */
      project_id: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
       */
      user_id: string;
      /** Format: text */
      name: string;
      /** Format: text */
      description?: string;
      /** Format: date */
      start_date: string;
      /** Format: date */
      end_date: string;
      /** Format: integer */
      order: number;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      created_at: string;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      updated_at: string;
      /**
       * Format: character varying
       * @description Method used for task scheduling: phases_only, schedule_in_phases, or calendar_optimized
       * @default schedule_in_phases
       */
      scheduling_method: string;
    };
    beta_members: {
      /**
       * Format: uuid
       * @description Note:
       *     This is a Primary Key.<pk/>
       * @default gen_random_uuid()
       */
      id: string;
      /** Format: uuid */
      user_id?: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `beta_signups.id`.<fk table='beta_signups' column='id'/>
       */
      signup_id?: string;
      /** Format: text */
      full_name: string;
      /** Format: text */
      email: string;
      /** Format: text */
      job_title?: string;
      /** Format: text */
      company_name?: string;
      /**
       * Format: timestamp with time zone
       * @default CURRENT_TIMESTAMP
       */
      joined_at: string;
      /**
       * Format: text
       * @default founder
       */
      beta_tier: string;
      /**
       * Format: text
       * @default full
       */
      access_level: string;
      /** Format: timestamp with time zone */
      last_active_at?: string;
      /**
       * Format: integer
       * @default 0
       */
      total_feedback_submitted: number;
      /**
       * Format: integer
       * @default 0
       */
      total_features_requested: number;
      /**
       * Format: integer
       * @default 0
       */
      total_calls_attended: number;
      /**
       * Format: boolean
       * @default true
       */
      has_lifetime_pricing: boolean;
      /**
       * Format: integer
       * @default 50
       */
      discount_percentage: number;
      /** Format: text[] */
      early_access_features?: string[];
      /**
       * Format: boolean
       * @default true
       */
      wants_weekly_calls: boolean;
      /**
       * Format: boolean
       * @default true
       */
      wants_community_access: boolean;
      /**
       * Format: boolean
       * @default true
       */
      wants_feature_updates: boolean;
      /**
       * Format: text
       * @default America/New_York
       */
      user_timezone: string;
      /**
       * Format: boolean
       * @default true
       */
      is_active: boolean;
      /** Format: timestamp with time zone */
      deactivated_at?: string;
      /** Format: text */
      deactivation_reason?: string;
      /**
       * Format: timestamp with time zone
       * @default CURRENT_TIMESTAMP
       */
      created_at: string;
      /**
       * Format: timestamp with time zone
       * @default CURRENT_TIMESTAMP
       */
      updated_at: string;
    };
    project_daily_briefs: {
      /**
       * Format: uuid
       * @description Note:
       *     This is a Primary Key.<pk/>
       * @default gen_random_uuid()
       */
      id: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
       */
      user_id: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `projects.id`.<fk table='projects' column='id'/>
       */
      project_id: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `project_brief_templates.id`.<fk table='project_brief_templates' column='id'/>
       */
      template_id?: string;
      /** Format: text */
      brief_content: string;
      /** Format: date */
      brief_date: string;
      /** Format: json */
      metadata?: unknown;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      created_at: string;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      updated_at: string;
      /**
       * Format: text
       * @default pending
       */
      generation_status: string;
      /** Format: timestamp with time zone */
      generation_started_at?: string;
      /** Format: timestamp with time zone */
      generation_completed_at?: string;
      /** Format: text */
      generation_error?: string;
    };
    notes: {
      /**
       * Format: uuid
       * @description Note:
       *     This is a Primary Key.<pk/>
       * @default extensions.uuid_generate_v4()
       */
      id: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
       */
      user_id: string;
      /** Format: text */
      title?: string;
      /** Format: text */
      content?: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `projects.id`.<fk table='projects' column='id'/>
       */
      project_id?: string;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      created_at: string;
      /** Format: text[] */
      tags?: string[];
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      updated_at: string;
      /** Format: text */
      category?: string;
    };
    /** @description Tracks AI-generated project phases before user approval */
    project_phases_generation: {
      /**
       * Format: uuid
       * @description Note:
       *     This is a Primary Key.<pk/>
       * @default gen_random_uuid()
       */
      id: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `projects.id`.<fk table='projects' column='id'/>
       */
      project_id: string;
      /** Format: uuid */
      user_id: string;
      /**
       * Format: text
       * @default pending
       */
      generation_status: string;
      /** Format: timestamp with time zone */
      generation_started_at?: string;
      /** Format: timestamp with time zone */
      generation_completed_at?: string;
      /** Format: text */
      generation_error?: string;
      /** Format: jsonb */
      generation_progress?: unknown;
      /**
       * Format: boolean
       * @default false
       */
      regenerated: boolean;
      /** Format: text */
      template_used?: string;
      /**
       * Format: jsonb
       * @description JSON array containing all generated phases data
       */
      phases_data?: unknown;
      /** Format: integer */
      phases_count?: number;
      /** Format: integer */
      total_duration_days?: number;
      /** Format: jsonb */
      metadata?: unknown;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      created_at: string;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      updated_at: string;
    };
    phase_task_schedules: {
      /**
       * Format: uuid
       * @description Note:
       *     This is a Primary Key.<pk/>
       * @default gen_random_uuid()
       */
      id: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `phases.id`.<fk table='phases' column='id'/>
       */
      phase_id: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `tasks.id`.<fk table='tasks' column='id'/>
       */
      task_id?: string;
      /** Format: timestamp with time zone */
      proposed_start: string;
      /** Format: timestamp with time zone */
      proposed_end: string;
      /**
       * Format: boolean
       * @default false
       */
      is_confirmed: boolean;
      /** Format: text */
      scheduling_notes?: string;
      /** Format: text[] */
      conflict_warnings?: string[];
      /**
       * Format: timestamp without time zone
       * @default CURRENT_TIMESTAMP
       */
      created_at: string;
      /**
       * Format: timestamp without time zone
       * @default CURRENT_TIMESTAMP
       */
      updated_at: string;
    };
    recurring_task_summary: {
      /**
       * Format: uuid
       * @description Note:
       *     This is a Primary Key.<pk/>
       */
      task_id?: string;
      /** Format: text */
      title?: string;
      /**
       * Format: public.recurrence_pattern
       * @enum {string}
       */
      recurrence_pattern?:
        | "daily"
        | "weekdays"
        | "weekly"
        | "biweekly"
        | "monthly"
        | "quarterly"
        | "yearly";
      /** Format: date */
      recurrence_ends?: string;
      /** Format: timestamp with time zone */
      start_date?: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
       */
      user_id?: string;
      /** Format: bigint */
      total_instances?: number;
      /** Format: bigint */
      completed_instances?: number;
      /** Format: bigint */
      skipped_instances?: number;
      /** Format: bigint */
      exception_count?: number;
      /** Format: date */
      next_occurrence?: string;
      /** Format: timestamp with time zone */
      last_completed_at?: string;
    };
    email_attachments: {
      /**
       * Format: uuid
       * @description Note:
       *     This is a Primary Key.<pk/>
       * @default gen_random_uuid()
       */
      id: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `emails.id`.<fk table='emails' column='id'/>
       */
      email_id: string;
      /** Format: character varying */
      filename: string;
      /** Format: character varying */
      original_filename: string;
      /** Format: integer */
      file_size: number;
      /** Format: character varying */
      content_type: string;
      /** Format: character varying */
      storage_path: string;
      /**
       * Format: character varying
       * @default email-attachments
       */
      storage_bucket: string;
      /**
       * Format: boolean
       * @default false
       */
      is_image: boolean;
      /** Format: integer */
      image_width?: number;
      /** Format: integer */
      image_height?: number;
      /** Format: jsonb */
      optimized_versions?: unknown;
      /** Format: uuid */
      created_by: string;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      created_at: string;
      /**
       * Format: boolean
       * @default false
       */
      is_inline: boolean;
      /** Format: character varying */
      cid?: string;
    };
    emails: {
      /**
       * Format: uuid
       * @description Note:
       *     This is a Primary Key.<pk/>
       * @default gen_random_uuid()
       */
      id: string;
      /** Format: character varying */
      subject: string;
      /** Format: text */
      content: string;
      /**
       * Format: character varying
       * @default dj@build-os.com''::character varying
       */
      from_email: string;
      /**
       * Format: character varying
       * @default BuildOS Team''::character varying
       */
      from_name: string;
      /**
       * Format: text
       * @default draft
       */
      status: string;
      /** Format: timestamp with time zone */
      scheduled_at?: string;
      /** Format: timestamp with time zone */
      sent_at?: string;
      /**
       * Format: boolean
       * @default true
       */
      tracking_enabled: boolean;
      /** Format: character varying */
      tracking_id?: string;
      /** Format: uuid */
      created_by: string;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      created_at: string;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      updated_at: string;
      /**
       * Format: character varying
       * @default general
       */
      category: string;
      /** Format: jsonb */
      template_data?: unknown;
    };
    beta_feature_votes: {
      /**
       * Format: uuid
       * @description Note:
       *     This is a Primary Key.<pk/>
       * @default gen_random_uuid()
       */
      id: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `beta_feedback.id`.<fk table='beta_feedback' column='id'/>
       */
      feedback_id?: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `beta_members.id`.<fk table='beta_members' column='id'/>
       */
      member_id?: string;
      /** Format: text */
      vote_type?: string;
      /**
       * Format: timestamp with time zone
       * @default CURRENT_TIMESTAMP
       */
      created_at: string;
    };
    email_tracking_events: {
      /**
       * Format: uuid
       * @description Note:
       *     This is a Primary Key.<pk/>
       * @default gen_random_uuid()
       */
      id: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `emails.id`.<fk table='emails' column='id'/>
       */
      email_id: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `email_recipients.id`.<fk table='email_recipients' column='id'/>
       */
      recipient_id?: string;
      /** Format: character varying */
      event_type: string;
      /** Format: jsonb */
      event_data?: unknown;
      /** Format: text */
      user_agent?: string;
      /** Format: inet */
      ip_address?: string;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      timestamp: string;
      /** Format: text */
      clicked_url?: string;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      created_at: string;
    };
    /** @description Stores AI-generated project synthesis including task consolidation and next steps */
    project_synthesis: {
      /**
       * Format: uuid
       * @description Note:
       *     This is a Primary Key.<pk/>
       * @default gen_random_uuid()
       */
      id: string;
      /** Format: uuid */
      user_id: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `projects.id`.<fk table='projects' column='id'/>
       */
      project_id: string;
      /**
       * Format: jsonb
       * @description JSON structure: {
       *       "consolidatedTasks": [...],
       *       "suggestedTasks": [...],
       *       "duplicatesFound": [...],
       *       "nextSteps": [...],
       *       "outdatedTaskIds": [...]
       *     }
       */
      synthesis_content: unknown;
      /** Format: text */
      insights?: string;
      /** Format: text */
      generation_model?: string;
      /** Format: integer */
      generation_duration_ms?: number;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      created_at: string;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      updated_at: string;
      /**
       * Format: integer
       * @default 0
       */
      operations_count: number;
      /**
       * Format: character varying
       * @default pending
       */
      status: string;
      /** Format: timestamp with time zone */
      applied_at?: string;
    };
    users: {
      /**
       * Format: uuid
       * @description Note:
       *     This is a Primary Key.<pk/>
       */
      id: string;
      /** Format: text */
      email: string;
      /** Format: text */
      name?: string;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      created_at: string;
      /** Format: text */
      bio?: string;
      /**
       * Format: boolean
       * @description Whether the user has admin privileges
       * @default false
       */
      is_admin: boolean;
      /**
       * Format: boolean
       * @default false
       */
      completed_onboarding: boolean;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      updated_at: string;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      last_visit: string;
      /** Format: text */
      stripe_customer_id?: string;
      /**
       * Format: text
       * @default free
       */
      subscription_status: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `subscription_plans.id`.<fk table='subscription_plans' column='id'/>
       */
      subscription_plan_id?: string;
      /** Format: timestamp with time zone */
      trial_ends_at?: string;
      /**
       * Format: boolean
       * @default false
       */
      access_restricted: boolean;
      /** Format: timestamp with time zone */
      access_restricted_at?: string;
      /**
       * Format: boolean
       * @description Indicates if the user is part of the beta program
       * @default false
       */
      is_beta_user: boolean;
    };
    api_keys: {
      /**
       * Format: integer
       * @description Note:
       *     This is a Primary Key.<pk/>
       */
      id: number;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
       */
      user_id: string;
      /** Format: text */
      service_name: string;
      /** Format: text */
      api_key: string;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      created_at: string;
    };
    sms_templates: {
      /**
       * Format: uuid
       * @description Note:
       *     This is a Primary Key.<pk/>
       * @default gen_random_uuid()
       */
      id: string;
      /** Format: character varying */
      template_key: string;
      /** Format: character varying */
      name: string;
      /** Format: text */
      description?: string;
      /** Format: text */
      message_template: string;
      /** Format: jsonb */
      template_vars?: unknown;
      /** Format: jsonb */
      required_vars?: unknown;
      /**
       * Format: integer
       * @default 160
       */
      max_length: number;
      /**
       * Format: boolean
       * @default true
       */
      is_active: boolean;
      /**
       * Format: integer
       * @default 0
       */
      usage_count: number;
      /** Format: timestamp with time zone */
      last_used_at?: string;
      /** Format: uuid */
      created_by?: string;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      created_at: string;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      updated_at: string;
    };
    error_summary: {
      /** Format: character varying */
      error_type?: string;
      /** Format: character varying */
      severity?: string;
      /** Format: bigint */
      error_count?: number;
      /** Format: bigint */
      affected_users?: number;
      /** Format: bigint */
      affected_projects?: number;
      /** Format: timestamp with time zone */
      first_occurrence?: string;
      /** Format: timestamp with time zone */
      last_occurrence?: string;
      /** Format: bigint */
      resolved_count?: number;
      /** Format: numeric */
      avg_response_time_ms?: number;
    };
    customer_subscriptions: {
      /**
       * Format: uuid
       * @description Note:
       *     This is a Primary Key.<pk/>
       * @default gen_random_uuid()
       */
      id: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
       */
      user_id: string;
      /** Format: text */
      stripe_customer_id: string;
      /** Format: text */
      stripe_subscription_id: string;
      /**
       * Format: text
       * @description Note:
       *     This is a Foreign Key to `subscription_plans.stripe_price_id`.<fk table='subscription_plans' column='stripe_price_id'/>
       */
      stripe_price_id?: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `subscription_plans.id`.<fk table='subscription_plans' column='id'/>
       */
      plan_id?: string;
      /** Format: text */
      status: string;
      /** Format: timestamp with time zone */
      current_period_start?: string;
      /** Format: timestamp with time zone */
      current_period_end?: string;
      /** Format: timestamp with time zone */
      cancel_at?: string;
      /** Format: timestamp with time zone */
      canceled_at?: string;
      /** Format: timestamp with time zone */
      trial_start?: string;
      /** Format: timestamp with time zone */
      trial_end?: string;
      /** Format: jsonb */
      metadata?: unknown;
      /**
       * Format: timestamp with time zone
       * @default CURRENT_TIMESTAMP
       */
      created_at: string;
      /**
       * Format: timestamp with time zone
       * @default CURRENT_TIMESTAMP
       */
      updated_at: string;
      /** Format: text */
      cancellation_reason?: string;
    };
    /** @description Detailed user activity tracking */
    user_activity_logs: {
      /**
       * Format: uuid
       * @description Note:
       *     This is a Primary Key.<pk/>
       * @default gen_random_uuid()
       */
      id: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
       */
      user_id?: string;
      /** Format: text */
      activity_type: string;
      /** Format: json */
      activity_data?: unknown;
      /** Format: inet */
      ip_address?: string;
      /** Format: text */
      user_agent?: string;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      created_at: string;
    };
    project_kept_versions: {
      /**
       * Format: uuid
       * @description Note:
       *     This is a Primary Key.<pk/>
       */
      history_id?: string;
      /** Format: uuid */
      project_id?: string;
      /** Format: integer */
      version_number?: number;
      /** Format: boolean */
      is_first_version?: boolean;
      /** Format: jsonb */
      project_data?: unknown;
      /** Format: timestamp without time zone */
      created_at?: string;
      /** Format: uuid */
      created_by?: string;
      /** Format: text */
      current_name?: string;
      /** Format: text */
      version_name?: string;
      /** Format: text */
      version_status?: string;
      /** Format: text */
      version_type?: string;
    };
    error_logs: {
      /**
       * Format: uuid
       * @description Note:
       *     This is a Primary Key.<pk/>
       * @default gen_random_uuid()
       */
      id: string;
      /** Format: character varying */
      error_type: string;
      /** Format: character varying */
      error_code?: string;
      /** Format: text */
      error_message: string;
      /** Format: text */
      error_stack?: string;
      /**
       * Format: character varying
       * @default error
       */
      severity: string;
      /** Format: uuid */
      user_id?: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `projects.id`.<fk table='projects' column='id'/>
       */
      project_id?: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `brain_dumps.id`.<fk table='brain_dumps' column='id'/>
       */
      brain_dump_id?: string;
      /** Format: character varying */
      endpoint?: string;
      /** Format: character varying */
      http_method?: string;
      /** Format: character varying */
      request_id?: string;
      /** Format: text */
      user_agent?: string;
      /** Format: inet */
      ip_address?: string;
      /** Format: character varying */
      llm_provider?: string;
      /** Format: character varying */
      llm_model?: string;
      /** Format: integer */
      prompt_tokens?: number;
      /** Format: integer */
      completion_tokens?: number;
      /** Format: integer */
      total_tokens?: number;
      /** Format: integer */
      response_time_ms?: number;
      /** Format: numeric */
      llm_temperature?: number;
      /** Format: integer */
      llm_max_tokens?: number;
      /** Format: character varying */
      operation_type?: string;
      /** Format: character varying */
      table_name?: string;
      /** Format: uuid */
      record_id?: string;
      /** Format: jsonb */
      operation_payload?: unknown;
      /** Format: jsonb */
      metadata?: unknown;
      /**
       * Format: character varying
       * @default development
       */
      environment: string;
      /** Format: character varying */
      app_version?: string;
      /** Format: jsonb */
      browser_info?: unknown;
      /**
       * Format: boolean
       * @default false
       */
      resolved: boolean;
      /** Format: timestamp with time zone */
      resolved_at?: string;
      /** Format: uuid */
      resolved_by?: string;
      /** Format: text */
      resolution_notes?: string;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      created_at: string;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      updated_at: string;
    };
    user_notifications: {
      /**
       * Format: uuid
       * @description Note:
       *     This is a Primary Key.<pk/>
       * @default gen_random_uuid()
       */
      id: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
       */
      user_id: string;
      /** Format: text */
      type: string;
      /** Format: text */
      title: string;
      /** Format: text */
      message: string;
      /**
       * Format: text
       * @default normal
       */
      priority: string;
      /** Format: text */
      action_url?: string;
      /** Format: timestamp with time zone */
      read_at?: string;
      /** Format: timestamp with time zone */
      dismissed_at?: string;
      /** Format: timestamp with time zone */
      expires_at?: string;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      created_at: string;
    };
    /** @description Real-time system performance metrics */
    system_metrics: {
      /**
       * Format: uuid
       * @description Note:
       *     This is a Primary Key.<pk/>
       * @default gen_random_uuid()
       */
      id: string;
      /** Format: text */
      metric_name: string;
      /** Format: numeric */
      metric_value: number;
      /** Format: text */
      metric_unit?: string;
      /** Format: text */
      metric_description?: string;
      /**
       * Format: timestamp without time zone
       * @default CURRENT_TIMESTAMP
       */
      recorded_at: string;
    };
    phase_tasks: {
      /**
       * Format: uuid
       * @description Note:
       *     This is a Primary Key.<pk/>
       * @default gen_random_uuid()
       */
      id: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `phases.id`.<fk table='phases' column='id'/>
       */
      phase_id: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `tasks.id`.<fk table='tasks' column='id'/>
       */
      task_id: string;
      /** Format: date */
      suggested_start_date?: string;
      /** Format: text */
      assignment_reason?: string;
      /**
       * Format: timestamp with time zone
       * @default now()
       */
      created_at: string;
    };
    projects_history: {
      /**
       * Format: uuid
       * @description Note:
       *     This is a Primary Key.<pk/>
       * @default gen_random_uuid()
       */
      history_id: string;
      /** Format: uuid */
      project_id: string;
      /** Format: integer */
      version_number: number;
      /**
       * Format: boolean
       * @default false
       */
      is_first_version: boolean;
      /** Format: jsonb */
      project_data: unknown;
      /**
       * Format: timestamp without time zone
       * @default CURRENT_TIMESTAMP
       */
      created_at: string;
      /** Format: uuid */
      created_by?: string;
    };
    user_calendar_tokens: {
      /**
       * Format: uuid
       * @description Note:
       *     This is a Primary Key.<pk/>
       * @default gen_random_uuid()
       */
      id: string;
      /**
       * Format: uuid
       * @description Note:
       *     This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
       */
      user_id: string;
      /** Format: text */
      access_token: string;
      /** Format: text */
      refresh_token?: string;
      /** Format: bigint */
      expiry_date?: number;
      /**
       * Format: text
       * @default Bearer
       */
      token_type: string;
      /** Format: text */
      scope?: string;
      /**
       * Format: timestamp without time zone
       * @default CURRENT_TIMESTAMP
       */
      created_at: string;
      /**
       * Format: timestamp without time zone
       * @default CURRENT_TIMESTAMP
       */
      updated_at: string;
      /** Format: text */
      google_email?: string;
      /** Format: text */
      google_user_id?: string;
    };
  };
  responses: never;
  parameters: {
    /** @description Preference */
    preferParams: "params=single-object";
    /** @description Preference */
    preferReturn: "return=representation" | "return=minimal" | "return=none";
    /** @description Preference */
    preferCount: "count=none";
    /** @description Preference */
    preferPost:
      | "return=representation"
      | "return=minimal"
      | "return=none"
      | "resolution=ignore-duplicates"
      | "resolution=merge-duplicates";
    /** @description Filtering Columns */
    select: string;
    /** @description On Conflict */
    on_conflict: string;
    /** @description Ordering */
    order: string;
    /** @description Limiting and Pagination */
    range: string;
    /** @description Limiting and Pagination */
    rangeUnit: string;
    /** @description Limiting and Pagination */
    offset: string;
    /** @description Limiting and Pagination */
    limit: string;
    "rowFilter.user_sms_preferences.id": string;
    "rowFilter.user_sms_preferences.user_id": string;
    "rowFilter.user_sms_preferences.phone_number": string;
    "rowFilter.user_sms_preferences.phone_verified": string;
    "rowFilter.user_sms_preferences.phone_verified_at": string;
    "rowFilter.user_sms_preferences.task_reminders": string;
    "rowFilter.user_sms_preferences.daily_brief_sms": string;
    "rowFilter.user_sms_preferences.urgent_alerts": string;
    "rowFilter.user_sms_preferences.quiet_hours_start": string;
    "rowFilter.user_sms_preferences.quiet_hours_end": string;
    "rowFilter.user_sms_preferences.timezone": string;
    "rowFilter.user_sms_preferences.daily_sms_limit": string;
    "rowFilter.user_sms_preferences.daily_sms_count": string;
    "rowFilter.user_sms_preferences.daily_count_reset_at": string;
    "rowFilter.user_sms_preferences.opted_out": string;
    "rowFilter.user_sms_preferences.opted_out_at": string;
    "rowFilter.user_sms_preferences.opt_out_reason": string;
    "rowFilter.user_sms_preferences.created_at": string;
    "rowFilter.user_sms_preferences.updated_at": string;
    "rowFilter.email_logs.id": string;
    "rowFilter.email_logs.user_id": string;
    "rowFilter.email_logs.to_email": string;
    "rowFilter.email_logs.subject": string;
    "rowFilter.email_logs.body": string;
    "rowFilter.email_logs.cc": string;
    "rowFilter.email_logs.bcc": string;
    "rowFilter.email_logs.reply_to": string;
    "rowFilter.email_logs.metadata": string;
    "rowFilter.email_logs.status": string;
    "rowFilter.email_logs.error_message": string;
    "rowFilter.email_logs.sent_at": string;
    "rowFilter.email_logs.created_at": string;
    "rowFilter.daily_briefs.id": string;
    "rowFilter.daily_briefs.user_id": string;
    "rowFilter.daily_briefs.brief_date": string;
    "rowFilter.daily_briefs.summary_content": string;
    "rowFilter.daily_briefs.project_brief_ids": string;
    "rowFilter.daily_briefs.insights": string;
    "rowFilter.daily_briefs.priority_actions": string;
    "rowFilter.daily_briefs.created_at": string;
    "rowFilter.daily_briefs.updated_at": string;
    "rowFilter.daily_briefs.generation_status": string;
    "rowFilter.daily_briefs.generation_started_at": string;
    "rowFilter.daily_briefs.generation_completed_at": string;
    "rowFilter.daily_briefs.generation_progress": string;
    "rowFilter.daily_briefs.generation_error": string;
    "rowFilter.daily_briefs.metadata": string;
    "rowFilter.daily_briefs.llm_analysis": string;
    "rowFilter.recurring_task_migration_log.id": string;
    "rowFilter.recurring_task_migration_log.task_id": string;
    "rowFilter.recurring_task_migration_log.user_id": string;
    "rowFilter.recurring_task_migration_log.project_id": string;
    "rowFilter.recurring_task_migration_log.migration_type": string;
    "rowFilter.recurring_task_migration_log.old_recurrence_ends": string;
    "rowFilter.recurring_task_migration_log.new_recurrence_ends": string;
    "rowFilter.recurring_task_migration_log.old_calendar_event_id": string;
    "rowFilter.recurring_task_migration_log.new_calendar_event_id": string;
    "rowFilter.recurring_task_migration_log.status": string;
    "rowFilter.recurring_task_migration_log.error_message": string;
    "rowFilter.recurring_task_migration_log.created_at": string;
    "rowFilter.recurring_task_migration_log.updated_at": string;
    "rowFilter.queue_jobs.id": string;
    "rowFilter.queue_jobs.user_id": string;
    "rowFilter.queue_jobs.scheduled_for": string;
    "rowFilter.queue_jobs.queue_job_id": string;
    "rowFilter.queue_jobs.created_at": string;
    "rowFilter.queue_jobs.processed_at": string;
    "rowFilter.queue_jobs.error_message": string;
    "rowFilter.queue_jobs.metadata": string;
    "rowFilter.queue_jobs.priority": string;
    "rowFilter.queue_jobs.attempts": string;
    "rowFilter.queue_jobs.max_attempts": string;
    "rowFilter.queue_jobs.started_at": string;
    "rowFilter.queue_jobs.completed_at": string;
    "rowFilter.queue_jobs.result": string;
    "rowFilter.queue_jobs.updated_at": string;
    "rowFilter.queue_jobs.status": string;
    "rowFilter.queue_jobs.job_type": string;
    "rowFilter.question_metrics.id": string;
    "rowFilter.question_metrics.question_id": string;
    "rowFilter.question_metrics.user_id": string;
    "rowFilter.question_metrics.presented_at": string;
    "rowFilter.question_metrics.responded_at": string;
    "rowFilter.question_metrics.response_quality": string;
    "rowFilter.question_metrics.created_project": string;
    "rowFilter.question_metrics.created_tasks_count": string;
    "rowFilter.question_metrics.brain_dump_length": string;
    "rowFilter.question_metrics.created_at": string;
    "rowFilter.failed_payments.id": string;
    "rowFilter.failed_payments.user_id": string;
    "rowFilter.failed_payments.subscription_id": string;
    "rowFilter.failed_payments.invoice_id": string;
    "rowFilter.failed_payments.amount_due": string;
    "rowFilter.failed_payments.failed_at": string;
    "rowFilter.failed_payments.retry_count": string;
    "rowFilter.failed_payments.last_retry_at": string;
    "rowFilter.failed_payments.dunning_stage": string;
    "rowFilter.failed_payments.last_dunning_at": string;
    "rowFilter.failed_payments.resolved_at": string;
    "rowFilter.failed_payments.resolution_type": string;
    "rowFilter.failed_payments.created_at": string;
    "rowFilter.failed_payments.updated_at": string;
    "rowFilter.beta_events.id": string;
    "rowFilter.beta_events.event_title": string;
    "rowFilter.beta_events.event_description": string;
    "rowFilter.beta_events.event_type": string;
    "rowFilter.beta_events.scheduled_at": string;
    "rowFilter.beta_events.duration_minutes": string;
    "rowFilter.beta_events.event_timezone": string;
    "rowFilter.beta_events.meeting_link": string;
    "rowFilter.beta_events.agenda": string;
    "rowFilter.beta_events.meeting_notes": string;
    "rowFilter.beta_events.recording_url": string;
    "rowFilter.beta_events.event_status": string;
    "rowFilter.beta_events.max_attendees": string;
    "rowFilter.beta_events.created_by": string;
    "rowFilter.beta_events.created_at": string;
    "rowFilter.beta_events.updated_at": string;
    "rowFilter.beta_feedback.id": string;
    "rowFilter.beta_feedback.member_id": string;
    "rowFilter.beta_feedback.user_id": string;
    "rowFilter.beta_feedback.feedback_type": string;
    "rowFilter.beta_feedback.feedback_title": string;
    "rowFilter.beta_feedback.feedback_description": string;
    "rowFilter.beta_feedback.feedback_priority": string;
    "rowFilter.beta_feedback.feature_area": string;
    "rowFilter.beta_feedback.feedback_tags": string;
    "rowFilter.beta_feedback.feedback_status": string;
    "rowFilter.beta_feedback.implemented_at": string;
    "rowFilter.beta_feedback.declined_reason": string;
    "rowFilter.beta_feedback.upvotes": string;
    "rowFilter.beta_feedback.founder_response": string;
    "rowFilter.beta_feedback.founder_responded_at": string;
    "rowFilter.beta_feedback.created_at": string;
    "rowFilter.beta_feedback.updated_at": string;
    "rowFilter.discount_codes.id": string;
    "rowFilter.discount_codes.code": string;
    "rowFilter.discount_codes.stripe_coupon_id": string;
    "rowFilter.discount_codes.description": string;
    "rowFilter.discount_codes.discount_type": string;
    "rowFilter.discount_codes.discount_value": string;
    "rowFilter.discount_codes.duration": string;
    "rowFilter.discount_codes.duration_in_months": string;
    "rowFilter.discount_codes.max_redemptions": string;
    "rowFilter.discount_codes.times_redeemed": string;
    "rowFilter.discount_codes.valid_from": string;
    "rowFilter.discount_codes.valid_until": string;
    "rowFilter.discount_codes.metadata": string;
    "rowFilter.discount_codes.is_active": string;
    "rowFilter.discount_codes.created_at": string;
    "rowFilter.discount_codes.updated_at": string;
    "rowFilter.recurring_task_instances.id": string;
    "rowFilter.recurring_task_instances.task_id": string;
    "rowFilter.recurring_task_instances.instance_date": string;
    "rowFilter.recurring_task_instances.status": string;
    "rowFilter.recurring_task_instances.completed_at": string;
    "rowFilter.recurring_task_instances.skipped": string;
    "rowFilter.recurring_task_instances.notes": string;
    "rowFilter.recurring_task_instances.calendar_event_id": string;
    "rowFilter.recurring_task_instances.created_at": string;
    "rowFilter.recurring_task_instances.updated_at": string;
    "rowFilter.recurring_task_instances.user_id": string;
    "rowFilter.sms_messages.id": string;
    "rowFilter.sms_messages.user_id": string;
    "rowFilter.sms_messages.phone_number": string;
    "rowFilter.sms_messages.message_content": string;
    "rowFilter.sms_messages.template_id": string;
    "rowFilter.sms_messages.template_vars": string;
    "rowFilter.sms_messages.status": string;
    "rowFilter.sms_messages.priority": string;
    "rowFilter.sms_messages.scheduled_for": string;
    "rowFilter.sms_messages.sent_at": string;
    "rowFilter.sms_messages.delivered_at": string;
    "rowFilter.sms_messages.twilio_sid": string;
    "rowFilter.sms_messages.twilio_status": string;
    "rowFilter.sms_messages.twilio_error_code": string;
    "rowFilter.sms_messages.twilio_error_message": string;
    "rowFilter.sms_messages.attempt_count": string;
    "rowFilter.sms_messages.max_attempts": string;
    "rowFilter.sms_messages.next_retry_at": string;
    "rowFilter.sms_messages.queue_job_id": string;
    "rowFilter.sms_messages.project_id": string;
    "rowFilter.sms_messages.task_id": string;
    "rowFilter.sms_messages.metadata": string;
    "rowFilter.sms_messages.created_at": string;
    "rowFilter.sms_messages.updated_at": string;
    "rowFilter.user_discounts.id": string;
    "rowFilter.user_discounts.user_id": string;
    "rowFilter.user_discounts.discount_code_id": string;
    "rowFilter.user_discounts.stripe_subscription_id": string;
    "rowFilter.user_discounts.applied_at": string;
    "rowFilter.user_discounts.expires_at": string;
    "rowFilter.project_brief_templates.id": string;
    "rowFilter.project_brief_templates.name": string;
    "rowFilter.project_brief_templates.description": string;
    "rowFilter.project_brief_templates.template_content": string;
    "rowFilter.project_brief_templates.is_default": string;
    "rowFilter.project_brief_templates.variables": string;
    "rowFilter.project_brief_templates.created_at": string;
    "rowFilter.project_brief_templates.updated_at": string;
    "rowFilter.project_brief_templates.user_id": string;
    "rowFilter.project_brief_templates.in_use": string;
    "rowFilter.project_brief_templates.project_id": string;
    /** @description Additional metadata including generation parameters and usage statistics */
    "rowFilter.project_brief_templates.metadata": string;
    /** @description Indicates how the template was created: manual, ai, or system */
    "rowFilter.project_brief_templates.generated_by": string;
    "rowFilter.project_brief_templates.generation_model": string;
    /** @description Snapshot of project context at the time of template generation */
    "rowFilter.project_brief_templates.context_snapshot": string;
    "rowFilter.email_recipients.id": string;
    "rowFilter.email_recipients.email_id": string;
    "rowFilter.email_recipients.recipient_email": string;
    "rowFilter.email_recipients.recipient_name": string;
    "rowFilter.email_recipients.recipient_type": string;
    "rowFilter.email_recipients.recipient_id": string;
    "rowFilter.email_recipients.status": string;
    "rowFilter.email_recipients.sent_at": string;
    "rowFilter.email_recipients.delivered_at": string;
    "rowFilter.email_recipients.opened_at": string;
    "rowFilter.email_recipients.open_count": string;
    "rowFilter.email_recipients.last_opened_at": string;
    "rowFilter.email_recipients.error_message": string;
    "rowFilter.email_recipients.created_at": string;
    "rowFilter.email_recipients.updated_at": string;
    "rowFilter.generated_phase_tasks.id": string;
    "rowFilter.generated_phase_tasks.generated_phase_id": string;
    "rowFilter.generated_phase_tasks.task_id": string;
    /** @description AI confidence score for the task-to-phase assignment suggestion (0-1) */
    "rowFilter.generated_phase_tasks.confidence_score": string;
    "rowFilter.generated_phase_tasks.reasoning": string;
    "rowFilter.generated_phase_tasks.suggested_start_date": string;
    "rowFilter.generated_phase_tasks.suggested_due_date": string;
    "rowFilter.generated_phase_tasks.is_approved": string;
    "rowFilter.generated_phase_tasks.created_at": string;
    "rowFilter.project_brief_template_usage.id": string;
    "rowFilter.project_brief_template_usage.template_id": string;
    "rowFilter.project_brief_template_usage.user_id": string;
    "rowFilter.project_brief_template_usage.project_id": string;
    "rowFilter.project_brief_template_usage.used_at": string;
    "rowFilter.project_brief_template_usage.brief_date": string;
    "rowFilter.project_brief_template_usage.metadata": string;
    "rowFilter.project_calendars.id": string;
    "rowFilter.project_calendars.project_id": string;
    "rowFilter.project_calendars.user_id": string;
    /** @description The Google Calendar ID returned when creating a calendar via Google Calendar API */
    "rowFilter.project_calendars.calendar_id": string;
    "rowFilter.project_calendars.calendar_name": string;
    /** @description Google Calendar color IDs: 1=Lavender (#7986cb), 2=Sage (#33b679), 3=Grape (#8e24aa), 4=Flamingo (#e67c73), 5=Banana (#f6bf26), 6=Tangerine (#f4511e), 7=Peacock (#039be5), 8=Graphite (#616161), 9=Blueberry (#3f51b5), 10=Basil (#0b8043), 11=Tomato (#d50000) */
    "rowFilter.project_calendars.color_id": string;
    /** @description Cached hex color value for UI display without needing to map from Google color ID */
    "rowFilter.project_calendars.hex_color": string;
    "rowFilter.project_calendars.is_primary": string;
    "rowFilter.project_calendars.sync_enabled": string;
    "rowFilter.project_calendars.visibility": string;
    "rowFilter.project_calendars.created_at": string;
    "rowFilter.project_calendars.updated_at": string;
    "rowFilter.project_calendars.last_synced_at": string;
    "rowFilter.project_calendars.sync_status": string;
    "rowFilter.project_calendars.sync_error": string;
    "rowFilter.llm_prompts.id": string;
    "rowFilter.llm_prompts.title": string;
    "rowFilter.llm_prompts.prompt_text": string;
    "rowFilter.llm_prompts.purpose": string;
    "rowFilter.llm_prompts.last_used": string;
    "rowFilter.calendar_webhook_channels.id": string;
    "rowFilter.calendar_webhook_channels.user_id": string;
    "rowFilter.calendar_webhook_channels.channel_id": string;
    "rowFilter.calendar_webhook_channels.resource_id": string;
    "rowFilter.calendar_webhook_channels.calendar_id": string;
    "rowFilter.calendar_webhook_channels.expiration": string;
    "rowFilter.calendar_webhook_channels.sync_token": string;
    "rowFilter.calendar_webhook_channels.webhook_token": string;
    "rowFilter.calendar_webhook_channels.created_at": string;
    "rowFilter.calendar_webhook_channels.updated_at": string;
    "rowFilter.payment_methods.id": string;
    "rowFilter.payment_methods.user_id": string;
    "rowFilter.payment_methods.stripe_payment_method_id": string;
    "rowFilter.payment_methods.type": string;
    "rowFilter.payment_methods.card_brand": string;
    "rowFilter.payment_methods.card_last4": string;
    "rowFilter.payment_methods.is_default": string;
    "rowFilter.payment_methods.created_at": string;
    "rowFilter.payment_methods.updated_at": string;
    "rowFilter.admin_analytics.id": string;
    "rowFilter.admin_analytics.date": string;
    "rowFilter.admin_analytics.metric_name": string;
    "rowFilter.admin_analytics.metric_value": string;
    "rowFilter.admin_analytics.metadata": string;
    "rowFilter.admin_analytics.created_at": string;
    "rowFilter.tasks.id": string;
    "rowFilter.tasks.project_id": string;
    "rowFilter.tasks.title": string;
    "rowFilter.tasks.description": string;
    "rowFilter.tasks.created_at": string;
    "rowFilter.tasks.updated_at": string;
    "rowFilter.tasks.dependencies": string;
    "rowFilter.tasks.details": string;
    "rowFilter.tasks.recurrence_ends": string;
    "rowFilter.tasks.parent_task_id": string;
    "rowFilter.tasks.completed_at": string;
    "rowFilter.tasks.user_id": string;
    /** @description Marks tasks as outdated/obsolete - excluded from synthesis and active task lists */
    "rowFilter.tasks.outdated": string;
    "rowFilter.tasks.duration_minutes": string;
    "rowFilter.tasks.start_date": string;
    /** @description Markdown-formatted breakdown of task into actionable steps and prerequisites */
    "rowFilter.tasks.task_steps": string;
    "rowFilter.tasks.status": string;
    "rowFilter.tasks.priority": string;
    "rowFilter.tasks.task_type": string;
    "rowFilter.tasks.recurrence_pattern": string;
    /** @description Soft delete timestamp. When null, task is active. When set, task is
     *       deleted. */
    "rowFilter.tasks.deleted_at": string;
    "rowFilter.tasks.recurrence_end_source": string;
    "rowFilter.user_brief_preferences.id": string;
    "rowFilter.user_brief_preferences.user_id": string;
    "rowFilter.user_brief_preferences.frequency": string;
    "rowFilter.user_brief_preferences.day_of_week": string;
    "rowFilter.user_brief_preferences.time_of_day": string;
    "rowFilter.user_brief_preferences.timezone": string;
    "rowFilter.user_brief_preferences.is_active": string;
    "rowFilter.user_brief_preferences.created_at": string;
    "rowFilter.user_brief_preferences.updated_at": string;
    /** @description Whether the user has opted in to receive daily briefs via email */
    "rowFilter.user_brief_preferences.email_daily_brief": string;
    "rowFilter.project_questions.id": string;
    "rowFilter.project_questions.user_id": string;
    "rowFilter.project_questions.project_id": string;
    "rowFilter.project_questions.question": string;
    "rowFilter.project_questions.context": string;
    "rowFilter.project_questions.expected_outcome": string;
    "rowFilter.project_questions.category": string;
    "rowFilter.project_questions.priority": string;
    "rowFilter.project_questions.status": string;
    "rowFilter.project_questions.answered_at": string;
    "rowFilter.project_questions.answer_brain_dump_id": string;
    "rowFilter.project_questions.source": string;
    "rowFilter.project_questions.source_field": string;
    "rowFilter.project_questions.triggers": string;
    "rowFilter.project_questions.ask_after": string;
    "rowFilter.project_questions.created_at": string;
    "rowFilter.project_questions.updated_at": string;
    "rowFilter.project_questions.shown_to_user_count": string;
    "rowFilter.webhook_events.id": string;
    "rowFilter.webhook_events.event_id": string;
    "rowFilter.webhook_events.event_type": string;
    "rowFilter.webhook_events.status": string;
    "rowFilter.webhook_events.payload": string;
    "rowFilter.webhook_events.error_message": string;
    "rowFilter.webhook_events.attempts": string;
    "rowFilter.webhook_events.processed_at": string;
    "rowFilter.webhook_events.created_at": string;
    "rowFilter.beta_signups.id": string;
    "rowFilter.beta_signups.email": string;
    "rowFilter.beta_signups.full_name": string;
    "rowFilter.beta_signups.job_title": string;
    "rowFilter.beta_signups.company_name": string;
    "rowFilter.beta_signups.why_interested": string;
    "rowFilter.beta_signups.productivity_tools": string;
    "rowFilter.beta_signups.biggest_challenge": string;
    "rowFilter.beta_signups.referral_source": string;
    "rowFilter.beta_signups.signup_status": string;
    "rowFilter.beta_signups.approved_at": string;
    "rowFilter.beta_signups.invited_by": string;
    "rowFilter.beta_signups.wants_weekly_calls": string;
    "rowFilter.beta_signups.wants_community_access": string;
    "rowFilter.beta_signups.user_timezone": string;
    "rowFilter.beta_signups.ip_address": string;
    "rowFilter.beta_signups.user_agent": string;
    "rowFilter.beta_signups.created_at": string;
    "rowFilter.beta_signups.updated_at": string;
    "rowFilter.task_calendar_events.id": string;
    "rowFilter.task_calendar_events.user_id": string;
    "rowFilter.task_calendar_events.task_id": string;
    "rowFilter.task_calendar_events.calendar_event_id": string;
    "rowFilter.task_calendar_events.calendar_id": string;
    "rowFilter.task_calendar_events.event_link": string;
    "rowFilter.task_calendar_events.last_synced_at": string;
    "rowFilter.task_calendar_events.sync_error": string;
    "rowFilter.task_calendar_events.event_start": string;
    "rowFilter.task_calendar_events.event_end": string;
    "rowFilter.task_calendar_events.event_title": string;
    "rowFilter.task_calendar_events.created_at": string;
    "rowFilter.task_calendar_events.updated_at": string;
    "rowFilter.task_calendar_events.recurrence_master_id": string;
    "rowFilter.task_calendar_events.recurrence_instance_date": string;
    "rowFilter.task_calendar_events.is_master_event": string;
    "rowFilter.task_calendar_events.sync_source": string;
    "rowFilter.task_calendar_events.sync_version": string;
    "rowFilter.task_calendar_events.recurrence_rule": string;
    "rowFilter.task_calendar_events.original_start_time": string;
    "rowFilter.task_calendar_events.is_exception": string;
    "rowFilter.task_calendar_events.exception_type": string;
    "rowFilter.task_calendar_events.series_update_scope": string;
    "rowFilter.task_calendar_events.sync_status": string;
    "rowFilter.task_calendar_events.project_calendar_id": string;
    "rowFilter.beta_event_attendance.id": string;
    "rowFilter.beta_event_attendance.event_id": string;
    "rowFilter.beta_event_attendance.member_id": string;
    "rowFilter.beta_event_attendance.user_id": string;
    "rowFilter.beta_event_attendance.rsvp_status": string;
    "rowFilter.beta_event_attendance.rsvp_at": string;
    "rowFilter.beta_event_attendance.attended": string;
    "rowFilter.beta_event_attendance.joined_at": string;
    "rowFilter.beta_event_attendance.left_at": string;
    "rowFilter.beta_event_attendance.event_rating": string;
    "rowFilter.beta_event_attendance.event_feedback": string;
    "rowFilter.beta_event_attendance.created_at": string;
    "rowFilter.user_context.id": string;
    "rowFilter.user_context.user_id": string;
    "rowFilter.user_context.background": string;
    "rowFilter.user_context.active_projects": string;
    "rowFilter.user_context.goals_overview": string;
    "rowFilter.user_context.habits": string;
    "rowFilter.user_context.workflows": string;
    "rowFilter.user_context.tools": string;
    "rowFilter.user_context.schedule_preferences": string;
    "rowFilter.user_context.work_style": string;
    "rowFilter.user_context.blockers": string;
    "rowFilter.user_context.collaboration_needs": string;
    "rowFilter.user_context.skill_gaps": string;
    "rowFilter.user_context.priorities": string;
    "rowFilter.user_context.onboarding_completed_at": string;
    "rowFilter.user_context.created_at": string;
    "rowFilter.user_context.updated_at": string;
    "rowFilter.user_context.input_projects": string;
    "rowFilter.user_context.input_work_style": string;
    "rowFilter.user_context.input_challenges": string;
    "rowFilter.user_context.input_help_focus": string;
    "rowFilter.user_context.help_priorities": string;
    "rowFilter.user_context.focus_areas": string;
    "rowFilter.user_context.productivity_challenges": string;
    "rowFilter.user_context.preferred_work_hours": string;
    "rowFilter.user_context.communication_style": string;
    "rowFilter.user_context.organization_method": string;
    /** @description Stores the last input that was parsed by LLM for projects category */
    "rowFilter.user_context.last_parsed_input_projects": string;
    /** @description Stores the last input that was parsed by LLM for work_style category */
    "rowFilter.user_context.last_parsed_input_work_style": string;
    /** @description Stores the last input that was parsed by LLM for challenges category */
    "rowFilter.user_context.last_parsed_input_challenges": string;
    /** @description Stores the last input that was parsed by LLM for help_focus category */
    "rowFilter.user_context.last_parsed_input_help_focus": string;
    "rowFilter.admin_users.user_id": string;
    "rowFilter.admin_users.granted_by": string;
    "rowFilter.admin_users.granted_at": string;
    "rowFilter.admin_users.created_at": string;
    "rowFilter.cron_logs.id": string;
    "rowFilter.cron_logs.job_name": string;
    "rowFilter.cron_logs.status": string;
    "rowFilter.cron_logs.error_message": string;
    "rowFilter.cron_logs.executed_at": string;
    "rowFilter.cron_logs.created_at": string;
    "rowFilter.trial_statistics.active_trials": string;
    "rowFilter.trial_statistics.expired_trials": string;
    "rowFilter.trial_statistics.active_subscriptions": string;
    "rowFilter.trial_statistics.beta_users": string;
    "rowFilter.trial_statistics.avg_trial_length_days": string;
    "rowFilter.feedback_rate_limit.id": string;
    "rowFilter.feedback_rate_limit.ip_address": string;
    "rowFilter.feedback_rate_limit.submission_count": string;
    "rowFilter.feedback_rate_limit.first_submission": string;
    "rowFilter.feedback_rate_limit.last_submission": string;
    "rowFilter.feedback_rate_limit.is_blocked": string;
    "rowFilter.subscription_plans.id": string;
    "rowFilter.subscription_plans.stripe_price_id": string;
    "rowFilter.subscription_plans.name": string;
    "rowFilter.subscription_plans.description": string;
    "rowFilter.subscription_plans.price_cents": string;
    "rowFilter.subscription_plans.currency": string;
    "rowFilter.subscription_plans.billing_interval": string;
    "rowFilter.subscription_plans.interval_count": string;
    "rowFilter.subscription_plans.features": string;
    "rowFilter.subscription_plans.is_active": string;
    "rowFilter.subscription_plans.created_at": string;
    "rowFilter.subscription_plans.updated_at": string;
    "rowFilter.queue_jobs_stats.status": string;
    "rowFilter.queue_jobs_stats.job_type": string;
    "rowFilter.queue_jobs_stats.count": string;
    "rowFilter.queue_jobs_stats.oldest_job": string;
    "rowFilter.queue_jobs_stats.newest_job": string;
    "rowFilter.queue_jobs_stats.avg_duration_seconds": string;
    "rowFilter.brain_dumps.id": string;
    "rowFilter.brain_dumps.user_id": string;
    "rowFilter.brain_dumps.title": string;
    "rowFilter.brain_dumps.content": string;
    "rowFilter.brain_dumps.created_at": string;
    "rowFilter.brain_dumps.tags": string;
    "rowFilter.brain_dumps.updated_at": string;
    "rowFilter.brain_dumps.ai_summary": string;
    "rowFilter.brain_dumps.ai_insights": string;
    "rowFilter.brain_dumps.status": string;
    "rowFilter.brain_dumps.project_id": string;
    "rowFilter.brain_dumps.metaData": string;
    "rowFilter.brain_dumps.parsed_results": string;
    "rowFilter.feedback.id": string;
    "rowFilter.feedback.user_id": string;
    "rowFilter.feedback.category": string;
    "rowFilter.feedback.rating": string;
    "rowFilter.feedback.feedback_text": string;
    "rowFilter.feedback.user_email": string;
    "rowFilter.feedback.user_ip": string;
    "rowFilter.feedback.user_agent": string;
    "rowFilter.feedback.status": string;
    "rowFilter.feedback.created_at": string;
    "rowFilter.feedback.updated_at": string;
    "rowFilter.projects.id": string;
    "rowFilter.projects.user_id": string;
    "rowFilter.projects.name": string;
    "rowFilter.projects.slug": string;
    "rowFilter.projects.description": string;
    "rowFilter.projects.start_date": string;
    "rowFilter.projects.end_date": string;
    "rowFilter.projects.tags": string;
    "rowFilter.projects.created_at": string;
    "rowFilter.projects.updated_at": string;
    "rowFilter.projects.context": string;
    "rowFilter.projects.executive_summary": string;
    "rowFilter.projects.status": string;
    "rowFilter.projects.calendar_color_id": string;
    "rowFilter.projects.calendar_sync_enabled": string;
    "rowFilter.projects.calendar_settings": string;
    "rowFilter.calendar_themes.id": string;
    "rowFilter.calendar_themes.user_id": string;
    "rowFilter.calendar_themes.theme_name": string;
    /** @description JSON object with keys like high_priority, medium_priority, low_priority, completed, overdue mapped to Google color IDs */
    "rowFilter.calendar_themes.color_mappings": string;
    "rowFilter.calendar_themes.is_default": string;
    "rowFilter.calendar_themes.created_at": string;
    "rowFilter.calendar_themes.updated_at": string;
    "rowFilter.user_calendar_preferences.id": string;
    "rowFilter.user_calendar_preferences.user_id": string;
    "rowFilter.user_calendar_preferences.work_start_time": string;
    "rowFilter.user_calendar_preferences.work_end_time": string;
    "rowFilter.user_calendar_preferences.working_days": string;
    "rowFilter.user_calendar_preferences.default_task_duration_minutes": string;
    "rowFilter.user_calendar_preferences.min_task_duration_minutes": string;
    "rowFilter.user_calendar_preferences.max_task_duration_minutes": string;
    "rowFilter.user_calendar_preferences.exclude_holidays": string;
    "rowFilter.user_calendar_preferences.holiday_country_code": string;
    "rowFilter.user_calendar_preferences.timezone": string;
    "rowFilter.user_calendar_preferences.prefer_morning_for_important_tasks": string;
    "rowFilter.user_calendar_preferences.created_at": string;
    "rowFilter.user_calendar_preferences.updated_at": string;
    "rowFilter.brain_dump_links.id": string;
    "rowFilter.brain_dump_links.created_at": string;
    "rowFilter.brain_dump_links.brain_dump_id": string;
    "rowFilter.brain_dump_links.project_id": string;
    "rowFilter.brain_dump_links.note_id": string;
    "rowFilter.brain_dump_links.task_id": string;
    "rowFilter.invoices.id": string;
    "rowFilter.invoices.user_id": string;
    "rowFilter.invoices.stripe_invoice_id": string;
    "rowFilter.invoices.stripe_customer_id": string;
    "rowFilter.invoices.subscription_id": string;
    "rowFilter.invoices.amount_paid": string;
    "rowFilter.invoices.amount_due": string;
    "rowFilter.invoices.currency": string;
    "rowFilter.invoices.status": string;
    "rowFilter.invoices.invoice_pdf": string;
    "rowFilter.invoices.hosted_invoice_url": string;
    "rowFilter.invoices.created_at": string;
    "rowFilter.visitors.id": string;
    "rowFilter.visitors.visitor_id": string;
    "rowFilter.visitors.ip_address": string;
    "rowFilter.visitors.user_agent": string;
    "rowFilter.visitors.created_at": string;
    "rowFilter.visitors.updated_at": string;
    "rowFilter.trial_reminders.id": string;
    "rowFilter.trial_reminders.user_id": string;
    "rowFilter.trial_reminders.reminder_type": string;
    "rowFilter.trial_reminders.sent_at": string;
    "rowFilter.trial_reminders.created_at": string;
    "rowFilter.generated_phases.id": string;
    "rowFilter.generated_phases.generation_id": string;
    "rowFilter.generated_phases.project_id": string;
    "rowFilter.generated_phases.name": string;
    "rowFilter.generated_phases.description": string;
    "rowFilter.generated_phases.objectives": string;
    "rowFilter.generated_phases.deliverables": string;
    "rowFilter.generated_phases.success_criteria": string;
    "rowFilter.generated_phases.suggested_duration_days": string;
    "rowFilter.generated_phases.suggested_start_date": string;
    "rowFilter.generated_phases.suggested_end_date": string;
    "rowFilter.generated_phases.suggested_order": string;
    "rowFilter.generated_phases.confidence_score": string;
    "rowFilter.generated_phases.is_approved": string;
    "rowFilter.generated_phases.approved_at": string;
    "rowFilter.generated_phases.approved_by": string;
    "rowFilter.generated_phases.phase_id": string;
    "rowFilter.generated_phases.metadata": string;
    "rowFilter.generated_phases.created_at": string;
    "rowFilter.question_templates.id": string;
    "rowFilter.question_templates.template": string;
    "rowFilter.question_templates.category": string;
    "rowFilter.question_templates.conditions": string;
    "rowFilter.question_templates.variables": string;
    "rowFilter.question_templates.effectiveness_score": string;
    "rowFilter.question_templates.usage_count": string;
    "rowFilter.question_templates.created_at": string;
    "rowFilter.question_templates.updated_at": string;
    "rowFilter.phases.id": string;
    "rowFilter.phases.project_id": string;
    "rowFilter.phases.user_id": string;
    "rowFilter.phases.name": string;
    "rowFilter.phases.description": string;
    "rowFilter.phases.start_date": string;
    "rowFilter.phases.end_date": string;
    "rowFilter.phases.order": string;
    "rowFilter.phases.created_at": string;
    "rowFilter.phases.updated_at": string;
    /** @description Method used for task scheduling: phases_only, schedule_in_phases, or calendar_optimized */
    "rowFilter.phases.scheduling_method": string;
    "rowFilter.beta_members.id": string;
    "rowFilter.beta_members.user_id": string;
    "rowFilter.beta_members.signup_id": string;
    "rowFilter.beta_members.full_name": string;
    "rowFilter.beta_members.email": string;
    "rowFilter.beta_members.job_title": string;
    "rowFilter.beta_members.company_name": string;
    "rowFilter.beta_members.joined_at": string;
    "rowFilter.beta_members.beta_tier": string;
    "rowFilter.beta_members.access_level": string;
    "rowFilter.beta_members.last_active_at": string;
    "rowFilter.beta_members.total_feedback_submitted": string;
    "rowFilter.beta_members.total_features_requested": string;
    "rowFilter.beta_members.total_calls_attended": string;
    "rowFilter.beta_members.has_lifetime_pricing": string;
    "rowFilter.beta_members.discount_percentage": string;
    "rowFilter.beta_members.early_access_features": string;
    "rowFilter.beta_members.wants_weekly_calls": string;
    "rowFilter.beta_members.wants_community_access": string;
    "rowFilter.beta_members.wants_feature_updates": string;
    "rowFilter.beta_members.user_timezone": string;
    "rowFilter.beta_members.is_active": string;
    "rowFilter.beta_members.deactivated_at": string;
    "rowFilter.beta_members.deactivation_reason": string;
    "rowFilter.beta_members.created_at": string;
    "rowFilter.beta_members.updated_at": string;
    "rowFilter.project_daily_briefs.id": string;
    "rowFilter.project_daily_briefs.user_id": string;
    "rowFilter.project_daily_briefs.project_id": string;
    "rowFilter.project_daily_briefs.template_id": string;
    "rowFilter.project_daily_briefs.brief_content": string;
    "rowFilter.project_daily_briefs.brief_date": string;
    "rowFilter.project_daily_briefs.metadata": string;
    "rowFilter.project_daily_briefs.created_at": string;
    "rowFilter.project_daily_briefs.updated_at": string;
    "rowFilter.project_daily_briefs.generation_status": string;
    "rowFilter.project_daily_briefs.generation_started_at": string;
    "rowFilter.project_daily_briefs.generation_completed_at": string;
    "rowFilter.project_daily_briefs.generation_error": string;
    "rowFilter.notes.id": string;
    "rowFilter.notes.user_id": string;
    "rowFilter.notes.title": string;
    "rowFilter.notes.content": string;
    "rowFilter.notes.project_id": string;
    "rowFilter.notes.created_at": string;
    "rowFilter.notes.tags": string;
    "rowFilter.notes.updated_at": string;
    "rowFilter.notes.category": string;
    "rowFilter.project_phases_generation.id": string;
    "rowFilter.project_phases_generation.project_id": string;
    "rowFilter.project_phases_generation.user_id": string;
    "rowFilter.project_phases_generation.generation_status": string;
    "rowFilter.project_phases_generation.generation_started_at": string;
    "rowFilter.project_phases_generation.generation_completed_at": string;
    "rowFilter.project_phases_generation.generation_error": string;
    "rowFilter.project_phases_generation.generation_progress": string;
    "rowFilter.project_phases_generation.regenerated": string;
    "rowFilter.project_phases_generation.template_used": string;
    /** @description JSON array containing all generated phases data */
    "rowFilter.project_phases_generation.phases_data": string;
    "rowFilter.project_phases_generation.phases_count": string;
    "rowFilter.project_phases_generation.total_duration_days": string;
    "rowFilter.project_phases_generation.metadata": string;
    "rowFilter.project_phases_generation.created_at": string;
    "rowFilter.project_phases_generation.updated_at": string;
    "rowFilter.phase_task_schedules.id": string;
    "rowFilter.phase_task_schedules.phase_id": string;
    "rowFilter.phase_task_schedules.task_id": string;
    "rowFilter.phase_task_schedules.proposed_start": string;
    "rowFilter.phase_task_schedules.proposed_end": string;
    "rowFilter.phase_task_schedules.is_confirmed": string;
    "rowFilter.phase_task_schedules.scheduling_notes": string;
    "rowFilter.phase_task_schedules.conflict_warnings": string;
    "rowFilter.phase_task_schedules.created_at": string;
    "rowFilter.phase_task_schedules.updated_at": string;
    "rowFilter.recurring_task_summary.task_id": string;
    "rowFilter.recurring_task_summary.title": string;
    "rowFilter.recurring_task_summary.recurrence_pattern": string;
    "rowFilter.recurring_task_summary.recurrence_ends": string;
    "rowFilter.recurring_task_summary.start_date": string;
    "rowFilter.recurring_task_summary.user_id": string;
    "rowFilter.recurring_task_summary.total_instances": string;
    "rowFilter.recurring_task_summary.completed_instances": string;
    "rowFilter.recurring_task_summary.skipped_instances": string;
    "rowFilter.recurring_task_summary.exception_count": string;
    "rowFilter.recurring_task_summary.next_occurrence": string;
    "rowFilter.recurring_task_summary.last_completed_at": string;
    "rowFilter.email_attachments.id": string;
    "rowFilter.email_attachments.email_id": string;
    "rowFilter.email_attachments.filename": string;
    "rowFilter.email_attachments.original_filename": string;
    "rowFilter.email_attachments.file_size": string;
    "rowFilter.email_attachments.content_type": string;
    "rowFilter.email_attachments.storage_path": string;
    "rowFilter.email_attachments.storage_bucket": string;
    "rowFilter.email_attachments.is_image": string;
    "rowFilter.email_attachments.image_width": string;
    "rowFilter.email_attachments.image_height": string;
    "rowFilter.email_attachments.optimized_versions": string;
    "rowFilter.email_attachments.created_by": string;
    "rowFilter.email_attachments.created_at": string;
    "rowFilter.email_attachments.is_inline": string;
    "rowFilter.email_attachments.cid": string;
    "rowFilter.emails.id": string;
    "rowFilter.emails.subject": string;
    "rowFilter.emails.content": string;
    "rowFilter.emails.from_email": string;
    "rowFilter.emails.from_name": string;
    "rowFilter.emails.status": string;
    "rowFilter.emails.scheduled_at": string;
    "rowFilter.emails.sent_at": string;
    "rowFilter.emails.tracking_enabled": string;
    "rowFilter.emails.tracking_id": string;
    "rowFilter.emails.created_by": string;
    "rowFilter.emails.created_at": string;
    "rowFilter.emails.updated_at": string;
    "rowFilter.emails.category": string;
    "rowFilter.emails.template_data": string;
    "rowFilter.beta_feature_votes.id": string;
    "rowFilter.beta_feature_votes.feedback_id": string;
    "rowFilter.beta_feature_votes.member_id": string;
    "rowFilter.beta_feature_votes.vote_type": string;
    "rowFilter.beta_feature_votes.created_at": string;
    "rowFilter.email_tracking_events.id": string;
    "rowFilter.email_tracking_events.email_id": string;
    "rowFilter.email_tracking_events.recipient_id": string;
    "rowFilter.email_tracking_events.event_type": string;
    "rowFilter.email_tracking_events.event_data": string;
    "rowFilter.email_tracking_events.user_agent": string;
    "rowFilter.email_tracking_events.ip_address": string;
    "rowFilter.email_tracking_events.timestamp": string;
    "rowFilter.email_tracking_events.clicked_url": string;
    "rowFilter.email_tracking_events.created_at": string;
    "rowFilter.project_synthesis.id": string;
    "rowFilter.project_synthesis.user_id": string;
    "rowFilter.project_synthesis.project_id": string;
    /** @description JSON structure: {
     *       "consolidatedTasks": [...],
     *       "suggestedTasks": [...],
     *       "duplicatesFound": [...],
     *       "nextSteps": [...],
     *       "outdatedTaskIds": [...]
     *     } */
    "rowFilter.project_synthesis.synthesis_content": string;
    "rowFilter.project_synthesis.insights": string;
    "rowFilter.project_synthesis.generation_model": string;
    "rowFilter.project_synthesis.generation_duration_ms": string;
    "rowFilter.project_synthesis.created_at": string;
    "rowFilter.project_synthesis.updated_at": string;
    "rowFilter.project_synthesis.operations_count": string;
    "rowFilter.project_synthesis.status": string;
    "rowFilter.project_synthesis.applied_at": string;
    "rowFilter.users.id": string;
    "rowFilter.users.email": string;
    "rowFilter.users.name": string;
    "rowFilter.users.created_at": string;
    "rowFilter.users.bio": string;
    /** @description Whether the user has admin privileges */
    "rowFilter.users.is_admin": string;
    "rowFilter.users.completed_onboarding": string;
    "rowFilter.users.updated_at": string;
    "rowFilter.users.last_visit": string;
    "rowFilter.users.stripe_customer_id": string;
    "rowFilter.users.subscription_status": string;
    "rowFilter.users.subscription_plan_id": string;
    "rowFilter.users.trial_ends_at": string;
    "rowFilter.users.access_restricted": string;
    "rowFilter.users.access_restricted_at": string;
    /** @description Indicates if the user is part of the beta program */
    "rowFilter.users.is_beta_user": string;
    "rowFilter.api_keys.id": string;
    "rowFilter.api_keys.user_id": string;
    "rowFilter.api_keys.service_name": string;
    "rowFilter.api_keys.api_key": string;
    "rowFilter.api_keys.created_at": string;
    "rowFilter.sms_templates.id": string;
    "rowFilter.sms_templates.template_key": string;
    "rowFilter.sms_templates.name": string;
    "rowFilter.sms_templates.description": string;
    "rowFilter.sms_templates.message_template": string;
    "rowFilter.sms_templates.template_vars": string;
    "rowFilter.sms_templates.required_vars": string;
    "rowFilter.sms_templates.max_length": string;
    "rowFilter.sms_templates.is_active": string;
    "rowFilter.sms_templates.usage_count": string;
    "rowFilter.sms_templates.last_used_at": string;
    "rowFilter.sms_templates.created_by": string;
    "rowFilter.sms_templates.created_at": string;
    "rowFilter.sms_templates.updated_at": string;
    "rowFilter.error_summary.error_type": string;
    "rowFilter.error_summary.severity": string;
    "rowFilter.error_summary.error_count": string;
    "rowFilter.error_summary.affected_users": string;
    "rowFilter.error_summary.affected_projects": string;
    "rowFilter.error_summary.first_occurrence": string;
    "rowFilter.error_summary.last_occurrence": string;
    "rowFilter.error_summary.resolved_count": string;
    "rowFilter.error_summary.avg_response_time_ms": string;
    "rowFilter.customer_subscriptions.id": string;
    "rowFilter.customer_subscriptions.user_id": string;
    "rowFilter.customer_subscriptions.stripe_customer_id": string;
    "rowFilter.customer_subscriptions.stripe_subscription_id": string;
    "rowFilter.customer_subscriptions.stripe_price_id": string;
    "rowFilter.customer_subscriptions.plan_id": string;
    "rowFilter.customer_subscriptions.status": string;
    "rowFilter.customer_subscriptions.current_period_start": string;
    "rowFilter.customer_subscriptions.current_period_end": string;
    "rowFilter.customer_subscriptions.cancel_at": string;
    "rowFilter.customer_subscriptions.canceled_at": string;
    "rowFilter.customer_subscriptions.trial_start": string;
    "rowFilter.customer_subscriptions.trial_end": string;
    "rowFilter.customer_subscriptions.metadata": string;
    "rowFilter.customer_subscriptions.created_at": string;
    "rowFilter.customer_subscriptions.updated_at": string;
    "rowFilter.customer_subscriptions.cancellation_reason": string;
    "rowFilter.user_activity_logs.id": string;
    "rowFilter.user_activity_logs.user_id": string;
    "rowFilter.user_activity_logs.activity_type": string;
    "rowFilter.user_activity_logs.activity_data": string;
    "rowFilter.user_activity_logs.ip_address": string;
    "rowFilter.user_activity_logs.user_agent": string;
    "rowFilter.user_activity_logs.created_at": string;
    "rowFilter.project_kept_versions.history_id": string;
    "rowFilter.project_kept_versions.project_id": string;
    "rowFilter.project_kept_versions.version_number": string;
    "rowFilter.project_kept_versions.is_first_version": string;
    "rowFilter.project_kept_versions.project_data": string;
    "rowFilter.project_kept_versions.created_at": string;
    "rowFilter.project_kept_versions.created_by": string;
    "rowFilter.project_kept_versions.current_name": string;
    "rowFilter.project_kept_versions.version_name": string;
    "rowFilter.project_kept_versions.version_status": string;
    "rowFilter.project_kept_versions.version_type": string;
    "rowFilter.error_logs.id": string;
    "rowFilter.error_logs.error_type": string;
    "rowFilter.error_logs.error_code": string;
    "rowFilter.error_logs.error_message": string;
    "rowFilter.error_logs.error_stack": string;
    "rowFilter.error_logs.severity": string;
    "rowFilter.error_logs.user_id": string;
    "rowFilter.error_logs.project_id": string;
    "rowFilter.error_logs.brain_dump_id": string;
    "rowFilter.error_logs.endpoint": string;
    "rowFilter.error_logs.http_method": string;
    "rowFilter.error_logs.request_id": string;
    "rowFilter.error_logs.user_agent": string;
    "rowFilter.error_logs.ip_address": string;
    "rowFilter.error_logs.llm_provider": string;
    "rowFilter.error_logs.llm_model": string;
    "rowFilter.error_logs.prompt_tokens": string;
    "rowFilter.error_logs.completion_tokens": string;
    "rowFilter.error_logs.total_tokens": string;
    "rowFilter.error_logs.response_time_ms": string;
    "rowFilter.error_logs.llm_temperature": string;
    "rowFilter.error_logs.llm_max_tokens": string;
    "rowFilter.error_logs.operation_type": string;
    "rowFilter.error_logs.table_name": string;
    "rowFilter.error_logs.record_id": string;
    "rowFilter.error_logs.operation_payload": string;
    "rowFilter.error_logs.metadata": string;
    "rowFilter.error_logs.environment": string;
    "rowFilter.error_logs.app_version": string;
    "rowFilter.error_logs.browser_info": string;
    "rowFilter.error_logs.resolved": string;
    "rowFilter.error_logs.resolved_at": string;
    "rowFilter.error_logs.resolved_by": string;
    "rowFilter.error_logs.resolution_notes": string;
    "rowFilter.error_logs.created_at": string;
    "rowFilter.error_logs.updated_at": string;
    "rowFilter.user_notifications.id": string;
    "rowFilter.user_notifications.user_id": string;
    "rowFilter.user_notifications.type": string;
    "rowFilter.user_notifications.title": string;
    "rowFilter.user_notifications.message": string;
    "rowFilter.user_notifications.priority": string;
    "rowFilter.user_notifications.action_url": string;
    "rowFilter.user_notifications.read_at": string;
    "rowFilter.user_notifications.dismissed_at": string;
    "rowFilter.user_notifications.expires_at": string;
    "rowFilter.user_notifications.created_at": string;
    "rowFilter.system_metrics.id": string;
    "rowFilter.system_metrics.metric_name": string;
    "rowFilter.system_metrics.metric_value": string;
    "rowFilter.system_metrics.metric_unit": string;
    "rowFilter.system_metrics.metric_description": string;
    "rowFilter.system_metrics.recorded_at": string;
    "rowFilter.phase_tasks.id": string;
    "rowFilter.phase_tasks.phase_id": string;
    "rowFilter.phase_tasks.task_id": string;
    "rowFilter.phase_tasks.suggested_start_date": string;
    "rowFilter.phase_tasks.assignment_reason": string;
    "rowFilter.phase_tasks.created_at": string;
    "rowFilter.projects_history.history_id": string;
    "rowFilter.projects_history.project_id": string;
    "rowFilter.projects_history.version_number": string;
    "rowFilter.projects_history.is_first_version": string;
    "rowFilter.projects_history.project_data": string;
    "rowFilter.projects_history.created_at": string;
    "rowFilter.projects_history.created_by": string;
    "rowFilter.user_calendar_tokens.id": string;
    "rowFilter.user_calendar_tokens.user_id": string;
    "rowFilter.user_calendar_tokens.access_token": string;
    "rowFilter.user_calendar_tokens.refresh_token": string;
    "rowFilter.user_calendar_tokens.expiry_date": string;
    "rowFilter.user_calendar_tokens.token_type": string;
    "rowFilter.user_calendar_tokens.scope": string;
    "rowFilter.user_calendar_tokens.created_at": string;
    "rowFilter.user_calendar_tokens.updated_at": string;
    "rowFilter.user_calendar_tokens.google_email": string;
    "rowFilter.user_calendar_tokens.google_user_id": string;
  };
  requestBodies: {
    /** @description project_synthesis */
    project_synthesis: {
      content: {
        "application/json": components["schemas"]["project_synthesis"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["project_synthesis"];
        "application/vnd.pgrst.object+json": components["schemas"]["project_synthesis"];
        "text/csv": components["schemas"]["project_synthesis"];
      };
    };
    /** @description notes */
    notes: {
      content: {
        "application/json": components["schemas"]["notes"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["notes"];
        "application/vnd.pgrst.object+json": components["schemas"]["notes"];
        "text/csv": components["schemas"]["notes"];
      };
    };
    /** @description beta_event_attendance */
    beta_event_attendance: {
      content: {
        "application/json": components["schemas"]["beta_event_attendance"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["beta_event_attendance"];
        "application/vnd.pgrst.object+json": components["schemas"]["beta_event_attendance"];
        "text/csv": components["schemas"]["beta_event_attendance"];
      };
    };
    /** @description project_questions */
    project_questions: {
      content: {
        "application/json": components["schemas"]["project_questions"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["project_questions"];
        "application/vnd.pgrst.object+json": components["schemas"]["project_questions"];
        "text/csv": components["schemas"]["project_questions"];
      };
    };
    /** @description recurring_task_migration_log */
    recurring_task_migration_log: {
      content: {
        "application/json": components["schemas"]["recurring_task_migration_log"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["recurring_task_migration_log"];
        "application/vnd.pgrst.object+json": components["schemas"]["recurring_task_migration_log"];
        "text/csv": components["schemas"]["recurring_task_migration_log"];
      };
    };
    /** @description failed_payments */
    failed_payments: {
      content: {
        "application/json": components["schemas"]["failed_payments"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["failed_payments"];
        "application/vnd.pgrst.object+json": components["schemas"]["failed_payments"];
        "text/csv": components["schemas"]["failed_payments"];
      };
    };
    /** @description cron_logs */
    cron_logs: {
      content: {
        "application/json": components["schemas"]["cron_logs"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["cron_logs"];
        "application/vnd.pgrst.object+json": components["schemas"]["cron_logs"];
        "text/csv": components["schemas"]["cron_logs"];
      };
    };
    /** @description user_discounts */
    user_discounts: {
      content: {
        "application/json": components["schemas"]["user_discounts"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["user_discounts"];
        "application/vnd.pgrst.object+json": components["schemas"]["user_discounts"];
        "text/csv": components["schemas"]["user_discounts"];
      };
    };
    /** @description discount_codes */
    discount_codes: {
      content: {
        "application/json": components["schemas"]["discount_codes"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["discount_codes"];
        "application/vnd.pgrst.object+json": components["schemas"]["discount_codes"];
        "text/csv": components["schemas"]["discount_codes"];
      };
    };
    /** @description project_daily_briefs */
    project_daily_briefs: {
      content: {
        "application/json": components["schemas"]["project_daily_briefs"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["project_daily_briefs"];
        "application/vnd.pgrst.object+json": components["schemas"]["project_daily_briefs"];
        "text/csv": components["schemas"]["project_daily_briefs"];
      };
    };
    /** @description phases */
    phases: {
      content: {
        "application/json": components["schemas"]["phases"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["phases"];
        "application/vnd.pgrst.object+json": components["schemas"]["phases"];
        "text/csv": components["schemas"]["phases"];
      };
    };
    /** @description phase_task_schedules */
    phase_task_schedules: {
      content: {
        "application/json": components["schemas"]["phase_task_schedules"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["phase_task_schedules"];
        "application/vnd.pgrst.object+json": components["schemas"]["phase_task_schedules"];
        "text/csv": components["schemas"]["phase_task_schedules"];
      };
    };
    /** @description email_tracking_events */
    email_tracking_events: {
      content: {
        "application/json": components["schemas"]["email_tracking_events"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["email_tracking_events"];
        "application/vnd.pgrst.object+json": components["schemas"]["email_tracking_events"];
        "text/csv": components["schemas"]["email_tracking_events"];
      };
    };
    /** @description visitors */
    visitors: {
      content: {
        "application/json": components["schemas"]["visitors"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["visitors"];
        "application/vnd.pgrst.object+json": components["schemas"]["visitors"];
        "text/csv": components["schemas"]["visitors"];
      };
    };
    /** @description email_recipients */
    email_recipients: {
      content: {
        "application/json": components["schemas"]["email_recipients"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["email_recipients"];
        "application/vnd.pgrst.object+json": components["schemas"]["email_recipients"];
        "text/csv": components["schemas"]["email_recipients"];
      };
    };
    /** @description beta_feedback */
    beta_feedback: {
      content: {
        "application/json": components["schemas"]["beta_feedback"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["beta_feedback"];
        "application/vnd.pgrst.object+json": components["schemas"]["beta_feedback"];
        "text/csv": components["schemas"]["beta_feedback"];
      };
    };
    /** @description generated_phases */
    generated_phases: {
      content: {
        "application/json": components["schemas"]["generated_phases"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["generated_phases"];
        "application/vnd.pgrst.object+json": components["schemas"]["generated_phases"];
        "text/csv": components["schemas"]["generated_phases"];
      };
    };
    /** @description brain_dumps */
    brain_dumps: {
      content: {
        "application/json": components["schemas"]["brain_dumps"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["brain_dumps"];
        "application/vnd.pgrst.object+json": components["schemas"]["brain_dumps"];
        "text/csv": components["schemas"]["brain_dumps"];
      };
    };
    /** @description tasks */
    tasks: {
      content: {
        "application/json": components["schemas"]["tasks"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["tasks"];
        "application/vnd.pgrst.object+json": components["schemas"]["tasks"];
        "text/csv": components["schemas"]["tasks"];
      };
    };
    /** @description beta_members */
    beta_members: {
      content: {
        "application/json": components["schemas"]["beta_members"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["beta_members"];
        "application/vnd.pgrst.object+json": components["schemas"]["beta_members"];
        "text/csv": components["schemas"]["beta_members"];
      };
    };
    /** @description daily_briefs */
    daily_briefs: {
      content: {
        "application/json": components["schemas"]["daily_briefs"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["daily_briefs"];
        "application/vnd.pgrst.object+json": components["schemas"]["daily_briefs"];
        "text/csv": components["schemas"]["daily_briefs"];
      };
    };
    /** @description feedback_rate_limit */
    feedback_rate_limit: {
      content: {
        "application/json": components["schemas"]["feedback_rate_limit"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["feedback_rate_limit"];
        "application/vnd.pgrst.object+json": components["schemas"]["feedback_rate_limit"];
        "text/csv": components["schemas"]["feedback_rate_limit"];
      };
    };
    /** @description projects */
    projects: {
      content: {
        "application/json": components["schemas"]["projects"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["projects"];
        "application/vnd.pgrst.object+json": components["schemas"]["projects"];
        "text/csv": components["schemas"]["projects"];
      };
    };
    /** @description email_logs */
    email_logs: {
      content: {
        "application/json": components["schemas"]["email_logs"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["email_logs"];
        "application/vnd.pgrst.object+json": components["schemas"]["email_logs"];
        "text/csv": components["schemas"]["email_logs"];
      };
    };
    /** @description phase_tasks */
    phase_tasks: {
      content: {
        "application/json": components["schemas"]["phase_tasks"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["phase_tasks"];
        "application/vnd.pgrst.object+json": components["schemas"]["phase_tasks"];
        "text/csv": components["schemas"]["phase_tasks"];
      };
    };
    /** @description user_activity_logs */
    user_activity_logs: {
      content: {
        "application/json": components["schemas"]["user_activity_logs"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["user_activity_logs"];
        "application/vnd.pgrst.object+json": components["schemas"]["user_activity_logs"];
        "text/csv": components["schemas"]["user_activity_logs"];
      };
    };
    /** @description admin_analytics */
    admin_analytics: {
      content: {
        "application/json": components["schemas"]["admin_analytics"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["admin_analytics"];
        "application/vnd.pgrst.object+json": components["schemas"]["admin_analytics"];
        "text/csv": components["schemas"]["admin_analytics"];
      };
    };
    /** @description users */
    users: {
      content: {
        "application/json": components["schemas"]["users"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["users"];
        "application/vnd.pgrst.object+json": components["schemas"]["users"];
        "text/csv": components["schemas"]["users"];
      };
    };
    /** @description subscription_plans */
    subscription_plans: {
      content: {
        "application/json": components["schemas"]["subscription_plans"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["subscription_plans"];
        "application/vnd.pgrst.object+json": components["schemas"]["subscription_plans"];
        "text/csv": components["schemas"]["subscription_plans"];
      };
    };
    /** @description feedback */
    feedback: {
      content: {
        "application/json": components["schemas"]["feedback"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["feedback"];
        "application/vnd.pgrst.object+json": components["schemas"]["feedback"];
        "text/csv": components["schemas"]["feedback"];
      };
    };
    /** @description project_brief_templates */
    project_brief_templates: {
      content: {
        "application/json": components["schemas"]["project_brief_templates"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["project_brief_templates"];
        "application/vnd.pgrst.object+json": components["schemas"]["project_brief_templates"];
        "text/csv": components["schemas"]["project_brief_templates"];
      };
    };
    /** @description beta_events */
    beta_events: {
      content: {
        "application/json": components["schemas"]["beta_events"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["beta_events"];
        "application/vnd.pgrst.object+json": components["schemas"]["beta_events"];
        "text/csv": components["schemas"]["beta_events"];
      };
    };
    /** @description calendar_themes */
    calendar_themes: {
      content: {
        "application/json": components["schemas"]["calendar_themes"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["calendar_themes"];
        "application/vnd.pgrst.object+json": components["schemas"]["calendar_themes"];
        "text/csv": components["schemas"]["calendar_themes"];
      };
    };
    /** @description projects_history */
    projects_history: {
      content: {
        "application/json": components["schemas"]["projects_history"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["projects_history"];
        "application/vnd.pgrst.object+json": components["schemas"]["projects_history"];
        "text/csv": components["schemas"]["projects_history"];
      };
    };
    /** @description trial_reminders */
    trial_reminders: {
      content: {
        "application/json": components["schemas"]["trial_reminders"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["trial_reminders"];
        "application/vnd.pgrst.object+json": components["schemas"]["trial_reminders"];
        "text/csv": components["schemas"]["trial_reminders"];
      };
    };
    /** @description beta_feature_votes */
    beta_feature_votes: {
      content: {
        "application/json": components["schemas"]["beta_feature_votes"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["beta_feature_votes"];
        "application/vnd.pgrst.object+json": components["schemas"]["beta_feature_votes"];
        "text/csv": components["schemas"]["beta_feature_votes"];
      };
    };
    /** @description user_sms_preferences */
    user_sms_preferences: {
      content: {
        "application/json": components["schemas"]["user_sms_preferences"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["user_sms_preferences"];
        "application/vnd.pgrst.object+json": components["schemas"]["user_sms_preferences"];
        "text/csv": components["schemas"]["user_sms_preferences"];
      };
    };
    /** @description queue_jobs */
    queue_jobs: {
      content: {
        "application/json": components["schemas"]["queue_jobs"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["queue_jobs"];
        "application/vnd.pgrst.object+json": components["schemas"]["queue_jobs"];
        "text/csv": components["schemas"]["queue_jobs"];
      };
    };
    /** @description question_metrics */
    question_metrics: {
      content: {
        "application/json": components["schemas"]["question_metrics"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["question_metrics"];
        "application/vnd.pgrst.object+json": components["schemas"]["question_metrics"];
        "text/csv": components["schemas"]["question_metrics"];
      };
    };
    /** @description recurring_task_instances */
    recurring_task_instances: {
      content: {
        "application/json": components["schemas"]["recurring_task_instances"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["recurring_task_instances"];
        "application/vnd.pgrst.object+json": components["schemas"]["recurring_task_instances"];
        "text/csv": components["schemas"]["recurring_task_instances"];
      };
    };
    /** @description sms_messages */
    sms_messages: {
      content: {
        "application/json": components["schemas"]["sms_messages"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["sms_messages"];
        "application/vnd.pgrst.object+json": components["schemas"]["sms_messages"];
        "text/csv": components["schemas"]["sms_messages"];
      };
    };
    /** @description generated_phase_tasks */
    generated_phase_tasks: {
      content: {
        "application/json": components["schemas"]["generated_phase_tasks"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["generated_phase_tasks"];
        "application/vnd.pgrst.object+json": components["schemas"]["generated_phase_tasks"];
        "text/csv": components["schemas"]["generated_phase_tasks"];
      };
    };
    /** @description project_brief_template_usage */
    project_brief_template_usage: {
      content: {
        "application/json": components["schemas"]["project_brief_template_usage"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["project_brief_template_usage"];
        "application/vnd.pgrst.object+json": components["schemas"]["project_brief_template_usage"];
        "text/csv": components["schemas"]["project_brief_template_usage"];
      };
    };
    /** @description project_calendars */
    project_calendars: {
      content: {
        "application/json": components["schemas"]["project_calendars"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["project_calendars"];
        "application/vnd.pgrst.object+json": components["schemas"]["project_calendars"];
        "text/csv": components["schemas"]["project_calendars"];
      };
    };
    /** @description llm_prompts */
    llm_prompts: {
      content: {
        "application/json": components["schemas"]["llm_prompts"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["llm_prompts"];
        "application/vnd.pgrst.object+json": components["schemas"]["llm_prompts"];
        "text/csv": components["schemas"]["llm_prompts"];
      };
    };
    /** @description calendar_webhook_channels */
    calendar_webhook_channels: {
      content: {
        "application/json": components["schemas"]["calendar_webhook_channels"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["calendar_webhook_channels"];
        "application/vnd.pgrst.object+json": components["schemas"]["calendar_webhook_channels"];
        "text/csv": components["schemas"]["calendar_webhook_channels"];
      };
    };
    /** @description payment_methods */
    payment_methods: {
      content: {
        "application/json": components["schemas"]["payment_methods"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["payment_methods"];
        "application/vnd.pgrst.object+json": components["schemas"]["payment_methods"];
        "text/csv": components["schemas"]["payment_methods"];
      };
    };
    /** @description user_brief_preferences */
    user_brief_preferences: {
      content: {
        "application/json": components["schemas"]["user_brief_preferences"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["user_brief_preferences"];
        "application/vnd.pgrst.object+json": components["schemas"]["user_brief_preferences"];
        "text/csv": components["schemas"]["user_brief_preferences"];
      };
    };
    /** @description webhook_events */
    webhook_events: {
      content: {
        "application/json": components["schemas"]["webhook_events"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["webhook_events"];
        "application/vnd.pgrst.object+json": components["schemas"]["webhook_events"];
        "text/csv": components["schemas"]["webhook_events"];
      };
    };
    /** @description beta_signups */
    beta_signups: {
      content: {
        "application/json": components["schemas"]["beta_signups"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["beta_signups"];
        "application/vnd.pgrst.object+json": components["schemas"]["beta_signups"];
        "text/csv": components["schemas"]["beta_signups"];
      };
    };
    /** @description task_calendar_events */
    task_calendar_events: {
      content: {
        "application/json": components["schemas"]["task_calendar_events"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["task_calendar_events"];
        "application/vnd.pgrst.object+json": components["schemas"]["task_calendar_events"];
        "text/csv": components["schemas"]["task_calendar_events"];
      };
    };
    /** @description user_context */
    user_context: {
      content: {
        "application/json": components["schemas"]["user_context"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["user_context"];
        "application/vnd.pgrst.object+json": components["schemas"]["user_context"];
        "text/csv": components["schemas"]["user_context"];
      };
    };
    /** @description admin_users */
    admin_users: {
      content: {
        "application/json": components["schemas"]["admin_users"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["admin_users"];
        "application/vnd.pgrst.object+json": components["schemas"]["admin_users"];
        "text/csv": components["schemas"]["admin_users"];
      };
    };
    /** @description user_calendar_preferences */
    user_calendar_preferences: {
      content: {
        "application/json": components["schemas"]["user_calendar_preferences"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["user_calendar_preferences"];
        "application/vnd.pgrst.object+json": components["schemas"]["user_calendar_preferences"];
        "text/csv": components["schemas"]["user_calendar_preferences"];
      };
    };
    /** @description brain_dump_links */
    brain_dump_links: {
      content: {
        "application/json": components["schemas"]["brain_dump_links"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["brain_dump_links"];
        "application/vnd.pgrst.object+json": components["schemas"]["brain_dump_links"];
        "text/csv": components["schemas"]["brain_dump_links"];
      };
    };
    /** @description invoices */
    invoices: {
      content: {
        "application/json": components["schemas"]["invoices"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["invoices"];
        "application/vnd.pgrst.object+json": components["schemas"]["invoices"];
        "text/csv": components["schemas"]["invoices"];
      };
    };
    /** @description question_templates */
    question_templates: {
      content: {
        "application/json": components["schemas"]["question_templates"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["question_templates"];
        "application/vnd.pgrst.object+json": components["schemas"]["question_templates"];
        "text/csv": components["schemas"]["question_templates"];
      };
    };
    /** @description project_phases_generation */
    project_phases_generation: {
      content: {
        "application/json": components["schemas"]["project_phases_generation"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["project_phases_generation"];
        "application/vnd.pgrst.object+json": components["schemas"]["project_phases_generation"];
        "text/csv": components["schemas"]["project_phases_generation"];
      };
    };
    /** @description email_attachments */
    email_attachments: {
      content: {
        "application/json": components["schemas"]["email_attachments"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["email_attachments"];
        "application/vnd.pgrst.object+json": components["schemas"]["email_attachments"];
        "text/csv": components["schemas"]["email_attachments"];
      };
    };
    /** @description emails */
    emails: {
      content: {
        "application/json": components["schemas"]["emails"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["emails"];
        "application/vnd.pgrst.object+json": components["schemas"]["emails"];
        "text/csv": components["schemas"]["emails"];
      };
    };
    /** @description api_keys */
    api_keys: {
      content: {
        "application/json": components["schemas"]["api_keys"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["api_keys"];
        "application/vnd.pgrst.object+json": components["schemas"]["api_keys"];
        "text/csv": components["schemas"]["api_keys"];
      };
    };
    /** @description sms_templates */
    sms_templates: {
      content: {
        "application/json": components["schemas"]["sms_templates"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["sms_templates"];
        "application/vnd.pgrst.object+json": components["schemas"]["sms_templates"];
        "text/csv": components["schemas"]["sms_templates"];
      };
    };
    /** @description customer_subscriptions */
    customer_subscriptions: {
      content: {
        "application/json": components["schemas"]["customer_subscriptions"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["customer_subscriptions"];
        "application/vnd.pgrst.object+json": components["schemas"]["customer_subscriptions"];
        "text/csv": components["schemas"]["customer_subscriptions"];
      };
    };
    /** @description error_logs */
    error_logs: {
      content: {
        "application/json": components["schemas"]["error_logs"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["error_logs"];
        "application/vnd.pgrst.object+json": components["schemas"]["error_logs"];
        "text/csv": components["schemas"]["error_logs"];
      };
    };
    /** @description user_notifications */
    user_notifications: {
      content: {
        "application/json": components["schemas"]["user_notifications"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["user_notifications"];
        "application/vnd.pgrst.object+json": components["schemas"]["user_notifications"];
        "text/csv": components["schemas"]["user_notifications"];
      };
    };
    /** @description system_metrics */
    system_metrics: {
      content: {
        "application/json": components["schemas"]["system_metrics"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["system_metrics"];
        "application/vnd.pgrst.object+json": components["schemas"]["system_metrics"];
        "text/csv": components["schemas"]["system_metrics"];
      };
    };
    /** @description user_calendar_tokens */
    user_calendar_tokens: {
      content: {
        "application/json": components["schemas"]["user_calendar_tokens"];
        "application/vnd.pgrst.object+json;nulls=stripped": components["schemas"]["user_calendar_tokens"];
        "application/vnd.pgrst.object+json": components["schemas"]["user_calendar_tokens"];
        "text/csv": components["schemas"]["user_calendar_tokens"];
      };
    };
    Args: {
      content: {
        "application/json": Record<string, never>;
        "application/vnd.pgrst.object+json;nulls=stripped": Record<
          string,
          never
        >;
        "application/vnd.pgrst.object+json": Record<string, never>;
        "text/csv": Record<string, never>;
      };
    };
    Args2: {
      content: {
        "application/json": {
          /** Format: uuid */
          p_user_id: string;
        };
        "application/vnd.pgrst.object+json;nulls=stripped": {
          /** Format: uuid */
          p_user_id: string;
        };
        "application/vnd.pgrst.object+json": {
          /** Format: uuid */
          p_user_id: string;
        };
        "text/csv": {
          /** Format: uuid */
          p_user_id: string;
        };
      };
    };
    Args3: {
      content: {
        "application/json": {
          /** Format: text */
          "": string;
        };
        "application/vnd.pgrst.object+json;nulls=stripped": {
          /** Format: text */
          "": string;
        };
        "application/vnd.pgrst.object+json": {
          /** Format: text */
          "": string;
        };
        "text/csv": {
          /** Format: text */
          "": string;
        };
      };
    };
    Args4: {
      content: {
        "application/json": {
          /** Format: uuid */
          target_project_id: string;
        };
        "application/vnd.pgrst.object+json;nulls=stripped": {
          /** Format: uuid */
          target_project_id: string;
        };
        "application/vnd.pgrst.object+json": {
          /** Format: uuid */
          target_project_id: string;
        };
        "text/csv": {
          /** Format: uuid */
          target_project_id: string;
        };
      };
    };
    Args5: {
      content: {
        "application/json": {
          /** Format: uuid */
          user_uuid: string;
        };
        "application/vnd.pgrst.object+json;nulls=stripped": {
          /** Format: uuid */
          user_uuid: string;
        };
        "application/vnd.pgrst.object+json": {
          /** Format: uuid */
          user_uuid: string;
        };
        "text/csv": {
          /** Format: uuid */
          user_uuid: string;
        };
      };
    };
  };
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
