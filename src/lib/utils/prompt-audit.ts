// src/lib/utils/prompt-audit.ts
import { writeFile, mkdir } from 'fs/promises';
import { join } from 'path';
import { existsSync } from 'fs';

/**
 * Save prompts to markdown files for auditing in development mode
 * This helps debug and audit the actual prompts being sent to the LLM
 */
export async function savePromptForAudit({
	systemPrompt,
	userPrompt,
	scenarioType,
	metadata = {}
}: {
	systemPrompt: string;
	userPrompt: string;
	scenarioType: string;
	metadata?: Record<string, any>;
}): Promise<void> {
	// Only save in development mode
	if (process.env.NODE_ENV === 'production') {
		return;
	}

	try {
		// Map scenario types to file paths
		const scenarioMap: Record<string, string> = {
			// New project scenarios
			'new-project-singular': 'new-project/singular/new-project-singular-prompt.md',

			// New project dual processing
			'new-project-dual-context':
				'new-project/dual-processing/context/new-project-context-prompt.md',
			'new-project-dual-tasks':
				'new-project/dual-processing/tasks/new-project-task-extraction-prompt.md',

			// Existing project dual processing
			'existing-project-dual-context':
				'existing-project/dual-processing/context/existing-project-context-prompt.md',
			'existing-project-dual-tasks':
				'existing-project/dual-processing/tasks/existing-project-task-extraction-prompt.md',
			'existing-project-dual-tasks-with-questions':
				'existing-project/dual-processing/tasks/existing-project-task-extraction-with-questions-prompt.md',

			// Existing project short braindump (conditional dual processing)
			'short-braindump-task-extraction':
				'existing-project/short-braindump/tasks/short-braindump-task-extraction-prompt.md',
			'short-braindump-task-extraction-with-questions':
				'existing-project/short-braindump/tasks/short-braindump-task-extraction-with-questions-prompt.md',
			'short-braindump-context-update':
				'existing-project/short-braindump/context/short-braindump-context-update-prompt.md',

			// Legacy mappings (kept for backwards compatibility)
			'new-project-long': 'new-project/singular/new-project-singular-prompt.md',
			'new-project-short': 'new-project/singular/new-project-singular-prompt.md',
			'existing-project-long':
				'existing-project/dual-processing/context/existing-project-context-prompt.md',
			'existing-project-short':
				'existing-project/short-braindump/tasks/short-braindump-task-extraction-prompt.md',
			'existing-project-context-update':
				'existing-project/short-braindump/context/short-braindump-context-update-prompt.md',
			'dual-processing-context':
				'existing-project/dual-processing/context/existing-project-context-prompt.md',
			'dual-processing-tasks':
				'existing-project/dual-processing/tasks/existing-project-task-extraction-prompt.md',
			'dual-processing-tasks-with-questions':
				'existing-project/dual-processing/tasks/existing-project-task-extraction-with-questions-prompt.md',

			// Task synthesis
			'task-synthesis': 'task-synthesis/task-synthesis-reorganization-prompt.md'
		};

		const filePath = scenarioMap[scenarioType];
		if (!filePath) {
			console.warn(`Unknown scenario type for prompt audit: ${scenarioType}`);
			return;
		}

		const fullPath = join(process.cwd(), 'docs', 'prompts', filePath);
		const pathParts = filePath.split('/');
		pathParts.pop(); // Remove the filename
		const dirPath = join(process.cwd(), 'docs', 'prompts', ...pathParts);

		// Create directory if it doesn't exist
		if (!existsSync(dirPath)) {
			await mkdir(dirPath, { recursive: true });
		}

		// Format the content
		const timestamp = new Date().toISOString();
		const content = `# Prompt Audit: ${scenarioType}

**Generated at:** ${timestamp}
**Environment:** Development
${Object.keys(metadata).length > 0 ? `\n## Metadata\n\n\`\`\`json\n${JSON.stringify(metadata, null, 2)}\n\`\`\`\n` : ''}

## System Prompt

\`\`\`
${systemPrompt}
\`\`\`

## User Prompt

\`\`\`
${userPrompt}
\`\`\`

## Token Estimates

- **System Prompt:** ~${Math.round(systemPrompt.length / 4)} tokens
- **User Prompt:** ~${Math.round(userPrompt.length / 4)} tokens
- **Total Estimate:** ~${Math.round((systemPrompt.length + userPrompt.length) / 4)} tokens

---
*This file is automatically generated in development mode for prompt auditing purposes.*
`;

		// Write the file (overwrite if exists)
		await writeFile(fullPath, content, 'utf-8');
		console.log(`âœ… Prompt audit saved: ${filePath}`);
	} catch (error) {
		// Don't throw errors in audit logging - it's a non-critical feature
		console.error('Failed to save prompt audit:', error);
	}
}

/**
 * Determine the scenario type based on the context
 */
export function determineScenarioType({
	isNewProject,
	brainDumpLength,
	isDualProcessing,
	processingType,
	isShortBrainDump,
	hasQuestions
}: {
	isNewProject: boolean;
	brainDumpLength: number;
	isDualProcessing?: boolean;
	processingType?: 'context' | 'tasks' | 'context-update';
	isShortBrainDump?: boolean;
	hasQuestions?: boolean;
}): string {
	// Short braindump scenarios (existing project only)
	if (isShortBrainDump && !isNewProject) {
		if (processingType === 'context-update') {
			return 'short-braindump-context-update';
		} else if (processingType === 'tasks') {
			return hasQuestions
				? 'short-braindump-task-extraction-with-questions'
				: 'short-braindump-task-extraction';
		}
	}

	// Dual processing scenarios
	if (isDualProcessing) {
		if (isNewProject) {
			// New project dual processing
			if (processingType === 'context') {
				return 'new-project-dual-context';
			} else if (processingType === 'tasks') {
				return 'new-project-dual-tasks';
			}
		} else {
			// Existing project dual processing
			if (processingType === 'context') {
				return 'existing-project-dual-context';
			} else if (processingType === 'tasks') {
				return hasQuestions
					? 'existing-project-dual-tasks-with-questions'
					: 'existing-project-dual-tasks';
			}
		}
	}

	// Singular processing (edge case: new project without dual processing)
	if (isNewProject && !isDualProcessing) {
		return 'new-project-singular';
	}

	// Fallback for backwards compatibility
	const isShort = brainDumpLength < 500;
	if (isNewProject) {
		return 'new-project-singular';
	} else {
		return isShort ? 'short-braindump-task-extraction' : 'existing-project-dual-context';
	}
}
