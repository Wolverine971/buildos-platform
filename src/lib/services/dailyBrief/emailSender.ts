// src/lib/services/dailyBrief/emailSender.ts
import type { SupabaseClient } from '@supabase/supabase-js';
import type { DailyBriefResult } from '$lib/types/daily-brief';
import { EmailService } from '../email-service';
import { renderMarkdown } from '$lib/utils/markdown';

export class DailyBriefEmailSender {
	private emailService: EmailService;

	constructor(private supabase: SupabaseClient) {
		this.emailService = new EmailService(supabase);
	}

	/**
	 * Check if user has opted in for email notifications
	 */
	async shouldSendEmail(userId: string): Promise<boolean> {
		try {
			const { data: preferences } = await this.supabase
				.from('user_brief_preferences')
				.select('email_daily_brief')
				.eq('user_id', userId)
				.single();

			return preferences?.email_daily_brief === true;
		} catch (error) {
			console.error('Error checking email preferences:', error);
			return false;
		}
	}

	/**
	 * Get user email address
	 */
	async getUserEmail(userId: string): Promise<string | null> {
		try {
			const { data: user } = await this.supabase
				.from('users')
				.select('email')
				.eq('id', userId)
				.single();

			return user?.email || null;
		} catch (error) {
			console.error('Error fetching user email:', error);
			return null;
		}
	}

	/**
	 * Format the brief content for email
	 */
	formatBriefForEmail(brief: DailyBriefResult, briefDate: string): string {
		const htmlContent = renderMarkdown(brief.main_brief?.content || '');

		// Create a complete HTML email template
		return `
<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<style>
		body {
			font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
			line-height: 1.6;
			color: #333;
			max-width: 600px;
			margin: 0 auto;
			padding: 20px;
			background-color: #f5f5f5;
		}
		.container {
			background-color: white;
			border-radius: 8px;
			padding: 30px;
			box-shadow: 0 2px 4px rgba(0,0,0,0.1);
		}
		h1 {
			color: #1e40af;
			font-size: 24px;
			margin-bottom: 20px;
			border-bottom: 2px solid #e5e7eb;
			padding-bottom: 10px;
		}
		h2 {
			color: #374151;
			font-size: 20px;
			margin-top: 25px;
			margin-bottom: 15px;
		}
		h3 {
			color: #4b5563;
			font-size: 18px;
			margin-top: 20px;
			margin-bottom: 10px;
		}
		ul, ol {
			margin: 10px 0;
			padding-left: 25px;
		}
		li {
			margin: 8px 0;
		}
		.footer {
			margin-top: 30px;
			padding-top: 20px;
			border-top: 1px solid #e5e7eb;
			text-align: center;
			color: #6b7280;
			font-size: 14px;
		}
		.footer a {
			color: #3b82f6;
			text-decoration: none;
		}
		.footer a:hover {
			text-decoration: underline;
		}
		.date-badge {
			display: inline-block;
			background-color: #eff6ff;
			color: #1e40af;
			padding: 4px 12px;
			border-radius: 4px;
			font-size: 14px;
			font-weight: 500;
			margin-bottom: 20px;
		}
		.priority-section {
			background-color: #fef3c7;
			border-left: 4px solid #f59e0b;
			padding: 15px;
			margin: 20px 0;
			border-radius: 4px;
		}
		blockquote {
			border-left: 4px solid #e5e7eb;
			padding-left: 16px;
			margin: 16px 0;
			color: #6b7280;
			font-style: italic;
		}
	</style>
</head>
<body>
	<div class="container">
		<h1>ðŸ“Š Your Daily Brief</h1>
		<div class="date-badge">${new Date(briefDate).toLocaleDateString('en-US', {
			weekday: 'long',
			year: 'numeric',
			month: 'long',
			day: 'numeric'
		})}</div>
		
		${htmlContent}
		
		<div class="footer">
			<p>This daily brief was generated by BuildOS to help you stay focused and productive.</p>
			<p>
				<a href="https://build-os.com/briefs">View in BuildOS</a> | 
				<a href="https://build-os.com/profile">Manage Email Preferences</a>
			</p>
			<p style="margin-top: 15px; font-size: 12px; color: #9ca3af;">
				You're receiving this because you opted in to daily brief emails.
			</p>
		</div>
	</div>
</body>
</html>`;
	}

	/**
	 * Send the daily brief email
	 */
	async sendDailyBriefEmail(
		userId: string,
		briefDate: string,
		brief: DailyBriefResult
	): Promise<boolean> {
		try {
			// Check if user has opted in
			const shouldSend = await this.shouldSendEmail(userId);
			if (!shouldSend) {
				console.log(`User ${userId} has not opted in for email briefs`);
				return false;
			}

			// Get user email
			const email = await this.getUserEmail(userId);
			if (!email) {
				console.error(`No email found for user ${userId}`);
				return false;
			}

			// Format the email content
			const htmlBody = this.formatBriefForEmail(brief, briefDate);

			// Create a plain text version as well
			const plainTextBody = `
Your Daily Brief - ${new Date(briefDate).toLocaleDateString()}

${brief.main_brief?.content}

---
View in BuildOS: https://build-os.com/briefs
Manage preferences: https://build-os.com/profile
`;

			// Send the email with tracking + structured metadata
			await this.emailService.sendEmail({
				to: email,
				subject: `Daily Brief - ${new Date(briefDate).toLocaleDateString('en-US', {
					weekday: 'short',
					month: 'short',
					day: 'numeric'
				})}`,
				body: plainTextBody,
				html: htmlBody,
				userId,
				createdBy: 'daily-brief-service',
				metadata: {
					type: 'daily_brief',
					brief_date: briefDate,
					user_id: userId
				}
			});

			console.log(`Daily brief email sent to ${email} for date ${briefDate}`);
			return true;
		} catch (error) {
			console.error('Error sending daily brief email:', error);
			return false;
		}
	}
}
